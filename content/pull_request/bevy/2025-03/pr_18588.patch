diff --git a/crates/bevy_render/src/renderer/graph_runner.rs b/crates/bevy_render/src/renderer/graph_runner.rs
index cc03374ea4316..64a7b885d5db7 100644
--- a/crates/bevy_render/src/renderer/graph_runner.rs
+++ b/crates/bevy_render/src/renderer/graph_runner.rs
@@ -87,10 +87,10 @@ impl RenderGraphRunner {
         finalizer(render_context.command_encoder());
 
         let (render_device, mut diagnostics_recorder) = {
+            let (commands, render_device, diagnostics_recorder) = render_context.finish();
+
             #[cfg(feature = "trace")]
             let _span = info_span!("submit_graph_commands").entered();
-
-            let (commands, render_device, diagnostics_recorder) = render_context.finish();
             queue.submit(commands);
 
             (render_device, diagnostics_recorder)
diff --git a/crates/bevy_render/src/renderer/mod.rs b/crates/bevy_render/src/renderer/mod.rs
index 32fe441f4d7c8..81da7444dc053 100644
--- a/crates/bevy_render/src/renderer/mod.rs
+++ b/crates/bevy_render/src/renderer/mod.rs
@@ -498,6 +498,10 @@ impl<'w> RenderContext<'w> {
 
         let mut command_buffers = Vec::with_capacity(self.command_buffer_queue.len());
 
+        #[cfg(feature = "trace")]
+        let _command_buffer_generation_tasks_span =
+            info_span!("command_buffer_generation_tasks").entered();
+
         #[cfg(not(all(target_arch = "wasm32", target_feature = "atomics")))]
         {
             let mut task_based_command_buffers = ComputeTaskPool::get().scope(|task_pool| {
@@ -537,6 +541,9 @@ impl<'w> RenderContext<'w> {
             }
         }
 
+        #[cfg(feature = "trace")]
+        drop(_command_buffer_generation_tasks_span);
+
         command_buffers.sort_unstable_by_key(|(i, _)| *i);
 
         let mut command_buffers = command_buffers

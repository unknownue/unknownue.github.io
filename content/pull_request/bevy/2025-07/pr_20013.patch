diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 08d34fec7adbd..8ae7f6597ede9 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -294,7 +294,7 @@ jobs:
     steps:
       - uses: actions/checkout@v4
       - name: Check for typos
-        uses: crate-ci/typos@v1.33.1
+        uses: crate-ci/typos@v1.34.0
       - name: Typos info
         if: failure()
         run: |
diff --git a/crates/bevy_core_widgets/src/core_slider.rs b/crates/bevy_core_widgets/src/core_slider.rs
index 8a5e27f8855ca..521e6fc1d39ff 100644
--- a/crates/bevy_core_widgets/src/core_slider.rs
+++ b/crates/bevy_core_widgets/src/core_slider.rs
@@ -176,7 +176,7 @@ impl Default for SliderRange {
 }
 
 /// Defines the amount by which to increment or decrement the slider value when using keyboard
-/// shorctuts. Defaults to 1.0.
+/// shortcuts. Defaults to 1.0.
 #[derive(Component, Debug, PartialEq, Clone)]
 #[component(immutable)]
 pub struct SliderStep(pub f32);
diff --git a/crates/bevy_ecs/src/archetype.rs b/crates/bevy_ecs/src/archetype.rs
index 1ecbad16a1a37..f682554ce9a51 100644
--- a/crates/bevy_ecs/src/archetype.rs
+++ b/crates/bevy_ecs/src/archetype.rs
@@ -630,7 +630,7 @@ impl Archetype {
     #[inline]
     pub fn len(&self) -> u32 {
         // No entity may have more than one archetype row, so there are no duplicates,
-        // and there may only ever be u32::MAX entities, so the length never exceeds u32's cappacity.
+        // and there may only ever be u32::MAX entities, so the length never exceeds u32's capacity.
         self.entities.len() as u32
     }
 
diff --git a/crates/bevy_ecs/src/storage/table/mod.rs b/crates/bevy_ecs/src/storage/table/mod.rs
index be75c58f03828..548ba82103f8a 100644
--- a/crates/bevy_ecs/src/storage/table/mod.rs
+++ b/crates/bevy_ecs/src/storage/table/mod.rs
@@ -597,7 +597,7 @@ impl Table {
     #[inline]
     pub fn entity_count(&self) -> u32 {
         // No entity may have more than one table row, so there are no duplicates,
-        // and there may only ever be u32::MAX entities, so the length never exceeds u32's cappacity.
+        // and there may only ever be u32::MAX entities, so the length never exceeds u32's capacity.
         self.entities.len() as u32
     }
 
diff --git a/crates/bevy_picking/src/hover.rs b/crates/bevy_picking/src/hover.rs
index dbb6ee942ed01..f6755683940be 100644
--- a/crates/bevy_picking/src/hover.rs
+++ b/crates/bevy_picking/src/hover.rs
@@ -344,7 +344,7 @@ pub fn update_is_hovered(
     }
 
     // Algorithm: for each entity having a `Hovered` component, we want to know if the current
-    // entry in the hover map is "within" (that is, in the set of descenants of) that entity. Rather
+    // entry in the hover map is "within" (that is, in the set of descendants of) that entity. Rather
     // than doing an expensive breadth-first traversal of children, instead start with the hovermap
     // entry and search upwards. We can make this even cheaper by building a set of ancestors for
     // the hovermap entry, and then testing each `Hovered` entity against that set.
diff --git a/crates/bevy_reflect/src/kind.rs b/crates/bevy_reflect/src/kind.rs
index 8988b30aa5691..e8a2310b0f49d 100644
--- a/crates/bevy_reflect/src/kind.rs
+++ b/crates/bevy_reflect/src/kind.rs
@@ -215,7 +215,7 @@ pub enum ReflectRef<'a> {
     /// [function-like]: Function
     #[cfg(feature = "functions")]
     Function(&'a dyn Function),
-    /// An immutable refeence to an [opaque] type.
+    /// An immutable reference to an [opaque] type.
     ///
     /// [opaque]: ReflectKind::Opaque
     Opaque(&'a dyn PartialReflect),
@@ -281,7 +281,7 @@ pub enum ReflectMut<'a> {
     ///
     /// [function-like]: Function
     Function(&'a mut dyn Function),
-    /// A mutable refeence to an [opaque] type.
+    /// A mutable reference to an [opaque] type.
     ///
     /// [opaque]: ReflectKind::Opaque
     Opaque(&'a mut dyn PartialReflect),
diff --git a/crates/bevy_utils/src/debug_info.rs b/crates/bevy_utils/src/debug_info.rs
index 292b77d352f98..71ce96ea0026e 100644
--- a/crates/bevy_utils/src/debug_info.rs
+++ b/crates/bevy_utils/src/debug_info.rs
@@ -79,7 +79,7 @@ impl DebugName {
         }
     }
 
-    /// Get the [`ShortName`] corresping to this debug name
+    /// Get the [`ShortName`] corresponding to this debug name
     ///
     /// The value will be a static string if the `debug` feature is not enabled
     pub fn shortname(&self) -> ShortName {

diff --git a/crates/bevy_math/src/primitives/dim2.rs b/crates/bevy_math/src/primitives/dim2.rs
index 9cb379706c18b..98f0ee5b9a41f 100644
--- a/crates/bevy_math/src/primitives/dim2.rs
+++ b/crates/bevy_math/src/primitives/dim2.rs
@@ -1245,6 +1245,15 @@ pub struct Segment2d {
 
 impl Primitive2d for Segment2d {}
 
+impl Default for Segment2d {
+    /// Returns the default [`Segment2d`] with endpoints at `(0.0, 0.0)` and `(1.0, 0.0)`.
+    fn default() -> Self {
+        Self {
+            vertices: [Vec2::new(0.0, 0.0), Vec2::new(1.0, 0.0)],
+        }
+    }
+}
+
 impl Segment2d {
     /// Create a new `Segment2d` from its endpoints.
     #[inline(always)]
diff --git a/crates/bevy_math/src/primitives/dim3.rs b/crates/bevy_math/src/primitives/dim3.rs
index 86aa6c5bdf068..a7208c37e5b9d 100644
--- a/crates/bevy_math/src/primitives/dim3.rs
+++ b/crates/bevy_math/src/primitives/dim3.rs
@@ -377,6 +377,15 @@ pub struct Segment3d {
 
 impl Primitive3d for Segment3d {}
 
+impl Default for Segment3d {
+    /// Returns the default [`Segment3d`] with endpoints at `(0.0, 0.0, 0.0)` and `(1.0, 0.0, 0.0)`.
+    fn default() -> Self {
+        Self {
+            vertices: [Vec3::new(0.0, 0.0, 0.0), Vec3::new(1.0, 0.0, 0.0)],
+        }
+    }
+}
+
 impl Segment3d {
     /// Create a new `Segment3d` from its endpoints.
     #[inline(always)]
diff --git a/crates/bevy_mesh/src/primitives/dim2.rs b/crates/bevy_mesh/src/primitives/dim2.rs
index e543f8a1951e3..172cb152074d8 100644
--- a/crates/bevy_mesh/src/primitives/dim2.rs
+++ b/crates/bevy_mesh/src/primitives/dim2.rs
@@ -8,7 +8,7 @@ use bevy_math::{
     ops,
     primitives::{
         Annulus, Capsule2d, Circle, CircularSector, CircularSegment, ConvexPolygon, Ellipse,
-        Rectangle, RegularPolygon, Rhombus, Triangle2d, Triangle3d, WindingOrder,
+        Rectangle, RegularPolygon, Rhombus, Segment2d, Triangle2d, Triangle3d, WindingOrder,
     },
     FloatExt, Vec2,
 };
@@ -636,6 +636,46 @@ impl From<Ellipse> for Mesh {
     }
 }
 
+/// A builder used for creating a [`Mesh`] with a [`Segment2d`].
+pub struct Segment2dMeshBuilder {
+    /// The [`Segment2d`] shape.
+    pub segment: Segment2d,
+}
+
+impl Segment2dMeshBuilder {
+    /// Creates a new [`Segment2dMeshBuilder`] from a given segment.
+    #[inline]
+    pub const fn new(line: Segment2d) -> Self {
+        Self { segment: line }
+    }
+}
+
+impl MeshBuilder for Segment2dMeshBuilder {
+    fn build(&self) -> Mesh {
+        let positions = self.segment.vertices.map(|v| v.extend(0.0)).to_vec();
+        let indices = Indices::U32(vec![0, 1]);
+
+        Mesh::new(PrimitiveTopology::LineList, RenderAssetUsages::default())
+            .with_inserted_attribute(Mesh::ATTRIBUTE_POSITION, positions)
+            .with_inserted_indices(indices)
+    }
+}
+
+impl Meshable for Segment2d {
+    type Output = Segment2dMeshBuilder;
+
+    fn mesh(&self) -> Self::Output {
+        Segment2dMeshBuilder::new(*self)
+    }
+}
+
+impl From<Segment2d> for Mesh {
+    /// Converts this segment into a [`Mesh`] using a default [`Segment2dMeshBuilder`].
+    fn from(segment: Segment2d) -> Self {
+        segment.mesh().build()
+    }
+}
+
 /// A builder for creating a [`Mesh`] with an [`Annulus`] shape.
 #[derive(Clone, Copy, Debug, Reflect)]
 #[reflect(Default, Debug, Clone)]
diff --git a/crates/bevy_mesh/src/primitives/dim3/mod.rs b/crates/bevy_mesh/src/primitives/dim3/mod.rs
index 2f8d724e673ab..a27d0a1bfb259 100644
--- a/crates/bevy_mesh/src/primitives/dim3/mod.rs
+++ b/crates/bevy_mesh/src/primitives/dim3/mod.rs
@@ -4,6 +4,7 @@ mod conical_frustum;
 mod cuboid;
 mod cylinder;
 mod plane;
+mod segment3d;
 mod sphere;
 mod tetrahedron;
 mod torus;
diff --git a/crates/bevy_mesh/src/primitives/dim3/segment3d.rs b/crates/bevy_mesh/src/primitives/dim3/segment3d.rs
new file mode 100644
index 0000000000000..3c892b424277d
--- /dev/null
+++ b/crates/bevy_mesh/src/primitives/dim3/segment3d.rs
@@ -0,0 +1,45 @@
+use crate::{Indices, Mesh, MeshBuilder, Meshable, PrimitiveTopology};
+use bevy_asset::RenderAssetUsages;
+use bevy_math::primitives::Segment3d;
+use bevy_reflect::prelude::*;
+
+/// A builder used for creating a [`Mesh`] with a [`Segment3d`] shape.
+#[derive(Clone, Copy, Debug, Default, Reflect)]
+#[reflect(Default, Debug, Clone)]
+pub struct Segment3dMeshBuilder {
+    segment: Segment3d,
+}
+
+impl MeshBuilder for Segment3dMeshBuilder {
+    fn build(&self) -> Mesh {
+        let positions: Vec<_> = self.segment.vertices.into();
+        let indices = Indices::U32(vec![0, 1]);
+
+        Mesh::new(PrimitiveTopology::LineList, RenderAssetUsages::default())
+            .with_inserted_indices(indices)
+            .with_inserted_attribute(Mesh::ATTRIBUTE_POSITION, positions)
+    }
+}
+
+impl Meshable for Segment3d {
+    type Output = Segment3dMeshBuilder;
+
+    fn mesh(&self) -> Self::Output {
+        Segment3dMeshBuilder { segment: *self }
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use crate::Meshable;
+    use bevy_math::Vec3;
+
+    #[test]
+    fn segment3d_mesh_builder() {
+        let segment = Segment3d::new(Vec3::ZERO, Vec3::X);
+        let mesh = segment.mesh().build();
+        assert_eq!(mesh.attribute(Mesh::ATTRIBUTE_POSITION).unwrap().len(), 2);
+        assert_eq!(mesh.indices().unwrap().len(), 2);
+    }
+}

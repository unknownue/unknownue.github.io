diff --git a/crates/bevy_app/src/hotpatch.rs b/crates/bevy_app/src/hotpatch.rs
index 1f9da40730e03..90642a67ddaea 100644
--- a/crates/bevy_app/src/hotpatch.rs
+++ b/crates/bevy_app/src/hotpatch.rs
@@ -3,7 +3,10 @@ extern crate alloc;
 
 use alloc::sync::Arc;
 
-use bevy_ecs::{event::EventWriter, HotPatched};
+use bevy_ecs::{
+    change_detection::DetectChangesMut, event::EventWriter, system::ResMut, HotPatchChanges,
+    HotPatched,
+};
 #[cfg(not(target_family = "wasm"))]
 use dioxus_devtools::connect_subsecond;
 use dioxus_devtools::subsecond;
@@ -29,14 +32,17 @@ impl Plugin for HotPatchPlugin {
             sender.send(HotPatched).unwrap();
         }));
 
-        // Adds a system that will read the channel for new `HotPatched`, and forward them as event to the ECS
-        app.add_event::<HotPatched>().add_systems(
-            Last,
-            move |mut events: EventWriter<HotPatched>| {
-                if receiver.try_recv().is_ok() {
-                    events.write_default();
-                }
-            },
-        );
+        // Adds a system that will read the channel for new `HotPatched` messages, send the event, and update change detection.
+        app.init_resource::<HotPatchChanges>()
+            .add_event::<HotPatched>()
+            .add_systems(
+                Last,
+                move |mut events: EventWriter<HotPatched>, mut res: ResMut<HotPatchChanges>| {
+                    if receiver.try_recv().is_ok() {
+                        events.write_default();
+                        res.set_changed();
+                    }
+                },
+            );
     }
 }
diff --git a/crates/bevy_ecs/src/lib.rs b/crates/bevy_ecs/src/lib.rs
index 8580df7a3b484..e2cc25d9b047a 100644
--- a/crates/bevy_ecs/src/lib.rs
+++ b/crates/bevy_ecs/src/lib.rs
@@ -138,11 +138,23 @@ pub mod __macro_exports {
 
 /// Event sent when a hotpatch happens.
 ///
-/// Systems should refresh their inner pointers.
+/// Can be used for causing custom behavior on hot-patch.
 #[cfg(feature = "hotpatching")]
 #[derive(BufferedEvent, Default)]
 pub struct HotPatched;
 
+/// Resource which "changes" when a hotpatch happens.
+///
+/// Exists solely for change-detection, which allows systems to
+/// know whether a hotpatch happened even if they only run irregularily and would
+/// miss the event.
+///
+/// Used by Executors and other places which run systems
+/// [`System::refresh_hotpatch`](crate::system::System::refresh_hotpatch) only when necessary.
+#[cfg(feature = "hotpatching")]
+#[derive(resource::Resource, Default)]
+pub struct HotPatchChanges;
+
 #[cfg(test)]
 mod tests {
     use crate::{
diff --git a/crates/bevy_ecs/src/observer/runner.rs b/crates/bevy_ecs/src/observer/runner.rs
index f25e742eed300..d843fb4589090 100644
--- a/crates/bevy_ecs/src/observer/runner.rs
+++ b/crates/bevy_ecs/src/observer/runner.rs
@@ -63,10 +63,17 @@ pub(super) fn observer_system_runner<E: Event, B: Bundle, S: ObserverSystem<E, B
     //   and is never exclusive
     // - system is the same type erased system from above
     unsafe {
-        // Always refresh hotpatch pointers
-        // There's no guarantee that the `HotPatched` event would still be there once the observer is triggered.
         #[cfg(feature = "hotpatching")]
-        (*system).refresh_hotpatch();
+        if world
+            .get_resource_ref::<crate::HotPatchChanges>()
+            .map(|r| {
+                r.last_changed()
+                    .is_newer_than((*system).get_last_run(), world.change_tick())
+            })
+            .unwrap_or(true)
+        {
+            (*system).refresh_hotpatch();
+        };
 
         if let Err(RunSystemError::Failed(err)) = (*system)
             .validate_param_unsafe(world)
diff --git a/crates/bevy_ecs/src/schedule/executor/multi_threaded.rs b/crates/bevy_ecs/src/schedule/executor/multi_threaded.rs
index b2ccfbddf777b..1a11bf3a967d7 100644
--- a/crates/bevy_ecs/src/schedule/executor/multi_threaded.rs
+++ b/crates/bevy_ecs/src/schedule/executor/multi_threaded.rs
@@ -23,7 +23,7 @@ use crate::{
     world::{unsafe_world_cell::UnsafeWorldCell, World},
 };
 #[cfg(feature = "hotpatching")]
-use crate::{event::Events, HotPatched};
+use crate::{prelude::DetectChanges, HotPatchChanges};
 
 use super::__rust_begin_short_backtrace;
 
@@ -448,12 +448,12 @@ impl ExecutorState {
         }
 
         #[cfg(feature = "hotpatching")]
-        let should_update_hotpatch = !context
+        let hotpatch_tick = context
             .environment
             .world_cell
-            .get_resource::<Events<HotPatched>>()
-            .map(Events::is_empty)
-            .unwrap_or(true);
+            .get_resource_ref::<HotPatchChanges>()
+            .map(|r| r.last_changed())
+            .unwrap_or_default();
 
         // can't borrow since loop mutably borrows `self`
         let mut ready_systems = core::mem::take(&mut self.ready_systems_copy);
@@ -474,7 +474,10 @@ impl ExecutorState {
                     &mut unsafe { &mut *context.environment.systems[system_index].get() }.system;
 
                 #[cfg(feature = "hotpatching")]
-                if should_update_hotpatch {
+                if hotpatch_tick.is_newer_than(
+                    system.get_last_run(),
+                    context.environment.world_cell.change_tick(),
+                ) {
                     system.refresh_hotpatch();
                 }
 
diff --git a/crates/bevy_ecs/src/schedule/executor/simple.rs b/crates/bevy_ecs/src/schedule/executor/simple.rs
index f33cfcf27e3af..6c613f1bd29e9 100644
--- a/crates/bevy_ecs/src/schedule/executor/simple.rs
+++ b/crates/bevy_ecs/src/schedule/executor/simple.rs
@@ -9,6 +9,8 @@ use tracing::info_span;
 #[cfg(feature = "std")]
 use std::eprintln;
 
+#[cfg(feature = "hotpatching")]
+use crate::{change_detection::DetectChanges, HotPatchChanges};
 use crate::{
     error::{ErrorContext, ErrorHandler},
     schedule::{
@@ -18,8 +20,6 @@ use crate::{
     system::RunSystemError,
     world::World,
 };
-#[cfg(feature = "hotpatching")]
-use crate::{event::Events, HotPatched};
 
 use super::__rust_begin_short_backtrace;
 
@@ -65,10 +65,10 @@ impl SystemExecutor for SimpleExecutor {
         }
 
         #[cfg(feature = "hotpatching")]
-        let should_update_hotpatch = !world
-            .get_resource::<Events<HotPatched>>()
-            .map(Events::is_empty)
-            .unwrap_or(true);
+        let hotpatch_tick = world
+            .get_resource_ref::<HotPatchChanges>()
+            .map(|r| r.last_changed())
+            .unwrap_or_default();
 
         for system_index in 0..schedule.systems.len() {
             #[cfg(feature = "trace")]
@@ -113,7 +113,7 @@ impl SystemExecutor for SimpleExecutor {
             should_run_span.exit();
 
             #[cfg(feature = "hotpatching")]
-            if should_update_hotpatch {
+            if hotpatch_tick.is_newer_than(system.get_last_run(), world.change_tick()) {
                 system.refresh_hotpatch();
             }
 
@@ -186,10 +186,10 @@ fn evaluate_and_fold_conditions(
     error_handler: ErrorHandler,
 ) -> bool {
     #[cfg(feature = "hotpatching")]
-    let should_update_hotpatch = !world
-        .get_resource::<Events<HotPatched>>()
-        .map(Events::is_empty)
-        .unwrap_or(true);
+    let hotpatch_tick = world
+        .get_resource_ref::<HotPatchChanges>()
+        .map(|r| r.last_changed())
+        .unwrap_or_default();
 
     #[expect(
         clippy::unnecessary_fold,
@@ -199,7 +199,7 @@ fn evaluate_and_fold_conditions(
         .iter_mut()
         .map(|ConditionWithAccess { condition, .. }| {
             #[cfg(feature = "hotpatching")]
-            if should_update_hotpatch {
+            if hotpatch_tick.is_newer_than(condition.get_last_run(), world.change_tick()) {
                 condition.refresh_hotpatch();
             }
             __rust_begin_short_backtrace::readonly_run(&mut **condition, world).unwrap_or_else(
diff --git a/crates/bevy_ecs/src/schedule/executor/single_threaded.rs b/crates/bevy_ecs/src/schedule/executor/single_threaded.rs
index 36f7b259f2f4f..a37779cc8433b 100644
--- a/crates/bevy_ecs/src/schedule/executor/single_threaded.rs
+++ b/crates/bevy_ecs/src/schedule/executor/single_threaded.rs
@@ -15,8 +15,9 @@ use crate::{
     system::RunSystemError,
     world::World,
 };
+
 #[cfg(feature = "hotpatching")]
-use crate::{event::Events, HotPatched};
+use crate::{change_detection::DetectChanges, HotPatchChanges};
 
 use super::__rust_begin_short_backtrace;
 
@@ -66,10 +67,10 @@ impl SystemExecutor for SingleThreadedExecutor {
         }
 
         #[cfg(feature = "hotpatching")]
-        let should_update_hotpatch = !world
-            .get_resource::<Events<HotPatched>>()
-            .map(Events::is_empty)
-            .unwrap_or(true);
+        let hotpatch_tick = world
+            .get_resource_ref::<HotPatchChanges>()
+            .map(|r| r.last_changed())
+            .unwrap_or_default();
 
         for system_index in 0..schedule.systems.len() {
             #[cfg(feature = "trace")]
@@ -114,7 +115,7 @@ impl SystemExecutor for SingleThreadedExecutor {
             should_run_span.exit();
 
             #[cfg(feature = "hotpatching")]
-            if should_update_hotpatch {
+            if hotpatch_tick.is_newer_than(system.get_last_run(), world.change_tick()) {
                 system.refresh_hotpatch();
             }
 
@@ -202,10 +203,10 @@ fn evaluate_and_fold_conditions(
     error_handler: ErrorHandler,
 ) -> bool {
     #[cfg(feature = "hotpatching")]
-    let should_update_hotpatch = !world
-        .get_resource::<Events<HotPatched>>()
-        .map(Events::is_empty)
-        .unwrap_or(true);
+    let hotpatch_tick = world
+        .get_resource_ref::<HotPatchChanges>()
+        .map(|r| r.last_changed())
+        .unwrap_or_default();
 
     #[expect(
         clippy::unnecessary_fold,
@@ -215,7 +216,7 @@ fn evaluate_and_fold_conditions(
         .iter_mut()
         .map(|ConditionWithAccess { condition, .. }| {
             #[cfg(feature = "hotpatching")]
-            if should_update_hotpatch {
+            if hotpatch_tick.is_newer_than(condition.get_last_run(), world.change_tick()) {
                 condition.refresh_hotpatch();
             }
             __rust_begin_short_backtrace::readonly_run(&mut **condition, world).unwrap_or_else(
diff --git a/crates/bevy_ecs/src/system/system_registry.rs b/crates/bevy_ecs/src/system/system_registry.rs
index bc87cd4feae50..e00d9dcc2092b 100644
--- a/crates/bevy_ecs/src/system/system_registry.rs
+++ b/crates/bevy_ecs/src/system/system_registry.rs
@@ -1,5 +1,7 @@
 #[cfg(feature = "bevy_reflect")]
 use crate::reflect::ReflectComponent;
+#[cfg(feature = "hotpatching")]
+use crate::{change_detection::DetectChanges, HotPatchChanges};
 use crate::{
     change_detection::Mut,
     entity::Entity,
@@ -354,6 +356,17 @@ impl World {
             initialized = true;
         }
 
+        // refresh hotpatches for stored systems
+        #[cfg(feature = "hotpatching")]
+        if self
+            .get_resource_ref::<HotPatchChanges>()
+            .map(|r| r.last_changed())
+            .unwrap_or_default()
+            .is_newer_than(system.get_last_run(), self.change_tick())
+        {
+            system.refresh_hotpatch();
+        }
+
         // Wait to run the commands until the system is available again.
         // This is needed so the systems can recursively run themselves.
         let result = system.run_without_applying_deferred(input, self);

diff --git a/benches/Cargo.toml b/benches/Cargo.toml
index f5faeec237fc3..3f547d80d984b 100644
--- a/benches/Cargo.toml
+++ b/benches/Cargo.toml
@@ -24,7 +24,7 @@ bevy_reflect = { path = "../crates/bevy_reflect", features = ["functions"] }
 bevy_render = { path = "../crates/bevy_render" }
 bevy_tasks = { path = "../crates/bevy_tasks" }
 bevy_utils = { path = "../crates/bevy_utils" }
-bevy_platform_support = { path = "../crates/bevy_platform_support", default-features = false, features = [
+bevy_platform = { path = "../crates/bevy_platform", default-features = false, features = [
   "std",
 ] }
 
diff --git a/benches/benches/bevy_reflect/map.rs b/benches/benches/bevy_reflect/map.rs
index e35af1c992b17..1eab01a587459 100644
--- a/benches/benches/bevy_reflect/map.rs
+++ b/benches/benches/bevy_reflect/map.rs
@@ -1,7 +1,7 @@
 use core::{fmt::Write, hint::black_box, iter, time::Duration};
 
 use benches::bench;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{DynamicMap, Map};
 use criterion::{
     criterion_group, measurement::Measurement, AxisScale, BatchSize, BenchmarkGroup, BenchmarkId,
diff --git a/crates/bevy_animation/Cargo.toml b/crates/bevy_animation/Cargo.toml
index 882904f4296ea..a93a66267fb34 100644
--- a/crates/bevy_animation/Cargo.toml
+++ b/crates/bevy_animation/Cargo.toml
@@ -25,7 +25,7 @@ bevy_time = { path = "../bevy_time", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_ecs = { path = "../bevy_ecs", version = "0.16.0-dev" }
 bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
   "serialize",
 ] }
@@ -53,7 +53,7 @@ bevy_log = { path = "../bevy_log", version = "0.16.0-dev", default-features = fa
 bevy_app = { path = "../bevy_app", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-features = false, features = [
diff --git a/crates/bevy_animation/src/animation_curves.rs b/crates/bevy_animation/src/animation_curves.rs
index be68c9357658f..45fa393e05965 100644
--- a/crates/bevy_animation/src/animation_curves.rs
+++ b/crates/bevy_animation/src/animation_curves.rs
@@ -101,7 +101,7 @@ use bevy_math::curve::{
     Curve, Interval,
 };
 use bevy_mesh::morph::MorphWeights;
-use bevy_platform_support::hash::Hashed;
+use bevy_platform::hash::Hashed;
 use bevy_reflect::{FromReflect, Reflect, Reflectable, TypeInfo, Typed};
 use downcast_rs::{impl_downcast, Downcast};
 
diff --git a/crates/bevy_animation/src/graph.rs b/crates/bevy_animation/src/graph.rs
index 15fd96c63b08f..aa6d252fee94f 100644
--- a/crates/bevy_animation/src/graph.rs
+++ b/crates/bevy_animation/src/graph.rs
@@ -17,7 +17,7 @@ use bevy_ecs::{
     resource::Resource,
     system::{Res, ResMut},
 };
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{prelude::ReflectDefault, Reflect, ReflectSerialize};
 use derive_more::derive::From;
 use petgraph::{
diff --git a/crates/bevy_animation/src/lib.rs b/crates/bevy_animation/src/lib.rs
index 52e262d486b07..43ea343aa311c 100644
--- a/crates/bevy_animation/src/lib.rs
+++ b/crates/bevy_animation/src/lib.rs
@@ -35,7 +35,7 @@ use bevy_app::{Animation, App, Plugin, PostUpdate};
 use bevy_asset::{Asset, AssetApp, AssetEvents, Assets};
 use bevy_ecs::{prelude::*, world::EntityMutExcept};
 use bevy_math::FloatOrd;
-use bevy_platform_support::{collections::HashMap, hash::NoOpHash};
+use bevy_platform::{collections::HashMap, hash::NoOpHash};
 use bevy_reflect::{prelude::ReflectDefault, Reflect, TypePath};
 use bevy_time::Time;
 use bevy_transform::TransformSystem;
@@ -755,10 +755,10 @@ impl AnimationCurveEvaluators {
                 .component_property_curve_evaluators
                 .get_or_insert_with(component_property, func),
             EvaluatorId::Type(type_id) => match self.type_id_curve_evaluators.entry(type_id) {
-                bevy_platform_support::collections::hash_map::Entry::Occupied(occupied_entry) => {
+                bevy_platform::collections::hash_map::Entry::Occupied(occupied_entry) => {
                     &mut **occupied_entry.into_mut()
                 }
-                bevy_platform_support::collections::hash_map::Entry::Vacant(vacant_entry) => {
+                bevy_platform::collections::hash_map::Entry::Vacant(vacant_entry) => {
                     &mut **vacant_entry.insert(func())
                 }
             },
diff --git a/crates/bevy_app/Cargo.toml b/crates/bevy_app/Cargo.toml
index 204b26958fe18..f46db94db36bc 100644
--- a/crates/bevy_app/Cargo.toml
+++ b/crates/bevy_app/Cargo.toml
@@ -49,7 +49,7 @@ std = [
   "downcast-rs/std",
   "bevy_utils/std",
   "bevy_tasks/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
 ]
 
 ## `critical-section` provides the building blocks for synchronization primitives
@@ -57,14 +57,14 @@ std = [
 critical-section = [
   "bevy_tasks/critical-section",
   "bevy_ecs/critical-section",
-  "bevy_platform_support/critical-section",
+  "bevy_platform/critical-section",
   "bevy_reflect?/critical-section",
 ]
 
 ## Enables use of browser APIs.
 ## Note this is currently only applicable on `wasm32` architectures.
 web = [
-  "bevy_platform_support/web",
+  "bevy_platform/web",
   "bevy_tasks/web",
   "bevy_reflect?/web",
   "dep:wasm-bindgen",
@@ -81,7 +81,7 @@ bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev", default-features
   "alloc",
 ] }
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev", default-features = false }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false }
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false }
 
 # other
 downcast-rs = { version = "2", default-features = false }
diff --git a/crates/bevy_app/src/app.rs b/crates/bevy_app/src/app.rs
index dacd9483ab5d2..654a7098b9c34 100644
--- a/crates/bevy_app/src/app.rs
+++ b/crates/bevy_app/src/app.rs
@@ -16,7 +16,7 @@ use bevy_ecs::{
     schedule::{InternedSystemSet, ScheduleBuildSettings, ScheduleLabel},
     system::{IntoObserverSystem, ScheduleSystem, SystemId, SystemInput},
 };
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::{fmt::Debug, num::NonZero, panic::AssertUnwindSafe};
 use log::debug;
 
diff --git a/crates/bevy_app/src/plugin_group.rs b/crates/bevy_app/src/plugin_group.rs
index dca847f77f8ee..60897d5453066 100644
--- a/crates/bevy_app/src/plugin_group.rs
+++ b/crates/bevy_app/src/plugin_group.rs
@@ -4,7 +4,7 @@ use alloc::{
     string::{String, ToString},
     vec::Vec,
 };
-use bevy_platform_support::collections::hash_map::Entry;
+use bevy_platform::collections::hash_map::Entry;
 use bevy_utils::TypeIdMap;
 use core::any::TypeId;
 use log::{debug, warn};
diff --git a/crates/bevy_app/src/schedule_runner.rs b/crates/bevy_app/src/schedule_runner.rs
index ea0f23265dc00..594f849b2f905 100644
--- a/crates/bevy_app/src/schedule_runner.rs
+++ b/crates/bevy_app/src/schedule_runner.rs
@@ -3,7 +3,7 @@ use crate::{
     plugin::Plugin,
     PluginsState,
 };
-use bevy_platform_support::time::Instant;
+use bevy_platform::time::Instant;
 use core::time::Duration;
 
 #[cfg(all(target_arch = "wasm32", feature = "web"))]
@@ -160,7 +160,7 @@ impl Plugin for ScheduleRunnerPlugin {
                             loop {
                                 match tick(&mut app, wait) {
                                     Ok(Some(delay)) => {
-                                        bevy_platform_support::thread::sleep(delay);
+                                        bevy_platform::thread::sleep(delay);
                                     }
                                     Ok(None) => continue,
                                     Err(exit) => return exit,
diff --git a/crates/bevy_app/src/sub_app.rs b/crates/bevy_app/src/sub_app.rs
index ea51931b3507c..c340b80654a86 100644
--- a/crates/bevy_app/src/sub_app.rs
+++ b/crates/bevy_app/src/sub_app.rs
@@ -6,7 +6,7 @@ use bevy_ecs::{
     schedule::{InternedScheduleLabel, InternedSystemSet, ScheduleBuildSettings, ScheduleLabel},
     system::{ScheduleSystem, SystemId, SystemInput},
 };
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use core::fmt::Debug;
 
 #[cfg(feature = "trace")]
diff --git a/crates/bevy_app/src/task_pool_plugin.rs b/crates/bevy_app/src/task_pool_plugin.rs
index b2fde7768e6e3..5ed4e3fa5da6e 100644
--- a/crates/bevy_app/src/task_pool_plugin.rs
+++ b/crates/bevy_app/src/task_pool_plugin.rs
@@ -1,7 +1,7 @@
 use crate::{App, Plugin};
 
 use alloc::string::ToString;
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use bevy_tasks::{AsyncComputeTaskPool, ComputeTaskPool, IoTaskPool, TaskPoolBuilder};
 use core::fmt::Debug;
 use log::trace;
diff --git a/crates/bevy_asset/Cargo.toml b/crates/bevy_asset/Cargo.toml
index 68eb62455ebed..2c7c918300536 100644
--- a/crates/bevy_asset/Cargo.toml
+++ b/crates/bevy_asset/Cargo.toml
@@ -27,7 +27,7 @@ bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", features = [
 ] }
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
diff --git a/crates/bevy_asset/src/asset_changed.rs b/crates/bevy_asset/src/asset_changed.rs
index f8501cb206f34..40723d7b08d45 100644
--- a/crates/bevy_asset/src/asset_changed.rs
+++ b/crates/bevy_asset/src/asset_changed.rs
@@ -13,7 +13,7 @@ use bevy_ecs::{
     storage::{Table, TableRow},
     world::unsafe_world_cell::UnsafeWorldCell,
 };
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::marker::PhantomData;
 use disqualified::ShortName;
 use tracing::error;
diff --git a/crates/bevy_asset/src/assets.rs b/crates/bevy_asset/src/assets.rs
index cc08b282b2e2e..9fa8eb4381485 100644
--- a/crates/bevy_asset/src/assets.rs
+++ b/crates/bevy_asset/src/assets.rs
@@ -6,7 +6,7 @@ use bevy_ecs::{
     resource::Resource,
     system::{Res, ResMut, SystemChangeTick},
 };
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{Reflect, TypePath};
 use core::{any::TypeId, iter::Enumerate, marker::PhantomData, sync::atomic::AtomicU32};
 use crossbeam_channel::{Receiver, Sender};
@@ -600,7 +600,7 @@ impl<A: Asset> Assets<A> {
 pub struct AssetsMutIterator<'a, A: Asset> {
     queued_events: &'a mut Vec<AssetEvent<A>>,
     dense_storage: Enumerate<core::slice::IterMut<'a, Entry<A>>>,
-    hash_map: bevy_platform_support::collections::hash_map::IterMut<'a, Uuid, A>,
+    hash_map: bevy_platform::collections::hash_map::IterMut<'a, Uuid, A>,
 }
 
 impl<'a, A: Asset> Iterator for AssetsMutIterator<'a, A> {
diff --git a/crates/bevy_asset/src/handle.rs b/crates/bevy_asset/src/handle.rs
index f3f4cddeed989..e6ad1d074a78b 100644
--- a/crates/bevy_asset/src/handle.rs
+++ b/crates/bevy_asset/src/handle.rs
@@ -551,7 +551,7 @@ pub enum UntypedAssetConversionError {
 #[cfg(test)]
 mod tests {
     use alloc::boxed::Box;
-    use bevy_platform_support::hash::FixedHasher;
+    use bevy_platform::hash::FixedHasher;
     use bevy_reflect::PartialReflect;
     use core::hash::BuildHasher;
 
diff --git a/crates/bevy_asset/src/id.rs b/crates/bevy_asset/src/id.rs
index 0f146eda65582..f9aa0d1b9632b 100644
--- a/crates/bevy_asset/src/id.rs
+++ b/crates/bevy_asset/src/id.rs
@@ -441,7 +441,7 @@ mod tests {
     fn hash<T: Hash>(data: &T) -> u64 {
         use core::hash::BuildHasher;
 
-        bevy_platform_support::hash::FixedHasher.hash_one(data)
+        bevy_platform::hash::FixedHasher.hash_one(data)
     }
 
     /// Typed and Untyped `AssetIds` should be equivalent to each other and themselves
diff --git a/crates/bevy_asset/src/io/embedded/embedded_watcher.rs b/crates/bevy_asset/src/io/embedded/embedded_watcher.rs
index 89ac9b3826a8f..f7fb56be747b4 100644
--- a/crates/bevy_asset/src/io/embedded/embedded_watcher.rs
+++ b/crates/bevy_asset/src/io/embedded/embedded_watcher.rs
@@ -4,7 +4,7 @@ use crate::io::{
     AssetSourceEvent, AssetWatcher,
 };
 use alloc::{boxed::Box, sync::Arc, vec::Vec};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::time::Duration;
 use notify_debouncer_full::{notify::RecommendedWatcher, Debouncer, RecommendedCache};
 use parking_lot::RwLock;
diff --git a/crates/bevy_asset/src/io/embedded/mod.rs b/crates/bevy_asset/src/io/embedded/mod.rs
index fce5149462247..13610531e299a 100644
--- a/crates/bevy_asset/src/io/embedded/mod.rs
+++ b/crates/bevy_asset/src/io/embedded/mod.rs
@@ -29,7 +29,7 @@ pub struct EmbeddedAssetRegistry {
     dir: Dir,
     #[cfg(feature = "embedded_watcher")]
     root_paths: alloc::sync::Arc<
-        parking_lot::RwLock<bevy_platform_support::collections::HashMap<Box<Path>, PathBuf>>,
+        parking_lot::RwLock<bevy_platform::collections::HashMap<Box<Path>, PathBuf>>,
     >,
 }
 
diff --git a/crates/bevy_asset/src/io/gated.rs b/crates/bevy_asset/src/io/gated.rs
index ab3e0998e2c12..fa4f0f0d3fd30 100644
--- a/crates/bevy_asset/src/io/gated.rs
+++ b/crates/bevy_asset/src/io/gated.rs
@@ -1,6 +1,6 @@
 use crate::io::{AssetReader, AssetReaderError, PathStream, Reader};
 use alloc::{boxed::Box, sync::Arc};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use crossbeam_channel::{Receiver, Sender};
 use parking_lot::RwLock;
 use std::path::Path;
diff --git a/crates/bevy_asset/src/io/memory.rs b/crates/bevy_asset/src/io/memory.rs
index 18ac524ca00ec..4c56057ff9e3c 100644
--- a/crates/bevy_asset/src/io/memory.rs
+++ b/crates/bevy_asset/src/io/memory.rs
@@ -1,6 +1,6 @@
 use crate::io::{AssetReader, AssetReaderError, PathStream, Reader};
 use alloc::{borrow::ToOwned, boxed::Box, sync::Arc, vec::Vec};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::{pin::Pin, task::Poll};
 use futures_io::AsyncRead;
 use futures_lite::{ready, Stream};
diff --git a/crates/bevy_asset/src/io/source.rs b/crates/bevy_asset/src/io/source.rs
index 58c5006a8047e..4852a2a71fff2 100644
--- a/crates/bevy_asset/src/io/source.rs
+++ b/crates/bevy_asset/src/io/source.rs
@@ -9,7 +9,7 @@ use alloc::{
 };
 use atomicow::CowArc;
 use bevy_ecs::resource::Resource;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::{fmt::Display, hash::Hash, time::Duration};
 use thiserror::Error;
 use tracing::{error, warn};
diff --git a/crates/bevy_asset/src/lib.rs b/crates/bevy_asset/src/lib.rs
index 50181ebdc6bed..5d98d2b21ee9d 100644
--- a/crates/bevy_asset/src/lib.rs
+++ b/crates/bevy_asset/src/lib.rs
@@ -223,7 +223,7 @@ use bevy_ecs::{
     schedule::{IntoScheduleConfigs, SystemSet},
     world::FromWorld,
 };
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_reflect::{FromReflect, GetTypeRegistration, Reflect, TypePath};
 use core::any::TypeId;
 use tracing::error;
@@ -686,7 +686,7 @@ mod tests {
         prelude::*,
         schedule::{LogLevel, ScheduleBuildSettings},
     };
-    use bevy_platform_support::collections::HashMap;
+    use bevy_platform::collections::HashMap;
     use bevy_reflect::TypePath;
     use core::time::Duration;
     use serde::{Deserialize, Serialize};
diff --git a/crates/bevy_asset/src/loader.rs b/crates/bevy_asset/src/loader.rs
index 2f520c7584674..8f4863b885c68 100644
--- a/crates/bevy_asset/src/loader.rs
+++ b/crates/bevy_asset/src/loader.rs
@@ -13,7 +13,7 @@ use alloc::{
 };
 use atomicow::CowArc;
 use bevy_ecs::world::World;
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_tasks::{BoxedFuture, ConditionalSendFuture};
 use core::any::{Any, TypeId};
 use downcast_rs::{impl_downcast, Downcast};
diff --git a/crates/bevy_asset/src/processor/log.rs b/crates/bevy_asset/src/processor/log.rs
index aefc3a96c631e..f4a0f81862166 100644
--- a/crates/bevy_asset/src/processor/log.rs
+++ b/crates/bevy_asset/src/processor/log.rs
@@ -5,7 +5,7 @@ use alloc::{
     vec::Vec,
 };
 use async_fs::File;
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use futures_lite::{AsyncReadExt, AsyncWriteExt};
 use std::path::PathBuf;
 use thiserror::Error;
diff --git a/crates/bevy_asset/src/processor/mod.rs b/crates/bevy_asset/src/processor/mod.rs
index 67e96052a9a93..a239d66a9b59a 100644
--- a/crates/bevy_asset/src/processor/mod.rs
+++ b/crates/bevy_asset/src/processor/mod.rs
@@ -58,7 +58,7 @@ use crate::{
 };
 use alloc::{borrow::ToOwned, boxed::Box, collections::VecDeque, sync::Arc, vec, vec::Vec};
 use bevy_ecs::prelude::*;
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_tasks::IoTaskPool;
 use futures_io::ErrorKind;
 use futures_lite::{AsyncReadExt, AsyncWriteExt, StreamExt};
diff --git a/crates/bevy_asset/src/saver.rs b/crates/bevy_asset/src/saver.rs
index c8b308a544640..c8b96012eea72 100644
--- a/crates/bevy_asset/src/saver.rs
+++ b/crates/bevy_asset/src/saver.rs
@@ -4,7 +4,7 @@ use crate::{
 };
 use alloc::boxed::Box;
 use atomicow::CowArc;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_tasks::{BoxedFuture, ConditionalSendFuture};
 use core::{borrow::Borrow, hash::Hash, ops::Deref};
 use serde::{Deserialize, Serialize};
diff --git a/crates/bevy_asset/src/server/info.rs b/crates/bevy_asset/src/server/info.rs
index 66a4fab23af54..1b3bb3cb65d68 100644
--- a/crates/bevy_asset/src/server/info.rs
+++ b/crates/bevy_asset/src/server/info.rs
@@ -11,7 +11,7 @@ use alloc::{
     vec::Vec,
 };
 use bevy_ecs::world::World;
-use bevy_platform_support::collections::{hash_map::Entry, HashMap, HashSet};
+use bevy_platform::collections::{hash_map::Entry, HashMap, HashSet};
 use bevy_tasks::Task;
 use bevy_utils::TypeIdMap;
 use core::{any::TypeId, task::Waker};
diff --git a/crates/bevy_asset/src/server/loaders.rs b/crates/bevy_asset/src/server/loaders.rs
index 1250ff666ae9f..08384e9efeaa4 100644
--- a/crates/bevy_asset/src/server/loaders.rs
+++ b/crates/bevy_asset/src/server/loaders.rs
@@ -4,7 +4,7 @@ use crate::{
 };
 use alloc::{boxed::Box, sync::Arc, vec::Vec};
 use async_broadcast::RecvError;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_tasks::IoTaskPool;
 use bevy_utils::TypeIdMap;
 use core::any::TypeId;
diff --git a/crates/bevy_asset/src/server/mod.rs b/crates/bevy_asset/src/server/mod.rs
index fa0f33eda0d0f..ff5800474d8b7 100644
--- a/crates/bevy_asset/src/server/mod.rs
+++ b/crates/bevy_asset/src/server/mod.rs
@@ -26,7 +26,7 @@ use alloc::{
 };
 use atomicow::CowArc;
 use bevy_ecs::prelude::*;
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_tasks::IoTaskPool;
 use core::{any::TypeId, future::Future, panic::AssertUnwindSafe, task::Poll};
 use crossbeam_channel::{Receiver, Sender};
diff --git a/crates/bevy_asset/src/transformer.rs b/crates/bevy_asset/src/transformer.rs
index 6e76fce4dc836..802e3aeaa7eff 100644
--- a/crates/bevy_asset/src/transformer.rs
+++ b/crates/bevy_asset/src/transformer.rs
@@ -1,7 +1,7 @@
 use crate::{meta::Settings, Asset, ErasedLoadedAsset, Handle, LabeledAsset, UntypedHandle};
 use alloc::boxed::Box;
 use atomicow::CowArc;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_tasks::ConditionalSendFuture;
 use core::{
     borrow::Borrow,
diff --git a/crates/bevy_core_pipeline/Cargo.toml b/crates/bevy_core_pipeline/Cargo.toml
index 9d8b6374e1168..304c0071046e0 100644
--- a/crates/bevy_core_pipeline/Cargo.toml
+++ b/crates/bevy_core_pipeline/Cargo.toml
@@ -33,7 +33,7 @@ bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_math = { path = "../bevy_math", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
   "serialize",
 ] }
diff --git a/crates/bevy_core_pipeline/src/auto_exposure/buffers.rs b/crates/bevy_core_pipeline/src/auto_exposure/buffers.rs
index cc16cd4630d6d..38d55bc9ded47 100644
--- a/crates/bevy_core_pipeline/src/auto_exposure/buffers.rs
+++ b/crates/bevy_core_pipeline/src/auto_exposure/buffers.rs
@@ -1,5 +1,5 @@
 use bevy_ecs::prelude::*;
-use bevy_platform_support::collections::{hash_map::Entry, HashMap};
+use bevy_platform::collections::{hash_map::Entry, HashMap};
 use bevy_render::{
     render_resource::{StorageBuffer, UniformBuffer},
     renderer::{RenderDevice, RenderQueue},
diff --git a/crates/bevy_core_pipeline/src/core_2d/mod.rs b/crates/bevy_core_pipeline/src/core_2d/mod.rs
index 9b951ae2d1692..0a8ed17f8e15d 100644
--- a/crates/bevy_core_pipeline/src/core_2d/mod.rs
+++ b/crates/bevy_core_pipeline/src/core_2d/mod.rs
@@ -34,7 +34,7 @@ pub mod graph {
 use core::ops::Range;
 
 use bevy_asset::UntypedAssetId;
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_render::{
     batching::gpu_preprocessing::GpuPreprocessingMode,
     render_phase::PhaseItemBatchSetKey,
diff --git a/crates/bevy_core_pipeline/src/core_3d/mod.rs b/crates/bevy_core_pipeline/src/core_3d/mod.rs
index 5444ed05ecbda..b9f6955499cf7 100644
--- a/crates/bevy_core_pipeline/src/core_3d/mod.rs
+++ b/crates/bevy_core_pipeline/src/core_3d/mod.rs
@@ -87,7 +87,7 @@ use bevy_color::LinearRgba;
 use bevy_ecs::prelude::*;
 use bevy_image::BevyDefault;
 use bevy_math::FloatOrd;
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_render::{
     camera::{Camera, ExtractedCamera},
     extract_component::ExtractComponentPlugin,
diff --git a/crates/bevy_core_pipeline/src/oit/mod.rs b/crates/bevy_core_pipeline/src/oit/mod.rs
index f4337065cfd00..6a15fd126c86b 100644
--- a/crates/bevy_core_pipeline/src/oit/mod.rs
+++ b/crates/bevy_core_pipeline/src/oit/mod.rs
@@ -4,8 +4,8 @@ use bevy_app::prelude::*;
 use bevy_asset::{load_internal_asset, weak_handle, Handle};
 use bevy_ecs::{component::*, prelude::*};
 use bevy_math::UVec2;
-use bevy_platform_support::collections::HashSet;
-use bevy_platform_support::time::Instant;
+use bevy_platform::collections::HashSet;
+use bevy_platform::time::Instant;
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render::{
     camera::{Camera, ExtractedCamera},
diff --git a/crates/bevy_core_pipeline/src/upscaling/mod.rs b/crates/bevy_core_pipeline/src/upscaling/mod.rs
index 89f3f8d09e44a..20dd19f4ce691 100644
--- a/crates/bevy_core_pipeline/src/upscaling/mod.rs
+++ b/crates/bevy_core_pipeline/src/upscaling/mod.rs
@@ -1,7 +1,7 @@
 use crate::blit::{BlitPipeline, BlitPipelineKey};
 use bevy_app::prelude::*;
 use bevy_ecs::prelude::*;
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_render::{
     camera::{CameraOutputMode, ExtractedCamera},
     render_resource::*,
diff --git a/crates/bevy_diagnostic/Cargo.toml b/crates/bevy_diagnostic/Cargo.toml
index f3f73e76a5155..92e64b7e6cd75 100644
--- a/crates/bevy_diagnostic/Cargo.toml
+++ b/crates/bevy_diagnostic/Cargo.toml
@@ -19,7 +19,7 @@ serialize = [
   "bevy_ecs/serialize",
   "bevy_time/serialize",
   "bevy_utils/serde",
-  "bevy_platform_support/serialize",
+  "bevy_platform/serialize",
 ]
 
 ## Disables diagnostics that are unsupported when Bevy is dynamically linked
@@ -37,7 +37,7 @@ std = [
   "serde?/std",
   "bevy_ecs/std",
   "bevy_app/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
   "bevy_time/std",
   "bevy_utils/std",
   "bevy_tasks/std",
@@ -48,7 +48,7 @@ std = [
 critical-section = [
   "bevy_ecs/critical-section",
   "bevy_app/critical-section",
-  "bevy_platform_support/critical-section",
+  "bevy_platform/critical-section",
   "bevy_time/critical-section",
   "bevy_utils/critical-section",
   "bevy_tasks/critical-section",
@@ -63,7 +63,7 @@ bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev", default-features
   "alloc",
 ] }
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev", default-features = false }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "alloc",
 ] }
 
diff --git a/crates/bevy_diagnostic/src/diagnostic.rs b/crates/bevy_diagnostic/src/diagnostic.rs
index af9a3e71e0432..00a758416be97 100644
--- a/crates/bevy_diagnostic/src/diagnostic.rs
+++ b/crates/bevy_diagnostic/src/diagnostic.rs
@@ -7,7 +7,7 @@ use core::{
 use bevy_app::{App, SubApp};
 use bevy_ecs::resource::Resource;
 use bevy_ecs::system::{Deferred, Res, SystemBuffer, SystemParam};
-use bevy_platform_support::{collections::HashMap, hash::PassHash, time::Instant};
+use bevy_platform::{collections::HashMap, hash::PassHash, time::Instant};
 use const_fnv1a_hash::fnv1a_hash_str_64;
 
 use crate::DEFAULT_MAX_HISTORY_LENGTH;
diff --git a/crates/bevy_diagnostic/src/system_information_diagnostics_plugin.rs b/crates/bevy_diagnostic/src/system_information_diagnostics_plugin.rs
index bae6c086a5900..376a109ae3bbf 100644
--- a/crates/bevy_diagnostic/src/system_information_diagnostics_plugin.rs
+++ b/crates/bevy_diagnostic/src/system_information_diagnostics_plugin.rs
@@ -74,7 +74,7 @@ pub mod internal {
     use bevy_app::{App, First, Startup, Update};
     use bevy_ecs::resource::Resource;
     use bevy_ecs::{prelude::ResMut, system::Local};
-    use bevy_platform_support::time::Instant;
+    use bevy_platform::time::Instant;
     use bevy_tasks::{available_parallelism, block_on, poll_once, AsyncComputeTaskPool, Task};
     use log::info;
     use std::sync::Mutex;
diff --git a/crates/bevy_ecs/Cargo.toml b/crates/bevy_ecs/Cargo.toml
index a8d817f43a1d3..97cdcee0824b7 100644
--- a/crates/bevy_ecs/Cargo.toml
+++ b/crates/bevy_ecs/Cargo.toml
@@ -23,7 +23,7 @@ multi_threaded = ["bevy_tasks/multi_threaded", "dep:arrayvec"]
 serialize = [
   "dep:serde",
   "bevy_utils/serde",
-  "bevy_platform_support/serialize",
+  "bevy_platform/serialize",
   "indexmap/serde",
 ]
 
@@ -84,14 +84,14 @@ std = [
   "nonmax/std",
   "arrayvec?/std",
   "log/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
 ]
 
 ## `critical-section` provides the building blocks for synchronization primitives
 ## on all platforms, including `no_std`.
 critical-section = [
   "bevy_tasks/critical-section",
-  "bevy_platform_support/critical-section",
+  "bevy_platform/critical-section",
   "bevy_reflect?/critical-section",
 ]
 
@@ -105,7 +105,7 @@ bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev", default-features
   "alloc",
 ] }
 bevy_ecs_macros = { path = "macros", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "alloc",
 ] }
 
diff --git a/crates/bevy_ecs/src/archetype.rs b/crates/bevy_ecs/src/archetype.rs
index f55acf6d35feb..2468c5e9a8fbf 100644
--- a/crates/bevy_ecs/src/archetype.rs
+++ b/crates/bevy_ecs/src/archetype.rs
@@ -27,7 +27,7 @@ use crate::{
     storage::{ImmutableSparseSet, SparseArray, SparseSet, SparseSetIndex, TableId, TableRow},
 };
 use alloc::{boxed::Box, vec::Vec};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::{
     hash::Hash,
     ops::{Index, IndexMut, RangeFrom},
diff --git a/crates/bevy_ecs/src/bundle.rs b/crates/bevy_ecs/src/bundle.rs
index d87ef517f15d2..5666d90c53a42 100644
--- a/crates/bevy_ecs/src/bundle.rs
+++ b/crates/bevy_ecs/src/bundle.rs
@@ -23,7 +23,7 @@ use crate::{
     world::{unsafe_world_cell::UnsafeWorldCell, EntityWorldMut, ON_ADD, ON_INSERT, ON_REPLACE},
 };
 use alloc::{boxed::Box, vec, vec::Vec};
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_ptr::{ConstNonNull, OwningPtr};
 use bevy_utils::TypeIdMap;
 use core::{any::TypeId, ptr::NonNull};
diff --git a/crates/bevy_ecs/src/component.rs b/crates/bevy_ecs/src/component.rs
index 51a10a51b14fd..bfa55804b616a 100644
--- a/crates/bevy_ecs/src/component.rs
+++ b/crates/bevy_ecs/src/component.rs
@@ -15,8 +15,8 @@ use crate::{
 use alloc::boxed::Box;
 use alloc::{borrow::Cow, format, vec::Vec};
 pub use bevy_ecs_macros::Component;
-use bevy_platform_support::sync::Arc;
-use bevy_platform_support::{
+use bevy_platform::sync::Arc;
+use bevy_platform::{
     collections::{HashMap, HashSet},
     sync::PoisonError,
 };
@@ -675,7 +675,7 @@ pub struct HookContext {
 ///
 /// ```
 /// use bevy_ecs::prelude::*;
-/// use bevy_platform_support::collections::HashSet;
+/// use bevy_platform::collections::HashSet;
 ///
 /// #[derive(Component)]
 /// struct MyTrackedComponent;
@@ -1305,7 +1305,7 @@ impl Debug for QueuedComponents {
 /// Generates [`ComponentId`]s.
 #[derive(Debug, Default)]
 pub struct ComponentIds {
-    next: bevy_platform_support::sync::atomic::AtomicUsize,
+    next: bevy_platform::sync::atomic::AtomicUsize,
 }
 
 impl ComponentIds {
@@ -1313,7 +1313,7 @@ impl ComponentIds {
     pub fn peek(&self) -> ComponentId {
         ComponentId(
             self.next
-                .load(bevy_platform_support::sync::atomic::Ordering::Relaxed),
+                .load(bevy_platform::sync::atomic::Ordering::Relaxed),
         )
     }
 
@@ -1321,7 +1321,7 @@ impl ComponentIds {
     pub fn next(&self) -> ComponentId {
         ComponentId(
             self.next
-                .fetch_add(1, bevy_platform_support::sync::atomic::Ordering::Relaxed),
+                .fetch_add(1, bevy_platform::sync::atomic::Ordering::Relaxed),
         )
     }
 
@@ -1959,7 +1959,7 @@ pub struct Components {
     indices: TypeIdMap<ComponentId>,
     resource_indices: TypeIdMap<ComponentId>,
     // This is kept internal and local to verify that no deadlocks can occor.
-    queued: bevy_platform_support::sync::RwLock<QueuedComponents>,
+    queued: bevy_platform::sync::RwLock<QueuedComponents>,
 }
 
 impl Components {
@@ -2840,7 +2840,7 @@ impl RequiredComponents {
     ) {
         let entry = self.0.entry(component_id);
         match entry {
-            bevy_platform_support::collections::hash_map::Entry::Occupied(mut occupied) => {
+            bevy_platform::collections::hash_map::Entry::Occupied(mut occupied) => {
                 let current = occupied.get_mut();
                 if current.inheritance_depth > inheritance_depth {
                     *current = RequiredComponent {
@@ -2849,7 +2849,7 @@ impl RequiredComponents {
                     }
                 }
             }
-            bevy_platform_support::collections::hash_map::Entry::Vacant(vacant) => {
+            bevy_platform::collections::hash_map::Entry::Vacant(vacant) => {
                 vacant.insert(RequiredComponent {
                     constructor: constructor(),
                     inheritance_depth,
diff --git a/crates/bevy_ecs/src/entity/clone_entities.rs b/crates/bevy_ecs/src/entity/clone_entities.rs
index b435ca0ebb5c5..bd8eb2b4bd71b 100644
--- a/crates/bevy_ecs/src/entity/clone_entities.rs
+++ b/crates/bevy_ecs/src/entity/clone_entities.rs
@@ -1,5 +1,5 @@
 use alloc::{borrow::ToOwned, boxed::Box, collections::VecDeque, vec::Vec};
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_ptr::{Ptr, PtrMut};
 use bumpalo::Bump;
 use core::any::TypeId;
diff --git a/crates/bevy_ecs/src/entity/entity_set.rs b/crates/bevy_ecs/src/entity/entity_set.rs
index 56f597ceba931..e4860685fe07f 100644
--- a/crates/bevy_ecs/src/entity/entity_set.rs
+++ b/crates/bevy_ecs/src/entity/entity_set.rs
@@ -3,7 +3,7 @@ use alloc::{
     collections::{btree_map, btree_set},
     rc::Rc,
 };
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 
 use core::{
     array,
@@ -15,7 +15,7 @@ use core::{
 
 use super::{Entity, UniqueEntityEquivalentSlice};
 
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 
 /// A trait for types that contain an [`Entity`].
 ///
diff --git a/crates/bevy_ecs/src/entity/hash.rs b/crates/bevy_ecs/src/entity/hash.rs
index 35e01cebcdb6b..a53847343952a 100644
--- a/crates/bevy_ecs/src/entity/hash.rs
+++ b/crates/bevy_ecs/src/entity/hash.rs
@@ -25,7 +25,7 @@ impl BuildHasher for EntityHash {
 ///
 /// If you have an unusual case -- say all your indices are multiples of 256
 /// or most of the entities are dead generations -- then you might want also to
-/// try [`DefaultHasher`](bevy_platform_support::hash::DefaultHasher) for a slower hash
+/// try [`DefaultHasher`](bevy_platform::hash::DefaultHasher) for a slower hash
 /// computation but fewer lookup conflicts.
 #[derive(Debug, Default)]
 pub struct EntityHasher {
diff --git a/crates/bevy_ecs/src/entity/hash_map.rs b/crates/bevy_ecs/src/entity/hash_map.rs
index d10be929f8cba..d83ea7bae1dcc 100644
--- a/crates/bevy_ecs/src/entity/hash_map.rs
+++ b/crates/bevy_ecs/src/entity/hash_map.rs
@@ -9,7 +9,7 @@ use core::{
     ops::{Deref, DerefMut, Index},
 };
 
-use bevy_platform_support::collections::hash_map::{self, HashMap};
+use bevy_platform::collections::hash_map::{self, HashMap};
 #[cfg(feature = "bevy_reflect")]
 use bevy_reflect::Reflect;
 
diff --git a/crates/bevy_ecs/src/entity/hash_set.rs b/crates/bevy_ecs/src/entity/hash_set.rs
index 91c1000c91c0b..7fd1ae9011273 100644
--- a/crates/bevy_ecs/src/entity/hash_set.rs
+++ b/crates/bevy_ecs/src/entity/hash_set.rs
@@ -12,7 +12,7 @@ use core::{
     },
 };
 
-use bevy_platform_support::collections::hash_set::{self, HashSet};
+use bevy_platform::collections::hash_set::{self, HashSet};
 #[cfg(feature = "bevy_reflect")]
 use bevy_reflect::Reflect;
 
diff --git a/crates/bevy_ecs/src/entity/index_map.rs b/crates/bevy_ecs/src/entity/index_map.rs
index 6f3c2d76dfd76..6f6cd1bb47af3 100644
--- a/crates/bevy_ecs/src/entity/index_map.rs
+++ b/crates/bevy_ecs/src/entity/index_map.rs
@@ -21,7 +21,7 @@ use indexmap::map::{self, IndexMap, IntoValues, ValuesMut};
 
 use super::{Entity, EntityEquivalent, EntityHash, EntitySetIterator};
 
-use bevy_platform_support::prelude::Box;
+use bevy_platform::prelude::Box;
 
 /// A [`IndexMap`] pre-configured to use [`EntityHash`] hashing.
 #[cfg_attr(feature = "bevy_reflect", derive(Reflect))]
diff --git a/crates/bevy_ecs/src/entity/index_set.rs b/crates/bevy_ecs/src/entity/index_set.rs
index 1af46994f6a2c..42f420a211a23 100644
--- a/crates/bevy_ecs/src/entity/index_set.rs
+++ b/crates/bevy_ecs/src/entity/index_set.rs
@@ -20,7 +20,7 @@ use indexmap::set::{self, IndexSet};
 
 use super::{Entity, EntityHash, EntitySetIterator};
 
-use bevy_platform_support::prelude::Box;
+use bevy_platform::prelude::Box;
 
 /// An [`IndexSet`] pre-configured to use [`EntityHash`] hashing.
 #[cfg_attr(feature = "serialize", derive(serde::Deserialize, serde::Serialize))]
diff --git a/crates/bevy_ecs/src/entity/map_entities.rs b/crates/bevy_ecs/src/entity/map_entities.rs
index 10da6cc559bfc..c79853f979f7e 100644
--- a/crates/bevy_ecs/src/entity/map_entities.rs
+++ b/crates/bevy_ecs/src/entity/map_entities.rs
@@ -7,7 +7,7 @@ use crate::{
 };
 
 use alloc::{collections::VecDeque, vec::Vec};
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use core::hash::BuildHasher;
 use smallvec::SmallVec;
 
@@ -24,7 +24,7 @@ use smallvec::SmallVec;
 /// entities in the context of scenes and entity cloning, which generally uses [`MapEntities`] internally
 /// to map each field (see those docs for usage).
 ///
-/// [`HashSet<Entity>`]: bevy_platform_support::collections::HashSet
+/// [`HashSet<Entity>`]: bevy_platform::collections::HashSet
 ///
 /// ## Example
 ///
diff --git a/crates/bevy_ecs/src/entity/mod.rs b/crates/bevy_ecs/src/entity/mod.rs
index 70b70e2695ae4..7bba07aac6017 100644
--- a/crates/bevy_ecs/src/entity/mod.rs
+++ b/crates/bevy_ecs/src/entity/mod.rs
@@ -83,7 +83,7 @@ use crate::{
     storage::{SparseSetIndex, TableId, TableRow},
 };
 use alloc::vec::Vec;
-use bevy_platform_support::sync::atomic::Ordering;
+use bevy_platform::sync::atomic::Ordering;
 use core::{fmt, hash::Hash, mem, num::NonZero, panic::Location};
 use log::warn;
 
@@ -91,7 +91,7 @@ use log::warn;
 use serde::{Deserialize, Serialize};
 
 #[cfg(target_has_atomic = "64")]
-use bevy_platform_support::sync::atomic::AtomicI64 as AtomicIdCursor;
+use bevy_platform::sync::atomic::AtomicI64 as AtomicIdCursor;
 #[cfg(target_has_atomic = "64")]
 type IdCursor = i64;
 
@@ -99,7 +99,7 @@ type IdCursor = i64;
 /// do not. This fallback allows compilation using a 32-bit cursor instead, with
 /// the caveat that some conversions may fail (and panic) at runtime.
 #[cfg(not(target_has_atomic = "64"))]
-use bevy_platform_support::sync::atomic::AtomicIsize as AtomicIdCursor;
+use bevy_platform::sync::atomic::AtomicIsize as AtomicIdCursor;
 #[cfg(not(target_has_atomic = "64"))]
 type IdCursor = isize;
 
diff --git a/crates/bevy_ecs/src/entity/unique_array.rs b/crates/bevy_ecs/src/entity/unique_array.rs
index fa528c253aa3a..ce31e55448f35 100644
--- a/crates/bevy_ecs/src/entity/unique_array.rs
+++ b/crates/bevy_ecs/src/entity/unique_array.rs
@@ -18,7 +18,7 @@ use alloc::{
     vec::Vec,
 };
 
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 
 use super::{
     unique_slice::{self, UniqueEntityEquivalentSlice},
diff --git a/crates/bevy_ecs/src/entity/unique_slice.rs b/crates/bevy_ecs/src/entity/unique_slice.rs
index 6672d761cc4d1..e45c3a21c06bf 100644
--- a/crates/bevy_ecs/src/entity/unique_slice.rs
+++ b/crates/bevy_ecs/src/entity/unique_slice.rs
@@ -22,7 +22,7 @@ use alloc::{
     vec::Vec,
 };
 
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 
 use super::{
     unique_vec::{self, UniqueEntityEquivalentVec},
diff --git a/crates/bevy_ecs/src/entity/unique_vec.rs b/crates/bevy_ecs/src/entity/unique_vec.rs
index a3977770874fd..30f9984e70be7 100644
--- a/crates/bevy_ecs/src/entity/unique_vec.rs
+++ b/crates/bevy_ecs/src/entity/unique_vec.rs
@@ -17,7 +17,7 @@ use alloc::{
     vec::{self, Vec},
 };
 
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 
 use super::{
     unique_slice::{self, UniqueEntityEquivalentSlice},
diff --git a/crates/bevy_ecs/src/error/handler.rs b/crates/bevy_ecs/src/error/handler.rs
index 306d1608a1c0e..688b599473ab9 100644
--- a/crates/bevy_ecs/src/error/handler.rs
+++ b/crates/bevy_ecs/src/error/handler.rs
@@ -1,5 +1,5 @@
 #[cfg(feature = "configurable_error_handler")]
-use bevy_platform_support::sync::OnceLock;
+use bevy_platform::sync::OnceLock;
 use core::fmt::Display;
 
 use crate::{component::Tick, error::BevyError};
diff --git a/crates/bevy_ecs/src/intern.rs b/crates/bevy_ecs/src/intern.rs
index 5639d5fbe33ec..b10e6a2ac691b 100644
--- a/crates/bevy_ecs/src/intern.rs
+++ b/crates/bevy_ecs/src/intern.rs
@@ -5,7 +5,7 @@
 //! and make comparisons for any type as fast as integers.
 
 use alloc::{borrow::ToOwned, boxed::Box};
-use bevy_platform_support::{
+use bevy_platform::{
     collections::HashSet,
     hash::FixedHasher,
     sync::{PoisonError, RwLock},
@@ -170,7 +170,7 @@ impl<T: ?Sized> Default for Interner<T> {
 #[cfg(test)]
 mod tests {
     use alloc::{boxed::Box, string::ToString};
-    use bevy_platform_support::hash::FixedHasher;
+    use bevy_platform::hash::FixedHasher;
     use core::hash::{BuildHasher, Hash, Hasher};
 
     use crate::intern::{Internable, Interned, Interner};
diff --git a/crates/bevy_ecs/src/lib.rs b/crates/bevy_ecs/src/lib.rs
index 79ba938f4b749..eee14c0593d0a 100644
--- a/crates/bevy_ecs/src/lib.rs
+++ b/crates/bevy_ecs/src/lib.rs
@@ -146,7 +146,7 @@ mod tests {
         vec,
         vec::Vec,
     };
-    use bevy_platform_support::collections::HashSet;
+    use bevy_platform::collections::HashSet;
     use bevy_tasks::{ComputeTaskPool, TaskPool};
     use core::{
         any::TypeId,
diff --git a/crates/bevy_ecs/src/name.rs b/crates/bevy_ecs/src/name.rs
index ca94b4be80ce6..dd34f5578a6b3 100644
--- a/crates/bevy_ecs/src/name.rs
+++ b/crates/bevy_ecs/src/name.rs
@@ -6,7 +6,7 @@ use alloc::{
     borrow::{Cow, ToOwned},
     string::String,
 };
-use bevy_platform_support::hash::FixedHasher;
+use bevy_platform::hash::FixedHasher;
 use core::{
     hash::{BuildHasher, Hash, Hasher},
     ops::Deref,
diff --git a/crates/bevy_ecs/src/observer/mod.rs b/crates/bevy_ecs/src/observer/mod.rs
index 774538937e35e..78569bc4ec73b 100644
--- a/crates/bevy_ecs/src/observer/mod.rs
+++ b/crates/bevy_ecs/src/observer/mod.rs
@@ -17,7 +17,7 @@ use crate::{
     world::{DeferredWorld, *},
 };
 use alloc::vec::Vec;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_ptr::Ptr;
 use core::{
     fmt::Debug,
@@ -843,7 +843,7 @@ impl World {
 mod tests {
     use alloc::{vec, vec::Vec};
 
-    use bevy_platform_support::collections::HashMap;
+    use bevy_platform::collections::HashMap;
     use bevy_ptr::OwningPtr;
 
     use crate::component::ComponentId;
diff --git a/crates/bevy_ecs/src/query/par_iter.rs b/crates/bevy_ecs/src/query/par_iter.rs
index 41a46cf174adf..6683238aa36ee 100644
--- a/crates/bevy_ecs/src/query/par_iter.rs
+++ b/crates/bevy_ecs/src/query/par_iter.rs
@@ -205,7 +205,7 @@ impl<'w, 's, D: ReadOnlyQueryData, F: QueryFilter, E: EntityEquivalent + Sync>
     /// use bevy_utils::Parallel;
     /// use crate::{bevy_ecs::prelude::{Component, Res, Resource, Entity}, bevy_ecs::system::Query};
     /// # use core::slice;
-    /// use bevy_platform_support::prelude::Vec;
+    /// use bevy_platform::prelude::Vec;
     /// # fn some_expensive_operation(_item: &T) -> usize {
     /// #     0
     /// # }
diff --git a/crates/bevy_ecs/src/relationship/related_methods.rs b/crates/bevy_ecs/src/relationship/related_methods.rs
index 5a6019fa619e5..3674a1cba471b 100644
--- a/crates/bevy_ecs/src/relationship/related_methods.rs
+++ b/crates/bevy_ecs/src/relationship/related_methods.rs
@@ -7,7 +7,7 @@ use crate::{
     system::{Commands, EntityCommands},
     world::{EntityWorldMut, World},
 };
-use bevy_platform_support::prelude::{Box, Vec};
+use bevy_platform::prelude::{Box, Vec};
 use core::{marker::PhantomData, mem};
 
 use super::OrderedRelationshipSourceCollection;
diff --git a/crates/bevy_ecs/src/schedule/auto_insert_apply_deferred.rs b/crates/bevy_ecs/src/schedule/auto_insert_apply_deferred.rs
index 171abee9641da..dda6d604a74b2 100644
--- a/crates/bevy_ecs/src/schedule/auto_insert_apply_deferred.rs
+++ b/crates/bevy_ecs/src/schedule/auto_insert_apply_deferred.rs
@@ -1,6 +1,6 @@
 use alloc::{boxed::Box, collections::BTreeSet, vec::Vec};
 
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 
 use crate::system::IntoSystem;
 use crate::world::World;
diff --git a/crates/bevy_ecs/src/schedule/executor/multi_threaded.rs b/crates/bevy_ecs/src/schedule/executor/multi_threaded.rs
index 25b3c3a0206ae..dd029c91c8314 100644
--- a/crates/bevy_ecs/src/schedule/executor/multi_threaded.rs
+++ b/crates/bevy_ecs/src/schedule/executor/multi_threaded.rs
@@ -1,5 +1,5 @@
 use alloc::{boxed::Box, vec::Vec};
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use bevy_tasks::{ComputeTaskPool, Scope, TaskPool, ThreadExecutor};
 use bevy_utils::{default, syncunsafecell::SyncUnsafeCell};
 use concurrent_queue::ConcurrentQueue;
diff --git a/crates/bevy_ecs/src/schedule/graph/graph_map.rs b/crates/bevy_ecs/src/schedule/graph/graph_map.rs
index b255e55d26df9..d2fbde9995071 100644
--- a/crates/bevy_ecs/src/schedule/graph/graph_map.rs
+++ b/crates/bevy_ecs/src/schedule/graph/graph_map.rs
@@ -5,7 +5,7 @@
 //! [`petgraph`]: https://docs.rs/petgraph/0.6.5/petgraph/
 
 use alloc::vec::Vec;
-use bevy_platform_support::{collections::HashSet, hash::FixedHasher};
+use bevy_platform::{collections::HashSet, hash::FixedHasher};
 use core::{
     fmt,
     hash::{BuildHasher, Hash},
diff --git a/crates/bevy_ecs/src/schedule/graph/mod.rs b/crates/bevy_ecs/src/schedule/graph/mod.rs
index 3fb5c47a0ddb7..8a98604102058 100644
--- a/crates/bevy_ecs/src/schedule/graph/mod.rs
+++ b/crates/bevy_ecs/src/schedule/graph/mod.rs
@@ -5,7 +5,7 @@ use core::{
 };
 use smallvec::SmallVec;
 
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_utils::TypeIdMap;
 
 use fixedbitset::FixedBitSet;
diff --git a/crates/bevy_ecs/src/schedule/schedule.rs b/crates/bevy_ecs/src/schedule/schedule.rs
index 11d42020f3eb0..584e621bf8a39 100644
--- a/crates/bevy_ecs/src/schedule/schedule.rs
+++ b/crates/bevy_ecs/src/schedule/schedule.rs
@@ -11,7 +11,7 @@ use alloc::{
     vec,
     vec::Vec,
 };
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_utils::{default, TypeIdMap};
 use core::{
     any::{Any, TypeId},
diff --git a/crates/bevy_ecs/src/schedule/stepping.rs b/crates/bevy_ecs/src/schedule/stepping.rs
index d8a33159a0da5..b5df8555e2115 100644
--- a/crates/bevy_ecs/src/schedule/stepping.rs
+++ b/crates/bevy_ecs/src/schedule/stepping.rs
@@ -4,7 +4,7 @@ use crate::{
     system::{IntoSystem, ResMut},
 };
 use alloc::vec::Vec;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_utils::TypeIdMap;
 use core::any::TypeId;
 use fixedbitset::FixedBitSet;
diff --git a/crates/bevy_ecs/src/storage/table/mod.rs b/crates/bevy_ecs/src/storage/table/mod.rs
index d211bc10dae68..0f80b77f513c4 100644
--- a/crates/bevy_ecs/src/storage/table/mod.rs
+++ b/crates/bevy_ecs/src/storage/table/mod.rs
@@ -6,7 +6,7 @@ use crate::{
     storage::{blob_vec::BlobVec, ImmutableSparseSet, SparseSet},
 };
 use alloc::{boxed::Box, vec, vec::Vec};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_ptr::{OwningPtr, Ptr, UnsafeCellDeref};
 pub use column::*;
 use core::{
diff --git a/crates/bevy_ecs/src/world/entity_ref.rs b/crates/bevy_ecs/src/world/entity_ref.rs
index 22383e86b36e9..a9887c5248673 100644
--- a/crates/bevy_ecs/src/world/entity_ref.rs
+++ b/crates/bevy_ecs/src/world/entity_ref.rs
@@ -27,7 +27,7 @@ use crate::{
     },
 };
 use alloc::vec::Vec;
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_ptr::{OwningPtr, Ptr};
 use core::{
     any::TypeId,
@@ -250,7 +250,7 @@ impl<'w> EntityRef<'w> {
     /// ## [`HashSet`] of [`ComponentId`]s
     ///
     /// ```
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// # use bevy_ecs::{prelude::*, component::ComponentId};
     /// #
     /// # #[derive(Component, PartialEq, Debug)]
@@ -792,7 +792,7 @@ impl<'w> EntityMut<'w> {
     /// ## [`HashSet`] of [`ComponentId`]s
     ///
     /// ```
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// # use bevy_ecs::{prelude::*, component::ComponentId};
     /// #
     /// # #[derive(Component, PartialEq, Debug)]
diff --git a/crates/bevy_ecs/src/world/identifier.rs b/crates/bevy_ecs/src/world/identifier.rs
index 221ddd8210919..6b1c803e75375 100644
--- a/crates/bevy_ecs/src/world/identifier.rs
+++ b/crates/bevy_ecs/src/world/identifier.rs
@@ -4,7 +4,7 @@ use crate::{
     system::{ExclusiveSystemParam, ReadOnlySystemParam, SystemMeta, SystemParam},
     world::{FromWorld, World},
 };
-use bevy_platform_support::sync::atomic::{AtomicUsize, Ordering};
+use bevy_platform::sync::atomic::{AtomicUsize, Ordering};
 
 use super::unsafe_world_cell::UnsafeWorldCell;
 
diff --git a/crates/bevy_ecs/src/world/mod.rs b/crates/bevy_ecs/src/world/mod.rs
index ad016f9e8aef6..9bd8d699c6f21 100644
--- a/crates/bevy_ecs/src/world/mod.rs
+++ b/crates/bevy_ecs/src/world/mod.rs
@@ -67,7 +67,7 @@ use crate::{
     },
 };
 use alloc::{boxed::Box, vec::Vec};
-use bevy_platform_support::sync::atomic::{AtomicU32, Ordering};
+use bevy_platform::sync::atomic::{AtomicU32, Ordering};
 use bevy_ptr::{OwningPtr, Ptr, UnsafeCellDeref};
 use core::{any::TypeId, fmt};
 use log::warn;
@@ -3781,7 +3781,7 @@ mod tests {
         vec::Vec,
     };
     use bevy_ecs_macros::Component;
-    use bevy_platform_support::collections::{HashMap, HashSet};
+    use bevy_platform::collections::{HashMap, HashSet};
     use core::{
         any::TypeId,
         panic,
diff --git a/crates/bevy_ecs/src/world/unsafe_world_cell.rs b/crates/bevy_ecs/src/world/unsafe_world_cell.rs
index 681ac99c9b86a..b46b4a154b359 100644
--- a/crates/bevy_ecs/src/world/unsafe_world_cell.rs
+++ b/crates/bevy_ecs/src/world/unsafe_world_cell.rs
@@ -15,7 +15,7 @@ use crate::{
     storage::{ComponentSparseSet, Storages, Table},
     world::RawCommandQueue,
 };
-use bevy_platform_support::sync::atomic::Ordering;
+use bevy_platform::sync::atomic::Ordering;
 use bevy_ptr::{Ptr, UnsafeCellDeref};
 use core::{any::TypeId, cell::UnsafeCell, fmt::Debug, marker::PhantomData, panic::Location, ptr};
 use thiserror::Error;
diff --git a/crates/bevy_gilrs/Cargo.toml b/crates/bevy_gilrs/Cargo.toml
index eff9c4bf4f12b..864df285d98d2 100644
--- a/crates/bevy_gilrs/Cargo.toml
+++ b/crates/bevy_gilrs/Cargo.toml
@@ -15,7 +15,7 @@ bevy_ecs = { path = "../bevy_ecs", version = "0.16.0-dev" }
 bevy_input = { path = "../bevy_input", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_time = { path = "../bevy_time", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
diff --git a/crates/bevy_gilrs/src/lib.rs b/crates/bevy_gilrs/src/lib.rs
index 9ff12fa430056..ce0d5f27f0fd3 100644
--- a/crates/bevy_gilrs/src/lib.rs
+++ b/crates/bevy_gilrs/src/lib.rs
@@ -24,7 +24,7 @@ use bevy_app::{App, Plugin, PostUpdate, PreStartup, PreUpdate};
 use bevy_ecs::entity::EntityHashMap;
 use bevy_ecs::prelude::*;
 use bevy_input::InputSystem;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use gilrs::GilrsBuilder;
 use gilrs_system::{gilrs_event_startup_system, gilrs_event_system};
 use rumble::{play_gilrs_rumble, RunningRumbleEffects};
diff --git a/crates/bevy_gilrs/src/rumble.rs b/crates/bevy_gilrs/src/rumble.rs
index 7e49ec77e98c7..8f41a3ca22fe8 100644
--- a/crates/bevy_gilrs/src/rumble.rs
+++ b/crates/bevy_gilrs/src/rumble.rs
@@ -2,7 +2,7 @@
 use crate::{Gilrs, GilrsGamepads};
 use bevy_ecs::prelude::{EventReader, Res, ResMut, Resource};
 use bevy_input::gamepad::{GamepadRumbleIntensity, GamepadRumbleRequest};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_time::{Real, Time};
 use bevy_utils::synccell::SyncCell;
 use core::time::Duration;
diff --git a/crates/bevy_gltf/Cargo.toml b/crates/bevy_gltf/Cargo.toml
index 95b8b46d35275..af60f6fca2cb3 100644
--- a/crates/bevy_gltf/Cargo.toml
+++ b/crates/bevy_gltf/Cargo.toml
@@ -36,7 +36,7 @@ bevy_scene = { path = "../bevy_scene", version = "0.16.0-dev", features = [
 bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
   "serialize",
 ] }
@@ -73,7 +73,7 @@ bevy_log = { path = "../bevy_log", version = "0.16.0-dev", default-features = fa
 bevy_app = { path = "../bevy_app", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-features = false, features = [
diff --git a/crates/bevy_gltf/src/assets.rs b/crates/bevy_gltf/src/assets.rs
index 14d57e505718a..fe3303dd81059 100644
--- a/crates/bevy_gltf/src/assets.rs
+++ b/crates/bevy_gltf/src/assets.rs
@@ -6,7 +6,7 @@ use bevy_asset::{Asset, Handle};
 use bevy_ecs::{component::Component, reflect::ReflectComponent};
 use bevy_mesh::{skinning::SkinnedMeshInverseBindposes, Mesh};
 use bevy_pbr::StandardMaterial;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{prelude::ReflectDefault, Reflect, TypePath};
 use bevy_scene::Scene;
 
diff --git a/crates/bevy_gltf/src/lib.rs b/crates/bevy_gltf/src/lib.rs
index cfe89b488655a..ebcf49744a9b9 100644
--- a/crates/bevy_gltf/src/lib.rs
+++ b/crates/bevy_gltf/src/lib.rs
@@ -97,7 +97,7 @@ mod vertex_attributes;
 
 extern crate alloc;
 
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 
 use bevy_app::prelude::*;
 use bevy_asset::AssetApp;
diff --git a/crates/bevy_gltf/src/loader/gltf_ext/mod.rs b/crates/bevy_gltf/src/loader/gltf_ext/mod.rs
index 36c3809a534f3..6036948d9c3fb 100644
--- a/crates/bevy_gltf/src/loader/gltf_ext/mod.rs
+++ b/crates/bevy_gltf/src/loader/gltf_ext/mod.rs
@@ -5,7 +5,7 @@ pub mod mesh;
 pub mod scene;
 pub mod texture;
 
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 
 use fixedbitset::FixedBitSet;
 use gltf::{Document, Gltf};
diff --git a/crates/bevy_gltf/src/loader/gltf_ext/scene.rs b/crates/bevy_gltf/src/loader/gltf_ext/scene.rs
index 62174dc296f16..83e6778b99e37 100644
--- a/crates/bevy_gltf/src/loader/gltf_ext/scene.rs
+++ b/crates/bevy_gltf/src/loader/gltf_ext/scene.rs
@@ -8,7 +8,7 @@ use fixedbitset::FixedBitSet;
 use itertools::Itertools;
 
 #[cfg(feature = "bevy_animation")]
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 
 use crate::GltfError;
 
diff --git a/crates/bevy_gltf/src/loader/mod.rs b/crates/bevy_gltf/src/loader/mod.rs
index 882626af881da..a4e25475b74fd 100644
--- a/crates/bevy_gltf/src/loader/mod.rs
+++ b/crates/bevy_gltf/src/loader/mod.rs
@@ -35,7 +35,7 @@ use bevy_pbr::UvChannel;
 use bevy_pbr::{
     DirectionalLight, MeshMaterial3d, PointLight, SpotLight, StandardMaterial, MAX_JOINTS,
 };
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_render::{
     camera::{Camera, OrthographicProjection, PerspectiveProjection, Projection, ScalingMode},
     mesh::Mesh3d,
diff --git a/crates/bevy_gltf/src/vertex_attributes.rs b/crates/bevy_gltf/src/vertex_attributes.rs
index cdb34ccb6609a..d4ae811c906eb 100644
--- a/crates/bevy_gltf/src/vertex_attributes.rs
+++ b/crates/bevy_gltf/src/vertex_attributes.rs
@@ -1,5 +1,5 @@
 use bevy_mesh::{Mesh, MeshVertexAttribute, VertexAttributeValues as Values, VertexFormat};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use gltf::{
     accessor::{DataType, Dimensions},
     mesh::util::{ReadColors, ReadJoints, ReadTexCoords, ReadWeights},
diff --git a/crates/bevy_image/Cargo.toml b/crates/bevy_image/Cargo.toml
index 9115c69f5a47e..a90a3abb80e2b 100644
--- a/crates/bevy_image/Cargo.toml
+++ b/crates/bevy_image/Cargo.toml
@@ -32,11 +32,7 @@ qoi = ["image/qoi"]
 tga = ["image/tga"]
 tiff = ["image/tiff"]
 webp = ["image/webp"]
-serialize = [
-  "bevy_reflect",
-  "bevy_platform_support/serialize",
-  "bevy_utils/serde",
-]
+serialize = ["bevy_reflect", "bevy_platform/serialize", "bevy_utils/serde"]
 
 # For ktx2 supercompression
 zlib = ["flate2"]
@@ -53,7 +49,7 @@ bevy_color = { path = "../bevy_color", version = "0.16.0-dev", features = [
 bevy_math = { path = "../bevy_math", version = "0.16.0-dev" }
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
diff --git a/crates/bevy_image/src/texture_atlas.rs b/crates/bevy_image/src/texture_atlas.rs
index d3e37d061401d..b5b68b0c41367 100644
--- a/crates/bevy_image/src/texture_atlas.rs
+++ b/crates/bevy_image/src/texture_atlas.rs
@@ -1,7 +1,7 @@
 use bevy_app::prelude::*;
 use bevy_asset::{Asset, AssetApp as _, AssetId, Assets, Handle};
 use bevy_math::{Rect, URect, UVec2};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 #[cfg(not(feature = "bevy_reflect"))]
 use bevy_reflect::TypePath;
 #[cfg(feature = "bevy_reflect")]
diff --git a/crates/bevy_image/src/texture_atlas_builder.rs b/crates/bevy_image/src/texture_atlas_builder.rs
index b7fd2cf16810b..2f23331c8cb2b 100644
--- a/crates/bevy_image/src/texture_atlas_builder.rs
+++ b/crates/bevy_image/src/texture_atlas_builder.rs
@@ -1,6 +1,6 @@
 use bevy_asset::{AssetId, RenderAssetUsages};
 use bevy_math::{URect, UVec2};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use rectangle_pack::{
     contains_smallest_box, pack_rects, volume_heuristic, GroupedRectsToPlace, PackedLocation,
     RectToInsert, TargetBin,
diff --git a/crates/bevy_input/Cargo.toml b/crates/bevy_input/Cargo.toml
index f1c9497a5d8d8..570273a00ac59 100644
--- a/crates/bevy_input/Cargo.toml
+++ b/crates/bevy_input/Cargo.toml
@@ -27,7 +27,7 @@ serialize = [
   "smol_str?/serde",
   "bevy_ecs/serialize",
   "bevy_math/serialize",
-  "bevy_platform_support/serialize",
+  "bevy_platform/serialize",
 ]
 
 ## Uses the small-string optimization provided by `smol_str`.
@@ -44,7 +44,7 @@ std = [
   "bevy_math/std",
   "bevy_utils/std",
   "bevy_reflect/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
 ]
 
 ## `critical-section` provides the building blocks for synchronization primitives
@@ -53,7 +53,7 @@ critical-section = [
   "bevy_app/critical-section",
   "bevy_ecs/critical-section",
   "bevy_reflect?/critical-section",
-  "bevy_platform_support/critical-section",
+  "bevy_platform/critical-section",
 ]
 
 ## Uses the `libm` maths library instead of the one provided in `std` and `core`.
@@ -68,7 +68,7 @@ bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev", default-features
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", features = [
   "glam",
 ], default-features = false, optional = true }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false }
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false }
 
 # other
 serde = { version = "1", features = [
diff --git a/crates/bevy_input/src/axis.rs b/crates/bevy_input/src/axis.rs
index acdf0135f0eda..99909762c7919 100644
--- a/crates/bevy_input/src/axis.rs
+++ b/crates/bevy_input/src/axis.rs
@@ -1,7 +1,7 @@
 //! The generic axis type.
 
 use bevy_ecs::resource::Resource;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::hash::Hash;
 
 #[cfg(feature = "bevy_reflect")]
diff --git a/crates/bevy_input/src/button_input.rs b/crates/bevy_input/src/button_input.rs
index 7f2095dd519a1..bc28381ab4ef6 100644
--- a/crates/bevy_input/src/button_input.rs
+++ b/crates/bevy_input/src/button_input.rs
@@ -1,7 +1,7 @@
 //! The generic input type.
 
 use bevy_ecs::resource::Resource;
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use core::hash::Hash;
 #[cfg(feature = "bevy_reflect")]
 use {
diff --git a/crates/bevy_input/src/gamepad.rs b/crates/bevy_input/src/gamepad.rs
index 3a3e2c7cb71b4..2b0148909ca92 100644
--- a/crates/bevy_input/src/gamepad.rs
+++ b/crates/bevy_input/src/gamepad.rs
@@ -16,7 +16,7 @@ use bevy_ecs::{
 };
 use bevy_math::ops;
 use bevy_math::Vec2;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 #[cfg(feature = "bevy_reflect")]
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 #[cfg(all(feature = "serialize", feature = "bevy_reflect"))]
diff --git a/crates/bevy_input/src/touch.rs b/crates/bevy_input/src/touch.rs
index 3339e02f2e4ee..28f3159d53bb4 100644
--- a/crates/bevy_input/src/touch.rs
+++ b/crates/bevy_input/src/touch.rs
@@ -7,7 +7,7 @@ use bevy_ecs::{
     system::ResMut,
 };
 use bevy_math::Vec2;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 #[cfg(feature = "bevy_reflect")]
 use bevy_reflect::Reflect;
 
diff --git a/crates/bevy_internal/Cargo.toml b/crates/bevy_internal/Cargo.toml
index 40d83084d3d80..f4c2f2f03100d 100644
--- a/crates/bevy_internal/Cargo.toml
+++ b/crates/bevy_internal/Cargo.toml
@@ -109,7 +109,7 @@ serialize = [
   "bevy_ui?/serialize",
   "bevy_window?/serialize",
   "bevy_winit?/serialize",
-  "bevy_platform_support/serialize",
+  "bevy_platform/serialize",
 ]
 multi_threaded = [
   "std",
@@ -305,7 +305,7 @@ std = [
   "bevy_input_focus?/std",
   "bevy_log/std",
   "bevy_math/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
   "bevy_reflect/std",
   "bevy_state?/std",
   "bevy_time/std",
@@ -324,7 +324,7 @@ critical-section = [
   "bevy_ecs/critical-section",
   "bevy_input/critical-section",
   "bevy_input_focus?/critical-section",
-  "bevy_platform_support/critical-section",
+  "bevy_platform/critical-section",
   "bevy_reflect/critical-section",
   "bevy_state?/critical-section",
   "bevy_time/critical-section",
@@ -356,7 +356,7 @@ async_executor = [
 web = [
   "bevy_app/web",
   "bevy_log/web",
-  "bevy_platform_support/web",
+  "bevy_platform/web",
   "bevy_reflect/web",
   "bevy_tasks/web",
 ]
@@ -378,7 +378,7 @@ bevy_math = { path = "../bevy_math", version = "0.16.0-dev", default-features =
   "bevy_reflect",
   "nostd-libm",
 ] }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "alloc",
 ] }
 bevy_ptr = { path = "../bevy_ptr", version = "0.16.0-dev", default-features = false }
diff --git a/crates/bevy_internal/src/lib.rs b/crates/bevy_internal/src/lib.rs
index 3a7e13d1a2dcc..08ad8af850274 100644
--- a/crates/bevy_internal/src/lib.rs
+++ b/crates/bevy_internal/src/lib.rs
@@ -50,7 +50,7 @@ pub use bevy_math as math;
 pub use bevy_pbr as pbr;
 #[cfg(feature = "bevy_picking")]
 pub use bevy_picking as picking;
-pub use bevy_platform_support as platform_support;
+pub use bevy_platform as platform;
 pub use bevy_ptr as ptr;
 pub use bevy_reflect as reflect;
 #[cfg(feature = "bevy_remote")]
diff --git a/crates/bevy_internal/src/prelude.rs b/crates/bevy_internal/src/prelude.rs
index fbceef7a8979f..caa8e2a67f614 100644
--- a/crates/bevy_internal/src/prelude.rs
+++ b/crates/bevy_internal/src/prelude.rs
@@ -1,7 +1,7 @@
 #[doc(hidden)]
 pub use crate::{
     app::prelude::*, ecs::prelude::*, input::prelude::*, log::prelude::*, math::prelude::*,
-    platform_support::prelude::*, reflect::prelude::*, time::prelude::*, transform::prelude::*,
+    platform::prelude::*, reflect::prelude::*, time::prelude::*, transform::prelude::*,
     utils::prelude::*, DefaultPlugins, MinimalPlugins,
 };
 
diff --git a/crates/bevy_mesh/Cargo.toml b/crates/bevy_mesh/Cargo.toml
index a57abc6e79fe6..2ccb65cdb47ae 100644
--- a/crates/bevy_mesh/Cargo.toml
+++ b/crates/bevy_mesh/Cargo.toml
@@ -19,7 +19,7 @@ bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_mikktspace = { path = "../bevy_mikktspace", version = "0.16.0-dev" }
 bevy_derive = { path = "../bevy_derive", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
   "serialize",
 ] }
diff --git a/crates/bevy_mesh/src/primitives/dim2.rs b/crates/bevy_mesh/src/primitives/dim2.rs
index 61eaaf8ef8d43..e543f8a1951e3 100644
--- a/crates/bevy_mesh/src/primitives/dim2.rs
+++ b/crates/bevy_mesh/src/primitives/dim2.rs
@@ -1176,7 +1176,7 @@ impl From<Capsule2d> for Mesh {
 #[cfg(test)]
 mod tests {
     use bevy_math::{prelude::Annulus, primitives::RegularPolygon, FloatOrd};
-    use bevy_platform_support::collections::HashSet;
+    use bevy_platform::collections::HashSet;
 
     use crate::{Mesh, MeshBuilder, Meshable, VertexAttributeValues};
 
diff --git a/crates/bevy_mesh/src/vertex.rs b/crates/bevy_mesh/src/vertex.rs
index 253c04af4511c..949e355b4c52a 100644
--- a/crates/bevy_mesh/src/vertex.rs
+++ b/crates/bevy_mesh/src/vertex.rs
@@ -2,7 +2,7 @@ use alloc::sync::Arc;
 use bevy_derive::EnumVariantMeta;
 use bevy_ecs::resource::Resource;
 use bevy_math::Vec3;
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bytemuck::cast_slice;
 use core::hash::{Hash, Hasher};
 use thiserror::Error;
diff --git a/crates/bevy_pbr/Cargo.toml b/crates/bevy_pbr/Cargo.toml
index 9b9860b60f6b0..82642812b4644 100644
--- a/crates/bevy_pbr/Cargo.toml
+++ b/crates/bevy_pbr/Cargo.toml
@@ -46,7 +46,7 @@ bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev", optional = true }
 bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
diff --git a/crates/bevy_pbr/src/cluster/mod.rs b/crates/bevy_pbr/src/cluster/mod.rs
index 5f17de13e746d..3113333be303f 100644
--- a/crates/bevy_pbr/src/cluster/mod.rs
+++ b/crates/bevy_pbr/src/cluster/mod.rs
@@ -13,7 +13,7 @@ use bevy_ecs::{
     world::{FromWorld, World},
 };
 use bevy_math::{uvec4, AspectRatio, UVec2, UVec3, UVec4, Vec3Swizzles as _, Vec4};
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render::{
     camera::Camera,
diff --git a/crates/bevy_pbr/src/decal/clustered.rs b/crates/bevy_pbr/src/decal/clustered.rs
index bdfe7b8b2b9e6..5272bce80c64d 100644
--- a/crates/bevy_pbr/src/decal/clustered.rs
+++ b/crates/bevy_pbr/src/decal/clustered.rs
@@ -30,7 +30,7 @@ use bevy_ecs::{
 };
 use bevy_image::Image;
 use bevy_math::Mat4;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::Reflect;
 use bevy_render::{
     extract_component::{ExtractComponent, ExtractComponentPlugin},
diff --git a/crates/bevy_pbr/src/extended_material.rs b/crates/bevy_pbr/src/extended_material.rs
index 2de80f04f1bfd..e01dd0ff14ef3 100644
--- a/crates/bevy_pbr/src/extended_material.rs
+++ b/crates/bevy_pbr/src/extended_material.rs
@@ -2,7 +2,7 @@ use alloc::borrow::Cow;
 
 use bevy_asset::{Asset, Handle};
 use bevy_ecs::system::SystemParamItem;
-use bevy_platform_support::{collections::HashSet, hash::FixedHasher};
+use bevy_platform::{collections::HashSet, hash::FixedHasher};
 use bevy_reflect::{impl_type_path, Reflect};
 use bevy_render::{
     alpha::AlphaMode,
diff --git a/crates/bevy_pbr/src/light_probe/mod.rs b/crates/bevy_pbr/src/light_probe/mod.rs
index 2779209da19b9..ebfc7c7e7c614 100644
--- a/crates/bevy_pbr/src/light_probe/mod.rs
+++ b/crates/bevy_pbr/src/light_probe/mod.rs
@@ -15,7 +15,7 @@ use bevy_ecs::{
 };
 use bevy_image::Image;
 use bevy_math::{Affine3A, FloatOrd, Mat4, Vec3A, Vec4};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render::{
     extract_instances::ExtractInstancesPlugin,
diff --git a/crates/bevy_pbr/src/lightmap/mod.rs b/crates/bevy_pbr/src/lightmap/mod.rs
index 741085fd9fddf..4175d6ff61f4f 100644
--- a/crates/bevy_pbr/src/lightmap/mod.rs
+++ b/crates/bevy_pbr/src/lightmap/mod.rs
@@ -47,7 +47,7 @@ use bevy_ecs::{
 };
 use bevy_image::Image;
 use bevy_math::{uvec2, vec4, Rect, UVec2};
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render::{
     render_asset::RenderAssets,
diff --git a/crates/bevy_pbr/src/material.rs b/crates/bevy_pbr/src/material.rs
index bc8e201ceb489..373a295dc118b 100644
--- a/crates/bevy_pbr/src/material.rs
+++ b/crates/bevy_pbr/src/material.rs
@@ -29,9 +29,9 @@ use bevy_ecs::{
         SystemParamItem,
     },
 };
-use bevy_platform_support::collections::hash_map::Entry;
-use bevy_platform_support::collections::{HashMap, HashSet};
-use bevy_platform_support::hash::FixedHasher;
+use bevy_platform::collections::hash_map::Entry;
+use bevy_platform::collections::{HashMap, HashSet};
+use bevy_platform::hash::FixedHasher;
 use bevy_reflect::std_traits::ReflectDefault;
 use bevy_reflect::Reflect;
 use bevy_render::camera::extract_cameras;
diff --git a/crates/bevy_pbr/src/material_bind_groups.rs b/crates/bevy_pbr/src/material_bind_groups.rs
index 1351d335c5262..b539d2098f1e3 100644
--- a/crates/bevy_pbr/src/material_bind_groups.rs
+++ b/crates/bevy_pbr/src/material_bind_groups.rs
@@ -11,7 +11,7 @@ use bevy_ecs::{
     resource::Resource,
     world::{FromWorld, World},
 };
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_reflect::{prelude::ReflectDefault, Reflect};
 use bevy_render::{
     render_resource::{
diff --git a/crates/bevy_pbr/src/meshlet/from_mesh.rs b/crates/bevy_pbr/src/meshlet/from_mesh.rs
index 016722b0960ab..ed2be52f538dd 100644
--- a/crates/bevy_pbr/src/meshlet/from_mesh.rs
+++ b/crates/bevy_pbr/src/meshlet/from_mesh.rs
@@ -3,7 +3,7 @@ use super::asset::{
 };
 use alloc::borrow::Cow;
 use bevy_math::{ops::log2, IVec3, Vec2, Vec3, Vec3Swizzles};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_render::{
     mesh::{Indices, Mesh},
     render_resource::PrimitiveTopology,
diff --git a/crates/bevy_pbr/src/meshlet/instance_manager.rs b/crates/bevy_pbr/src/meshlet/instance_manager.rs
index 8fbc12e95c1aa..eba34f7cb7aa7 100644
--- a/crates/bevy_pbr/src/meshlet/instance_manager.rs
+++ b/crates/bevy_pbr/src/meshlet/instance_manager.rs
@@ -12,7 +12,7 @@ use bevy_ecs::{
     resource::Resource,
     system::{Local, Query, Res, ResMut, SystemState},
 };
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_render::{
     render_resource::StorageBuffer, sync_world::MainEntity, view::RenderLayers, MainWorld,
 };
diff --git a/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs b/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
index 957efd12d0996..57762bfc8a609 100644
--- a/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
+++ b/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
@@ -13,7 +13,7 @@ use bevy_core_pipeline::{
     tonemapping::{DebandDither, Tonemapping},
 };
 use bevy_derive::{Deref, DerefMut};
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_render::{
     camera::TemporalJitter,
     mesh::{Mesh, MeshVertexBufferLayout, MeshVertexBufferLayoutRef, MeshVertexBufferLayouts},
diff --git a/crates/bevy_pbr/src/meshlet/meshlet_mesh_manager.rs b/crates/bevy_pbr/src/meshlet/meshlet_mesh_manager.rs
index 2bc686fe43cc7..0f4aab7509a82 100644
--- a/crates/bevy_pbr/src/meshlet/meshlet_mesh_manager.rs
+++ b/crates/bevy_pbr/src/meshlet/meshlet_mesh_manager.rs
@@ -11,7 +11,7 @@ use bevy_ecs::{
     world::{FromWorld, World},
 };
 use bevy_math::Vec2;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_render::{
     render_resource::BufferAddress,
     renderer::{RenderDevice, RenderQueue},
diff --git a/crates/bevy_pbr/src/prepass/mod.rs b/crates/bevy_pbr/src/prepass/mod.rs
index d7aa117341a12..5250c8f6a2acc 100644
--- a/crates/bevy_pbr/src/prepass/mod.rs
+++ b/crates/bevy_pbr/src/prepass/mod.rs
@@ -57,7 +57,7 @@ use crate::meshlet::{
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::component::Tick;
 use bevy_ecs::system::SystemChangeTick;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_render::sync_world::MainEntityHashMap;
 use bevy_render::view::RenderVisibleEntities;
 use bevy_render::RenderSet::{PrepareAssets, PrepareResources};
diff --git a/crates/bevy_pbr/src/render/light.rs b/crates/bevy_pbr/src/render/light.rs
index bbd0faa144c07..a154c78821f5a 100644
--- a/crates/bevy_pbr/src/render/light.rs
+++ b/crates/bevy_pbr/src/render/light.rs
@@ -13,8 +13,8 @@ use bevy_ecs::{
     system::lifetimeless::Read,
 };
 use bevy_math::{ops, Mat4, UVec4, Vec2, Vec3, Vec3Swizzles, Vec4, Vec4Swizzles};
-use bevy_platform_support::collections::{HashMap, HashSet};
-use bevy_platform_support::hash::FixedHasher;
+use bevy_platform::collections::{HashMap, HashSet};
+use bevy_platform::hash::FixedHasher;
 use bevy_render::experimental::occlusion_culling::{
     OcclusionCulling, OcclusionCullingSubview, OcclusionCullingSubviewEntities,
 };
diff --git a/crates/bevy_pbr/src/render/mesh.rs b/crates/bevy_pbr/src/render/mesh.rs
index 0136418e0fd34..e65e9ec40c9ce 100644
--- a/crates/bevy_pbr/src/render/mesh.rs
+++ b/crates/bevy_pbr/src/render/mesh.rs
@@ -16,7 +16,7 @@ use bevy_ecs::{
 };
 use bevy_image::{BevyDefault, ImageSampler, TextureFormatPixelInfo};
 use bevy_math::{Affine3, Rect, UVec2, Vec3, Vec4};
-use bevy_platform_support::collections::{hash_map::Entry, HashMap};
+use bevy_platform::collections::{hash_map::Entry, HashMap};
 use bevy_render::{
     batching::{
         gpu_preprocessing::{
diff --git a/crates/bevy_pbr/src/render/skin.rs b/crates/bevy_pbr/src/render/skin.rs
index af333712617ca..476e06c1e78be 100644
--- a/crates/bevy_pbr/src/render/skin.rs
+++ b/crates/bevy_pbr/src/render/skin.rs
@@ -4,7 +4,7 @@ use std::sync::OnceLock;
 use bevy_asset::{prelude::AssetChanged, Assets};
 use bevy_ecs::prelude::*;
 use bevy_math::Mat4;
-use bevy_platform_support::collections::hash_map::Entry;
+use bevy_platform::collections::hash_map::Entry;
 use bevy_render::render_resource::{Buffer, BufferDescriptor};
 use bevy_render::sync_world::{MainEntity, MainEntityHashMap, MainEntityHashSet};
 use bevy_render::{
diff --git a/crates/bevy_pbr/src/wireframe.rs b/crates/bevy_pbr/src/wireframe.rs
index fa4e920539348..fa40fede65198 100644
--- a/crates/bevy_pbr/src/wireframe.rs
+++ b/crates/bevy_pbr/src/wireframe.rs
@@ -19,7 +19,7 @@ use bevy_ecs::{
     query::QueryItem,
     system::{lifetimeless::SRes, SystemChangeTick, SystemParamItem},
 };
-use bevy_platform_support::{
+use bevy_platform::{
     collections::{HashMap, HashSet},
     hash::FixedHasher,
 };
diff --git a/crates/bevy_picking/Cargo.toml b/crates/bevy_picking/Cargo.toml
index 95db895ac0bb7..f02e5237aaa64 100644
--- a/crates/bevy_picking/Cargo.toml
+++ b/crates/bevy_picking/Cargo.toml
@@ -26,7 +26,7 @@ bevy_time = { path = "../bevy_time", version = "0.16.0-dev" }
 bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
diff --git a/crates/bevy_picking/src/backend.rs b/crates/bevy_picking/src/backend.rs
index fb4f801d6e4d3..8c781d54e32f4 100644
--- a/crates/bevy_picking/src/backend.rs
+++ b/crates/bevy_picking/src/backend.rs
@@ -131,7 +131,7 @@ pub mod ray {
     use crate::backend::prelude::{PointerId, PointerLocation};
     use bevy_ecs::prelude::*;
     use bevy_math::Ray3d;
-    use bevy_platform_support::collections::{hash_map::Iter, HashMap};
+    use bevy_platform::collections::{hash_map::Iter, HashMap};
     use bevy_reflect::Reflect;
     use bevy_render::camera::Camera;
     use bevy_transform::prelude::GlobalTransform;
diff --git a/crates/bevy_picking/src/events.rs b/crates/bevy_picking/src/events.rs
index ec2c49274b80e..88b3b9bccc96b 100644
--- a/crates/bevy_picking/src/events.rs
+++ b/crates/bevy_picking/src/events.rs
@@ -42,8 +42,8 @@ use core::{fmt::Debug, time::Duration};
 use bevy_ecs::{prelude::*, query::QueryData, system::SystemParam, traversal::Traversal};
 use bevy_input::mouse::MouseScrollUnit;
 use bevy_math::Vec2;
-use bevy_platform_support::collections::HashMap;
-use bevy_platform_support::time::Instant;
+use bevy_platform::collections::HashMap;
+use bevy_platform::time::Instant;
 use bevy_reflect::prelude::*;
 use bevy_render::camera::NormalizedRenderTarget;
 use bevy_window::Window;
diff --git a/crates/bevy_picking/src/hover.rs b/crates/bevy_picking/src/hover.rs
index b88d0dbebd29e..6347568c02500 100644
--- a/crates/bevy_picking/src/hover.rs
+++ b/crates/bevy_picking/src/hover.rs
@@ -16,7 +16,7 @@ use crate::{
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::prelude::*;
 use bevy_math::FloatOrd;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::prelude::*;
 
 type DepthSortedHits = Vec<(Entity, HitData)>;
diff --git a/crates/bevy_picking/src/input.rs b/crates/bevy_picking/src/input.rs
index ce87df95b4a8d..712e612224c7b 100644
--- a/crates/bevy_picking/src/input.rs
+++ b/crates/bevy_picking/src/input.rs
@@ -20,7 +20,7 @@ use bevy_input::{
     ButtonState,
 };
 use bevy_math::Vec2;
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_reflect::prelude::*;
 use bevy_render::camera::RenderTarget;
 use bevy_window::{PrimaryWindow, WindowEvent, WindowRef};
diff --git a/crates/bevy_picking/src/pointer.rs b/crates/bevy_picking/src/pointer.rs
index c061065d748aa..e180a9c1bed78 100644
--- a/crates/bevy_picking/src/pointer.rs
+++ b/crates/bevy_picking/src/pointer.rs
@@ -11,7 +11,7 @@
 use bevy_ecs::prelude::*;
 use bevy_input::mouse::MouseScrollUnit;
 use bevy_math::Vec2;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::prelude::*;
 use bevy_render::camera::{Camera, NormalizedRenderTarget};
 use bevy_window::PrimaryWindow;
diff --git a/crates/bevy_platform_support/Cargo.toml b/crates/bevy_platform/Cargo.toml
similarity index 95%
rename from crates/bevy_platform_support/Cargo.toml
rename to crates/bevy_platform/Cargo.toml
index f330d9b131325..bd6402b36a96b 100644
--- a/crates/bevy_platform_support/Cargo.toml
+++ b/crates/bevy_platform/Cargo.toml
@@ -1,8 +1,8 @@
 [package]
-name = "bevy_platform_support"
+name = "bevy_platform"
 version = "0.16.0-dev"
 edition = "2024"
-description = "Platform compatibility support for Bevy Engine"
+description = "Provides common platform agnostic APIs, as well as platform-specific features for Bevy Engine"
 homepage = "https://bevyengine.org"
 repository = "https://github.com/bevyengine/bevy"
 license = "MIT OR Apache-2.0"
diff --git a/crates/bevy_platform_support/LICENSE-APACHE b/crates/bevy_platform/LICENSE-APACHE
similarity index 100%
rename from crates/bevy_platform_support/LICENSE-APACHE
rename to crates/bevy_platform/LICENSE-APACHE
diff --git a/crates/bevy_platform_support/LICENSE-MIT b/crates/bevy_platform/LICENSE-MIT
similarity index 100%
rename from crates/bevy_platform_support/LICENSE-MIT
rename to crates/bevy_platform/LICENSE-MIT
diff --git a/crates/bevy_platform_support/README.md b/crates/bevy_platform/README.md
similarity index 72%
rename from crates/bevy_platform_support/README.md
rename to crates/bevy_platform/README.md
index 69969ad614dea..4d853751aa09d 100644
--- a/crates/bevy_platform_support/README.md
+++ b/crates/bevy_platform/README.md
@@ -1,16 +1,16 @@
 # Bevy Platform Support
 
 [![License](https://img.shields.io/badge/license-MIT%2FApache-blue.svg)](https://github.com/bevyengine/bevy#license)
-[![Crates.io](https://img.shields.io/crates/v/bevy_platform_support.svg)](https://crates.io/crates/bevy_platform_support)
-[![Downloads](https://img.shields.io/crates/d/bevy_platform_support.svg)](https://crates.io/crates/bevy_platform_support)
-[![Docs](https://docs.rs/bevy_platform_support/badge.svg)](https://docs.rs/bevy_platform_support/latest/bevy_platform_support/)
+[![Crates.io](https://img.shields.io/crates/v/bevy_platform.svg)](https://crates.io/crates/bevy_platform)
+[![Downloads](https://img.shields.io/crates/d/bevy_platform.svg)](https://crates.io/crates/bevy_platform)
+[![Docs](https://docs.rs/bevy_platform/badge.svg)](https://docs.rs/bevy_platform/latest/bevy_platform/)
 [![Discord](https://img.shields.io/discord/691052431525675048.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/bevy)
 
 Rust is a fantastic multi-platform language with extensive support for modern targets through its [standard library](https://doc.rust-lang.org/stable/std/).
 However, some items within the standard library have alternatives that are better suited for [Bevy](https://crates.io/crates/bevy) and game engines in general.
 Additionally, to support embedded and other esoteric platforms, it's often necessary to shed reliance on `std`, making your crate [`no_std`](https://docs.rust-embedded.org/book/intro/no-std.html).
 
-These needs are handled by this crate, `bevy_platform_support`.
+These needs are handled by this crate, `bevy_platform`.
 The goal of this crate is to provide alternatives and extensions to the Rust standard library which minimize friction when developing with and for Bevy across multiple platforms.
 
 ## Getting Started
@@ -18,19 +18,19 @@ The goal of this crate is to provide alternatives and extensions to the Rust sta
 Like any dependency from [crates.io](https://crates.io/), use `cargo` to add it to your `Cargo.toml` file:
 
 ```sh
-cargo add bevy_platform_support
+cargo add bevy_platform
 ```
 
-Now, instead of importing from `std` you can use `bevy_platform_support` for items it has alternative for.
+Now, instead of importing from `std` you can use `bevy_platform` for items it has alternative for.
 See the documentation for what items are available, and explanations for _why_ you may want to use them.
 
 ## `no_std` Support
 
-By default, `bevy_platform_support` will activate the `std` feature, requiring access to the `std` crate for whichever platforms you're targeting.
+By default, `bevy_platform` will activate the `std` feature, requiring access to the `std` crate for whichever platforms you're targeting.
 To use this crate on `no_std` platforms, disable default features:
 
 ```toml
-bevy_platform_support = { version = "x.y.z", default-features = false }
+bevy_platform = { version = "x.y.z", default-features = false }
 ```
 
 ## Features
diff --git a/crates/bevy_platform_support/src/collections/hash_map.rs b/crates/bevy_platform/src/collections/hash_map.rs
similarity index 93%
rename from crates/bevy_platform_support/src/collections/hash_map.rs
rename to crates/bevy_platform/src/collections/hash_map.rs
index fe9c09d69cf22..ae978a7fce93c 100644
--- a/crates/bevy_platform_support/src/collections/hash_map.rs
+++ b/crates/bevy_platform/src/collections/hash_map.rs
@@ -306,7 +306,7 @@ impl<K, V> HashMap<K, V, FixedHasher> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// // Creates a HashMap with zero capacity.
     /// let map = HashMap::new();
@@ -327,7 +327,7 @@ impl<K, V> HashMap<K, V, FixedHasher> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// // Creates a HashMap with capacity for at least 5 entries.
     /// let map = HashMap::with_capacity(5);
@@ -351,8 +351,8 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
-    /// # use bevy_platform_support::hash::FixedHasher as SomeHasher;
+    /// # use bevy_platform::collections::HashMap;
+    /// # use bevy_platform::hash::FixedHasher as SomeHasher;
     /// // Creates a HashMap with the provided hasher.
     /// let map = HashMap::with_hasher(SomeHasher);
     /// #
@@ -373,8 +373,8 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
-    /// # use bevy_platform_support::hash::FixedHasher as SomeHasher;
+    /// # use bevy_platform::collections::HashMap;
+    /// # use bevy_platform::hash::FixedHasher as SomeHasher;
     /// // Creates a HashMap with capacity for 5 entries and the provided hasher.
     /// let map = HashMap::with_capacity_and_hasher(5, SomeHasher);
     /// #
@@ -405,7 +405,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let map = HashMap::with_capacity(5);
     ///
     /// # let map: HashMap<(), ()> = map;
@@ -425,7 +425,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -453,7 +453,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -481,7 +481,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -509,7 +509,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -538,7 +538,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -565,7 +565,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// assert_eq!(map.len(), 0);
@@ -586,7 +586,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// assert!(map.is_empty());
@@ -608,7 +608,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -636,7 +636,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -664,7 +664,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -695,7 +695,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -721,7 +721,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -748,7 +748,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// #
     /// let mut map = HashMap::new();
     ///
@@ -771,7 +771,7 @@ impl<K, V, S> HashMap<K, V, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let map: HashMap<&'static str, usize> = HashMap::new();
     /// let map: hashbrown::HashMap<&'static str, usize, _> = map.into_inner();
     /// ```
@@ -795,7 +795,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::with_capacity(5);
     ///
     /// # let mut map: HashMap<(), ()> = map;
@@ -820,7 +820,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::with_capacity(5);
     ///
     /// # let mut map: HashMap<(), ()> = map;
@@ -845,7 +845,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::with_capacity(5);
     ///
     /// map.insert("foo", 0);
@@ -880,7 +880,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// let value = map.entry("foo").or_insert(0);
@@ -899,7 +899,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     /// # let mut map: HashMap<&'static str, usize> = map;
     ///
@@ -922,7 +922,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -944,7 +944,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -966,7 +966,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -988,7 +988,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -1010,7 +1010,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -1032,7 +1032,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -1059,7 +1059,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -1088,7 +1088,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -1108,7 +1108,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.try_insert("foo", 0).unwrap();
@@ -1128,7 +1128,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -1153,7 +1153,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// map.insert("foo", 0);
@@ -1178,7 +1178,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashMap;
+    /// # use bevy_platform::collections::HashMap;
     /// let mut map = HashMap::new();
     ///
     /// assert_eq!(map.allocation_size(), 0);
diff --git a/crates/bevy_platform_support/src/collections/hash_set.rs b/crates/bevy_platform/src/collections/hash_set.rs
similarity index 94%
rename from crates/bevy_platform_support/src/collections/hash_set.rs
rename to crates/bevy_platform/src/collections/hash_set.rs
index b29b78fae59eb..7950e946db164 100644
--- a/crates/bevy_platform_support/src/collections/hash_set.rs
+++ b/crates/bevy_platform/src/collections/hash_set.rs
@@ -282,7 +282,7 @@ impl<T> HashSet<T, FixedHasher> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// #
     /// // Creates a HashSet with zero capacity.
     /// let map = HashSet::new();
@@ -303,7 +303,7 @@ impl<T> HashSet<T, FixedHasher> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// #
     /// // Creates a HashSet with capacity for at least 5 entries.
     /// let map = HashSet::with_capacity(5);
@@ -326,7 +326,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let map = HashSet::with_capacity(5);
     ///
     /// # let map: HashSet<()> = map;
@@ -346,7 +346,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// #
     /// let mut map = HashSet::new();
     ///
@@ -373,7 +373,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// assert_eq!(map.len(), 0);
@@ -394,7 +394,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// assert!(map.is_empty());
@@ -415,7 +415,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// #
     /// let mut map = HashSet::new();
     ///
@@ -442,7 +442,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// #
     /// let mut map = HashSet::new();
     ///
@@ -470,7 +470,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// #
     /// let mut map = HashSet::new();
     ///
@@ -500,7 +500,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// #
     /// let mut map = HashSet::new();
     ///
@@ -525,8 +525,8 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
-    /// # use bevy_platform_support::hash::FixedHasher as SomeHasher;
+    /// # use bevy_platform::collections::HashSet;
+    /// # use bevy_platform::hash::FixedHasher as SomeHasher;
     /// // Creates a HashSet with the provided hasher.
     /// let map = HashSet::with_hasher(SomeHasher);
     /// #
@@ -547,8 +547,8 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
-    /// # use bevy_platform_support::hash::FixedHasher as SomeHasher;
+    /// # use bevy_platform::collections::HashSet;
+    /// # use bevy_platform::hash::FixedHasher as SomeHasher;
     /// // Creates a HashSet with capacity for 5 entries and the provided hasher.
     /// let map = HashSet::with_capacity_and_hasher(5, SomeHasher);
     /// #
@@ -574,7 +574,7 @@ impl<T, S> HashSet<T, S> {
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let map: HashSet<&'static str> = HashSet::new();
     /// let map: hashbrown::HashSet<&'static str, _> = map.into_inner();
     /// ```
@@ -598,7 +598,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::with_capacity(5);
     ///
     /// # let mut map: HashSet<()> = map;
@@ -623,7 +623,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::with_capacity(5);
     ///
     /// # let mut map: HashSet<()> = map;
@@ -648,7 +648,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::with_capacity(5);
     ///
     /// map.insert("foo");
@@ -719,7 +719,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// map.insert("foo");
@@ -741,7 +741,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// map.insert("foo");
@@ -764,7 +764,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// assert_eq!(map.get_or_insert("foo"), &"foo");
@@ -782,7 +782,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// assert_eq!(map.get_or_insert_with(&"foo", |_| "foo"), &"foo");
@@ -803,7 +803,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// let value = map.entry("foo").or_insert();
@@ -849,7 +849,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// map.insert("foo");
@@ -869,7 +869,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// map.insert("foo");
@@ -889,7 +889,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// map.insert("foo");
@@ -913,7 +913,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// map.insert("foo");
@@ -938,7 +938,7 @@ where
     /// # Examples
     ///
     /// ```rust
-    /// # use bevy_platform_support::collections::HashSet;
+    /// # use bevy_platform::collections::HashSet;
     /// let mut map = HashSet::new();
     ///
     /// assert_eq!(map.allocation_size(), 0);
diff --git a/crates/bevy_platform_support/src/collections/hash_table.rs b/crates/bevy_platform/src/collections/hash_table.rs
similarity index 100%
rename from crates/bevy_platform_support/src/collections/hash_table.rs
rename to crates/bevy_platform/src/collections/hash_table.rs
diff --git a/crates/bevy_platform_support/src/collections/mod.rs b/crates/bevy_platform/src/collections/mod.rs
similarity index 100%
rename from crates/bevy_platform_support/src/collections/mod.rs
rename to crates/bevy_platform/src/collections/mod.rs
diff --git a/crates/bevy_platform_support/src/hash.rs b/crates/bevy_platform/src/hash.rs
similarity index 100%
rename from crates/bevy_platform_support/src/hash.rs
rename to crates/bevy_platform/src/hash.rs
diff --git a/crates/bevy_platform_support/src/lib.rs b/crates/bevy_platform/src/lib.rs
similarity index 100%
rename from crates/bevy_platform_support/src/lib.rs
rename to crates/bevy_platform/src/lib.rs
diff --git a/crates/bevy_platform_support/src/sync/atomic.rs b/crates/bevy_platform/src/sync/atomic.rs
similarity index 100%
rename from crates/bevy_platform_support/src/sync/atomic.rs
rename to crates/bevy_platform/src/sync/atomic.rs
diff --git a/crates/bevy_platform_support/src/sync/barrier.rs b/crates/bevy_platform/src/sync/barrier.rs
similarity index 100%
rename from crates/bevy_platform_support/src/sync/barrier.rs
rename to crates/bevy_platform/src/sync/barrier.rs
diff --git a/crates/bevy_platform_support/src/sync/lazy_lock.rs b/crates/bevy_platform/src/sync/lazy_lock.rs
similarity index 100%
rename from crates/bevy_platform_support/src/sync/lazy_lock.rs
rename to crates/bevy_platform/src/sync/lazy_lock.rs
diff --git a/crates/bevy_platform_support/src/sync/mod.rs b/crates/bevy_platform/src/sync/mod.rs
similarity index 100%
rename from crates/bevy_platform_support/src/sync/mod.rs
rename to crates/bevy_platform/src/sync/mod.rs
diff --git a/crates/bevy_platform_support/src/sync/mutex.rs b/crates/bevy_platform/src/sync/mutex.rs
similarity index 100%
rename from crates/bevy_platform_support/src/sync/mutex.rs
rename to crates/bevy_platform/src/sync/mutex.rs
diff --git a/crates/bevy_platform_support/src/sync/once.rs b/crates/bevy_platform/src/sync/once.rs
similarity index 100%
rename from crates/bevy_platform_support/src/sync/once.rs
rename to crates/bevy_platform/src/sync/once.rs
diff --git a/crates/bevy_platform_support/src/sync/poison.rs b/crates/bevy_platform/src/sync/poison.rs
similarity index 100%
rename from crates/bevy_platform_support/src/sync/poison.rs
rename to crates/bevy_platform/src/sync/poison.rs
diff --git a/crates/bevy_platform_support/src/sync/rwlock.rs b/crates/bevy_platform/src/sync/rwlock.rs
similarity index 100%
rename from crates/bevy_platform_support/src/sync/rwlock.rs
rename to crates/bevy_platform/src/sync/rwlock.rs
diff --git a/crates/bevy_platform_support/src/thread.rs b/crates/bevy_platform/src/thread.rs
similarity index 100%
rename from crates/bevy_platform_support/src/thread.rs
rename to crates/bevy_platform/src/thread.rs
diff --git a/crates/bevy_platform_support/src/time/fallback.rs b/crates/bevy_platform/src/time/fallback.rs
similarity index 100%
rename from crates/bevy_platform_support/src/time/fallback.rs
rename to crates/bevy_platform/src/time/fallback.rs
diff --git a/crates/bevy_platform_support/src/time/mod.rs b/crates/bevy_platform/src/time/mod.rs
similarity index 100%
rename from crates/bevy_platform_support/src/time/mod.rs
rename to crates/bevy_platform/src/time/mod.rs
diff --git a/crates/bevy_reflect/Cargo.toml b/crates/bevy_reflect/Cargo.toml
index edca35133e0ce..bf85258700f5d 100644
--- a/crates/bevy_reflect/Cargo.toml
+++ b/crates/bevy_reflect/Cargo.toml
@@ -58,20 +58,20 @@ std = [
   "glam?/std",
   "smol_str?/std",
   "uuid?/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
   "wgpu-types?/std",
 ]
 
 ## `critical-section` provides the building blocks for synchronization primitives
 ## on all platforms, including `no_std`.
 critical-section = [
-  "bevy_platform_support/critical-section",
+  "bevy_platform/critical-section",
   "bevy_utils/critical-section",
 ]
 
 ## Enables use of browser APIs.
 ## Note this is currently only applicable on `wasm32` architectures.
-web = ["bevy_platform_support/web", "uuid?/js"]
+web = ["bevy_platform/web", "uuid?/js"]
 
 [dependencies]
 # bevy
@@ -80,7 +80,7 @@ bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev", default-features
   "alloc",
 ] }
 bevy_ptr = { path = "../bevy_ptr", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "alloc",
   "serialize",
 ] }
diff --git a/crates/bevy_reflect/src/enums/enum_trait.rs b/crates/bevy_reflect/src/enums/enum_trait.rs
index 4df7aea5270a7..bcbcb300d50c0 100644
--- a/crates/bevy_reflect/src/enums/enum_trait.rs
+++ b/crates/bevy_reflect/src/enums/enum_trait.rs
@@ -5,8 +5,8 @@ use crate::{
     DynamicEnum, Generics, PartialReflect, Type, TypePath, VariantInfo, VariantType,
 };
 use alloc::{boxed::Box, format, string::String};
-use bevy_platform_support::collections::HashMap;
-use bevy_platform_support::sync::Arc;
+use bevy_platform::collections::HashMap;
+use bevy_platform::sync::Arc;
 use core::slice::Iter;
 
 /// A trait used to power [enum-like] operations via [reflection].
diff --git a/crates/bevy_reflect/src/enums/variants.rs b/crates/bevy_reflect/src/enums/variants.rs
index 25e40334e7187..55ccb8efb1b66 100644
--- a/crates/bevy_reflect/src/enums/variants.rs
+++ b/crates/bevy_reflect/src/enums/variants.rs
@@ -3,8 +3,8 @@ use crate::{
     NamedField, UnnamedField,
 };
 use alloc::boxed::Box;
-use bevy_platform_support::collections::HashMap;
-use bevy_platform_support::sync::Arc;
+use bevy_platform::collections::HashMap;
+use bevy_platform::sync::Arc;
 use core::slice::Iter;
 use thiserror::Error;
 
diff --git a/crates/bevy_reflect/src/fields.rs b/crates/bevy_reflect/src/fields.rs
index 393bfcb2e2ea6..21d4ccd98a1db 100644
--- a/crates/bevy_reflect/src/fields.rs
+++ b/crates/bevy_reflect/src/fields.rs
@@ -4,7 +4,7 @@ use crate::{
     MaybeTyped, PartialReflect, Type, TypeInfo, TypePath,
 };
 use alloc::borrow::Cow;
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use core::fmt::{Display, Formatter};
 
 /// The named field of a reflected struct.
diff --git a/crates/bevy_reflect/src/func/dynamic_function.rs b/crates/bevy_reflect/src/func/dynamic_function.rs
index 9253921112ffb..7a5da57525487 100644
--- a/crates/bevy_reflect/src/func/dynamic_function.rs
+++ b/crates/bevy_reflect/src/func/dynamic_function.rs
@@ -11,7 +11,7 @@ use crate::{
     ReflectRef, TypeInfo, TypePath,
 };
 use alloc::{borrow::Cow, boxed::Box};
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use bevy_reflect_derive::impl_type_path;
 use core::fmt::{Debug, Formatter};
 
@@ -480,7 +480,7 @@ mod tests {
     use crate::func::{FunctionError, IntoReturn, SignatureInfo};
     use crate::Type;
     use alloc::{format, string::String, vec, vec::Vec};
-    use bevy_platform_support::collections::HashSet;
+    use bevy_platform::collections::HashSet;
     use core::ops::Add;
 
     #[test]
diff --git a/crates/bevy_reflect/src/func/dynamic_function_internal.rs b/crates/bevy_reflect/src/func/dynamic_function_internal.rs
index 65b98e5e13a67..7e36ec119d869 100644
--- a/crates/bevy_reflect/src/func/dynamic_function_internal.rs
+++ b/crates/bevy_reflect/src/func/dynamic_function_internal.rs
@@ -2,7 +2,7 @@ use crate::func::args::ArgCount;
 use crate::func::signature::{ArgListSignature, ArgumentSignature};
 use crate::func::{ArgList, FunctionError, FunctionInfo, FunctionOverloadError};
 use alloc::{borrow::Cow, vec, vec::Vec};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::fmt::{Debug, Formatter};
 
 /// An internal structure for storing a function and its corresponding [function information].
diff --git a/crates/bevy_reflect/src/func/dynamic_function_mut.rs b/crates/bevy_reflect/src/func/dynamic_function_mut.rs
index b706ac620ac84..6d8be5ac47b89 100644
--- a/crates/bevy_reflect/src/func/dynamic_function_mut.rs
+++ b/crates/bevy_reflect/src/func/dynamic_function_mut.rs
@@ -1,5 +1,5 @@
 use alloc::{borrow::Cow, boxed::Box};
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use core::fmt::{Debug, Formatter};
 
 use crate::func::{
diff --git a/crates/bevy_reflect/src/func/error.rs b/crates/bevy_reflect/src/func/error.rs
index d4407d9698428..d9d105db1b9d1 100644
--- a/crates/bevy_reflect/src/func/error.rs
+++ b/crates/bevy_reflect/src/func/error.rs
@@ -4,7 +4,7 @@ use crate::func::{
     Return,
 };
 use alloc::borrow::Cow;
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use thiserror::Error;
 
 /// An error that occurs when calling a [`DynamicFunction`] or [`DynamicFunctionMut`].
diff --git a/crates/bevy_reflect/src/func/registry.rs b/crates/bevy_reflect/src/func/registry.rs
index d9a570dbe19a2..58a8344ecf3c8 100644
--- a/crates/bevy_reflect/src/func/registry.rs
+++ b/crates/bevy_reflect/src/func/registry.rs
@@ -1,5 +1,5 @@
 use alloc::borrow::Cow;
-use bevy_platform_support::{
+use bevy_platform::{
     collections::HashMap,
     sync::{Arc, PoisonError, RwLock, RwLockReadGuard, RwLockWriteGuard},
 };
diff --git a/crates/bevy_reflect/src/func/signature.rs b/crates/bevy_reflect/src/func/signature.rs
index c8862b35d0d90..7813d7d4f92b6 100644
--- a/crates/bevy_reflect/src/func/signature.rs
+++ b/crates/bevy_reflect/src/func/signature.rs
@@ -15,7 +15,7 @@ use crate::func::args::ArgInfo;
 use crate::func::{ArgList, SignatureInfo};
 use crate::Type;
 use alloc::boxed::Box;
-use bevy_platform_support::collections::Equivalent;
+use bevy_platform::collections::Equivalent;
 use core::borrow::Borrow;
 use core::fmt::{Debug, Formatter};
 use core::hash::{Hash, Hasher};
diff --git a/crates/bevy_reflect/src/generics.rs b/crates/bevy_reflect/src/generics.rs
index dfe21c6ec0843..8c9c4816baf5e 100644
--- a/crates/bevy_reflect/src/generics.rs
+++ b/crates/bevy_reflect/src/generics.rs
@@ -1,7 +1,7 @@
 use crate::type_info::impl_type_methods;
 use crate::{Reflect, Type, TypePath};
 use alloc::{borrow::Cow, boxed::Box};
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use core::ops::Deref;
 use derive_more::derive::From;
 
diff --git a/crates/bevy_reflect/src/impls/std.rs b/crates/bevy_reflect/src/impls/std.rs
index 4be1521b7ec6d..350527f91097d 100644
--- a/crates/bevy_reflect/src/impls/std.rs
+++ b/crates/bevy_reflect/src/impls/std.rs
@@ -214,7 +214,7 @@ impl_reflect_opaque!(::core::time::Duration(
     Deserialize,
     Default
 ));
-impl_reflect_opaque!(::bevy_platform_support::time::Instant(
+impl_reflect_opaque!(::bevy_platform::time::Instant(
     Clone, Debug, Hash, PartialEq
 ));
 impl_reflect_opaque!(::core::num::NonZeroI128(
@@ -315,7 +315,7 @@ impl_reflect_opaque!(::core::num::NonZeroI8(
 ));
 impl_reflect_opaque!(::core::num::Wrapping<T: Clone + Send + Sync>(Clone));
 impl_reflect_opaque!(::core::num::Saturating<T: Clone + Send + Sync>(Clone));
-impl_reflect_opaque!(::bevy_platform_support::sync::Arc<T: Send + Sync + ?Sized>(Clone));
+impl_reflect_opaque!(::bevy_platform::sync::Arc<T: Send + Sync + ?Sized>(Clone));
 
 // `Serialize` and `Deserialize` only for platforms supported by serde:
 // https://github.com/serde-rs/serde/blob/3ffb86fc70efd3d329519e2dddfa306cc04f167c/serde/src/de/impls.rs#L1732
@@ -990,10 +990,10 @@ crate::func::macros::impl_function_traits!(::std::collections::HashMap<K, V, S>;
     >
 );
 
-impl_reflect_for_hashmap!(bevy_platform_support::collections::HashMap<K, V, S>);
-impl_type_path!(::bevy_platform_support::collections::HashMap<K, V, S>);
+impl_reflect_for_hashmap!(bevy_platform::collections::HashMap<K, V, S>);
+impl_type_path!(::bevy_platform::collections::HashMap<K, V, S>);
 #[cfg(feature = "functions")]
-crate::func::macros::impl_function_traits!(::bevy_platform_support::collections::HashMap<K, V, S>;
+crate::func::macros::impl_function_traits!(::bevy_platform::collections::HashMap<K, V, S>;
     <
         K: FromReflect + MaybeTyped + TypePath + GetTypeRegistration + Eq + Hash,
         V: FromReflect + MaybeTyped + TypePath + GetTypeRegistration,
@@ -1206,8 +1206,8 @@ macro_rules! impl_reflect_for_hashset {
     };
 }
 
-impl_type_path!(::bevy_platform_support::hash::NoOpHash);
-impl_type_path!(::bevy_platform_support::hash::FixedHasher);
+impl_type_path!(::bevy_platform::hash::NoOpHash);
+impl_type_path!(::bevy_platform::hash::FixedHasher);
 impl_reflect_opaque!(::core::net::SocketAddr(
     Clone,
     Debug,
@@ -1229,10 +1229,10 @@ crate::func::macros::impl_function_traits!(::std::collections::HashSet<V, S>;
     >
 );
 
-impl_reflect_for_hashset!(::bevy_platform_support::collections::HashSet<V,S>);
-impl_type_path!(::bevy_platform_support::collections::HashSet<V, S>);
+impl_reflect_for_hashset!(::bevy_platform::collections::HashSet<V,S>);
+impl_type_path!(::bevy_platform::collections::HashSet<V, S>);
 #[cfg(feature = "functions")]
-crate::func::macros::impl_function_traits!(::bevy_platform_support::collections::HashSet<V, S>;
+crate::func::macros::impl_function_traits!(::bevy_platform::collections::HashSet<V, S>;
     <
         V: Hash + Eq + FromReflect + TypePath + GetTypeRegistration,
         S: TypePath + BuildHasher + Default + Send + Sync
@@ -2596,8 +2596,8 @@ mod tests {
         Typed, VariantInfo, VariantType,
     };
     use alloc::{collections::BTreeMap, string::String, vec};
-    use bevy_platform_support::collections::HashMap;
-    use bevy_platform_support::time::Instant;
+    use bevy_platform::collections::HashMap;
+    use bevy_platform::time::Instant;
     use core::{
         f32::consts::{PI, TAU},
         time::Duration,
diff --git a/crates/bevy_reflect/src/lib.rs b/crates/bevy_reflect/src/lib.rs
index 31540a54d2e9b..58e9b8714f0e1 100644
--- a/crates/bevy_reflect/src/lib.rs
+++ b/crates/bevy_reflect/src/lib.rs
@@ -734,7 +734,7 @@ mod tests {
         vec,
         vec::Vec,
     };
-    use bevy_platform_support::collections::HashMap;
+    use bevy_platform::collections::HashMap;
     use core::{
         any::TypeId,
         fmt::{Debug, Formatter},
diff --git a/crates/bevy_reflect/src/map.rs b/crates/bevy_reflect/src/map.rs
index 0b18132fba7dc..0a1c0b689a23b 100644
--- a/crates/bevy_reflect/src/map.rs
+++ b/crates/bevy_reflect/src/map.rs
@@ -1,6 +1,6 @@
 use core::fmt::{Debug, Formatter};
 
-use bevy_platform_support::collections::HashTable;
+use bevy_platform::collections::HashTable;
 use bevy_reflect_derive::impl_type_path;
 
 use crate::{
diff --git a/crates/bevy_reflect/src/serde/de/mod.rs b/crates/bevy_reflect/src/serde/de/mod.rs
index c11e75dec101b..e82b60bcee5c8 100644
--- a/crates/bevy_reflect/src/serde/de/mod.rs
+++ b/crates/bevy_reflect/src/serde/de/mod.rs
@@ -34,7 +34,7 @@ mod tests {
     use serde::{de::DeserializeSeed, Deserialize};
     use serde::{de::IgnoredAny, Deserializer};
 
-    use bevy_platform_support::collections::{HashMap, HashSet};
+    use bevy_platform::collections::{HashMap, HashSet};
 
     use crate::{
         serde::{
diff --git a/crates/bevy_reflect/src/serde/mod.rs b/crates/bevy_reflect/src/serde/mod.rs
index 2d912fd97bd15..a2c3fe63edd33 100644
--- a/crates/bevy_reflect/src/serde/mod.rs
+++ b/crates/bevy_reflect/src/serde/mod.rs
@@ -190,7 +190,7 @@ mod tests {
         use crate::serde::{ReflectSerializeWithRegistry, SerializeWithRegistry};
         use crate::{ReflectFromReflect, TypePath};
         use alloc::{format, string::String, vec, vec::Vec};
-        use bevy_platform_support::sync::Arc;
+        use bevy_platform::sync::Arc;
         use bevy_reflect_derive::reflect_trait;
         use core::any::TypeId;
         use core::fmt::{Debug, Formatter};
diff --git a/crates/bevy_reflect/src/serde/ser/mod.rs b/crates/bevy_reflect/src/serde/ser/mod.rs
index 6027a0effad46..25399e1d711e5 100644
--- a/crates/bevy_reflect/src/serde/ser/mod.rs
+++ b/crates/bevy_reflect/src/serde/ser/mod.rs
@@ -31,7 +31,7 @@ mod tests {
         vec,
         vec::Vec,
     };
-    use bevy_platform_support::collections::{HashMap, HashSet};
+    use bevy_platform::collections::{HashMap, HashSet};
     use core::{any::TypeId, f32::consts::PI, ops::RangeInclusive};
     use ron::{extensions::Extensions, ser::PrettyConfig};
     use serde::{Serialize, Serializer};
diff --git a/crates/bevy_reflect/src/serde/type_data.rs b/crates/bevy_reflect/src/serde/type_data.rs
index f1b0129a3c468..9bb3e134ac6bc 100644
--- a/crates/bevy_reflect/src/serde/type_data.rs
+++ b/crates/bevy_reflect/src/serde/type_data.rs
@@ -1,6 +1,6 @@
 use crate::Reflect;
 use alloc::boxed::Box;
-use bevy_platform_support::collections::{hash_map::Iter, HashMap};
+use bevy_platform::collections::{hash_map::Iter, HashMap};
 
 /// Contains data relevant to the automatic reflect powered (de)serialization of a type.
 #[derive(Debug, Clone)]
diff --git a/crates/bevy_reflect/src/set.rs b/crates/bevy_reflect/src/set.rs
index 21aa7a4d20cea..753662b603fff 100644
--- a/crates/bevy_reflect/src/set.rs
+++ b/crates/bevy_reflect/src/set.rs
@@ -1,9 +1,7 @@
 use alloc::{boxed::Box, format, vec::Vec};
 use core::fmt::{Debug, Formatter};
 
-use bevy_platform_support::collections::{
-    hash_table::OccupiedEntry as HashTableOccupiedEntry, HashTable,
-};
+use bevy_platform::collections::{hash_table::OccupiedEntry as HashTableOccupiedEntry, HashTable};
 use bevy_reflect_derive::impl_type_path;
 
 use crate::{
@@ -369,7 +367,7 @@ impl<T: Reflect> FromIterator<T> for DynamicSet {
 
 impl IntoIterator for DynamicSet {
     type Item = Box<dyn PartialReflect>;
-    type IntoIter = bevy_platform_support::collections::hash_table::IntoIter<Self::Item>;
+    type IntoIter = bevy_platform::collections::hash_table::IntoIter<Self::Item>;
 
     fn into_iter(self) -> Self::IntoIter {
         self.hash_table.into_iter()
@@ -379,7 +377,7 @@ impl IntoIterator for DynamicSet {
 impl<'a> IntoIterator for &'a DynamicSet {
     type Item = &'a dyn PartialReflect;
     type IntoIter = core::iter::Map<
-        bevy_platform_support::collections::hash_table::Iter<'a, Box<dyn PartialReflect>>,
+        bevy_platform::collections::hash_table::Iter<'a, Box<dyn PartialReflect>>,
         fn(&'a Box<dyn PartialReflect>) -> Self::Item,
     >;
 
diff --git a/crates/bevy_reflect/src/struct_trait.rs b/crates/bevy_reflect/src/struct_trait.rs
index 3f96c74b3cf81..9146e9aecea64 100644
--- a/crates/bevy_reflect/src/struct_trait.rs
+++ b/crates/bevy_reflect/src/struct_trait.rs
@@ -6,8 +6,8 @@ use crate::{
     ReflectOwned, ReflectRef, Type, TypeInfo, TypePath,
 };
 use alloc::{borrow::Cow, boxed::Box, vec::Vec};
-use bevy_platform_support::collections::HashMap;
-use bevy_platform_support::sync::Arc;
+use bevy_platform::collections::HashMap;
+use bevy_platform::sync::Arc;
 use bevy_reflect_derive::impl_type_path;
 use core::{
     fmt::{Debug, Formatter},
diff --git a/crates/bevy_reflect/src/tuple_struct.rs b/crates/bevy_reflect/src/tuple_struct.rs
index ed8a0c5ea17ab..09d2819807506 100644
--- a/crates/bevy_reflect/src/tuple_struct.rs
+++ b/crates/bevy_reflect/src/tuple_struct.rs
@@ -8,7 +8,7 @@ use crate::{
     ReflectOwned, ReflectRef, Tuple, Type, TypeInfo, TypePath, UnnamedField,
 };
 use alloc::{boxed::Box, vec::Vec};
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use core::{
     fmt::{Debug, Formatter},
     slice::Iter,
diff --git a/crates/bevy_reflect/src/type_registry.rs b/crates/bevy_reflect/src/type_registry.rs
index cf80749edebbb..5827ebdac5f1a 100644
--- a/crates/bevy_reflect/src/type_registry.rs
+++ b/crates/bevy_reflect/src/type_registry.rs
@@ -1,6 +1,6 @@
 use crate::{serde::Serializable, FromReflect, Reflect, TypeInfo, TypePath, Typed};
 use alloc::{boxed::Box, string::String};
-use bevy_platform_support::{
+use bevy_platform::{
     collections::{HashMap, HashSet},
     sync::{Arc, PoisonError, RwLock, RwLockReadGuard, RwLockWriteGuard},
 };
@@ -250,7 +250,7 @@ impl TypeRegistry {
         type_id: TypeId,
         get_registration: impl FnOnce() -> TypeRegistration,
     ) -> bool {
-        use bevy_platform_support::collections::hash_map::Entry;
+        use bevy_platform::collections::hash_map::Entry;
 
         match self.registrations.entry(type_id) {
             Entry::Occupied(_) => false,
diff --git a/crates/bevy_reflect/src/utility.rs b/crates/bevy_reflect/src/utility.rs
index 33725a4633256..5735a29dbe7c7 100644
--- a/crates/bevy_reflect/src/utility.rs
+++ b/crates/bevy_reflect/src/utility.rs
@@ -2,7 +2,7 @@
 
 use crate::TypeInfo;
 use alloc::boxed::Box;
-use bevy_platform_support::{
+use bevy_platform::{
     hash::{DefaultHasher, FixedHasher, NoOpHash},
     sync::{OnceLock, PoisonError, RwLock},
 };
diff --git a/crates/bevy_remote/Cargo.toml b/crates/bevy_remote/Cargo.toml
index d6c26a76c5fdc..d2e3395f77e71 100644
--- a/crates/bevy_remote/Cargo.toml
+++ b/crates/bevy_remote/Cargo.toml
@@ -22,7 +22,7 @@ bevy_ecs = { path = "../bevy_ecs", version = "0.16.0-dev", features = [
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev" }
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
   "serialize",
 ] }
diff --git a/crates/bevy_remote/src/builtin_methods.rs b/crates/bevy_remote/src/builtin_methods.rs
index e8b6856623cff..ce5fa259a1a33 100644
--- a/crates/bevy_remote/src/builtin_methods.rs
+++ b/crates/bevy_remote/src/builtin_methods.rs
@@ -14,7 +14,7 @@ use bevy_ecs::{
     system::{In, Local},
     world::{EntityRef, EntityWorldMut, FilteredEntityRef, World},
 };
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{
     serde::{ReflectSerializer, TypedReflectDeserializer},
     GetPath, PartialReflect, TypeRegistration, TypeRegistry,
diff --git a/crates/bevy_remote/src/lib.rs b/crates/bevy_remote/src/lib.rs
index 451baf5aa9296..b21fb97bbb453 100644
--- a/crates/bevy_remote/src/lib.rs
+++ b/crates/bevy_remote/src/lib.rs
@@ -374,7 +374,7 @@ use bevy_ecs::{
     system::{Commands, In, IntoSystem, ResMut, System, SystemId},
     world::World,
 };
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_utils::prelude::default;
 use serde::{Deserialize, Serialize};
 use serde_json::Value;
diff --git a/crates/bevy_remote/src/schemas/json_schema.rs b/crates/bevy_remote/src/schemas/json_schema.rs
index f7a58006a54f9..3fcc588f92ae4 100644
--- a/crates/bevy_remote/src/schemas/json_schema.rs
+++ b/crates/bevy_remote/src/schemas/json_schema.rs
@@ -1,7 +1,7 @@
 //! Module with JSON Schema type for Bevy Registry Types.
 //!  It tries to follow this standard: <https://json-schema.org/specification>
 use bevy_ecs::reflect::{ReflectComponent, ReflectResource};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{
     prelude::ReflectDefault, NamedField, OpaqueInfo, ReflectDeserialize, ReflectSerialize,
     TypeInfo, TypeRegistration, VariantInfo,
diff --git a/crates/bevy_remote/src/schemas/open_rpc.rs b/crates/bevy_remote/src/schemas/open_rpc.rs
index 90a0aee70b742..0ffda36bc375e 100644
--- a/crates/bevy_remote/src/schemas/open_rpc.rs
+++ b/crates/bevy_remote/src/schemas/open_rpc.rs
@@ -1,6 +1,6 @@
 //! Module with trimmed down `OpenRPC` document structs.
 //! It tries to follow this standard: <https://spec.open-rpc.org>
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_utils::default;
 use serde::{Deserialize, Serialize};
 
diff --git a/crates/bevy_render/Cargo.toml b/crates/bevy_render/Cargo.toml
index aa34765785777..5da61a57dd850 100644
--- a/crates/bevy_render/Cargo.toml
+++ b/crates/bevy_render/Cargo.toml
@@ -69,7 +69,7 @@ bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev" }
 bevy_image = { path = "../bevy_image", version = "0.16.0-dev" }
 bevy_mesh = { path = "../bevy_mesh", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
   "serialize",
 ] }
@@ -144,7 +144,7 @@ bevy_app = { path = "../bevy_app", version = "0.16.0-dev", default-features = fa
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-features = false, features = [
diff --git a/crates/bevy_render/src/batching/gpu_preprocessing.rs b/crates/bevy_render/src/batching/gpu_preprocessing.rs
index 34adabdb75917..7de55ee022587 100644
--- a/crates/bevy_render/src/batching/gpu_preprocessing.rs
+++ b/crates/bevy_render/src/batching/gpu_preprocessing.rs
@@ -14,7 +14,7 @@ use bevy_ecs::{
 };
 use bevy_encase_derive::ShaderType;
 use bevy_math::UVec4;
-use bevy_platform_support::collections::{hash_map::Entry, HashMap, HashSet};
+use bevy_platform::collections::{hash_map::Entry, HashMap, HashSet};
 use bevy_utils::{default, TypeIdMap};
 use bytemuck::{Pod, Zeroable};
 use encase::{internal::WriteInto, ShaderSize};
diff --git a/crates/bevy_render/src/camera/camera.rs b/crates/bevy_render/src/camera/camera.rs
index 7bbfb8a60ef5c..95218b7a593cd 100644
--- a/crates/bevy_render/src/camera/camera.rs
+++ b/crates/bevy_render/src/camera/camera.rs
@@ -34,7 +34,7 @@ use bevy_ecs::{
 };
 use bevy_image::Image;
 use bevy_math::{ops, vec2, Dir3, FloatOrd, Mat4, Ray3d, Rect, URect, UVec2, UVec4, Vec2, Vec3};
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_reflect::prelude::*;
 use bevy_render_macros::ExtractComponent;
 use bevy_transform::components::{GlobalTransform, Transform};
diff --git a/crates/bevy_render/src/camera/camera_driver_node.rs b/crates/bevy_render/src/camera/camera_driver_node.rs
index c78a41ed763b4..8be5a345b4c4a 100644
--- a/crates/bevy_render/src/camera/camera_driver_node.rs
+++ b/crates/bevy_render/src/camera/camera_driver_node.rs
@@ -5,7 +5,7 @@ use crate::{
     view::ExtractedWindows,
 };
 use bevy_ecs::{entity::ContainsEntity, prelude::QueryState, world::World};
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use wgpu::{LoadOp, Operations, RenderPassColorAttachment, RenderPassDescriptor, StoreOp};
 
 pub struct CameraDriverNode {
diff --git a/crates/bevy_render/src/camera/manual_texture_view.rs b/crates/bevy_render/src/camera/manual_texture_view.rs
index 7f76b8e886d36..56eff5612a905 100644
--- a/crates/bevy_render/src/camera/manual_texture_view.rs
+++ b/crates/bevy_render/src/camera/manual_texture_view.rs
@@ -2,7 +2,7 @@ use crate::{extract_resource::ExtractResource, render_resource::TextureView};
 use bevy_ecs::{prelude::Component, reflect::ReflectComponent, resource::Resource};
 use bevy_image::BevyDefault as _;
 use bevy_math::UVec2;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::prelude::*;
 use wgpu::TextureFormat;
 
diff --git a/crates/bevy_render/src/diagnostic/internal.rs b/crates/bevy_render/src/diagnostic/internal.rs
index 8d82eed5d605c..ec226c760b96b 100644
--- a/crates/bevy_render/src/diagnostic/internal.rs
+++ b/crates/bevy_render/src/diagnostic/internal.rs
@@ -8,7 +8,7 @@ use std::thread::{self, ThreadId};
 use bevy_diagnostic::{Diagnostic, DiagnosticMeasurement, DiagnosticPath, DiagnosticsStore};
 use bevy_ecs::resource::Resource;
 use bevy_ecs::system::{Res, ResMut};
-use bevy_platform_support::time::Instant;
+use bevy_platform::time::Instant;
 use std::sync::Mutex;
 use wgpu::{
     Buffer, BufferDescriptor, BufferUsages, CommandEncoder, ComputePass, Features, MapMode,
diff --git a/crates/bevy_render/src/gpu_readback.rs b/crates/bevy_render/src/gpu_readback.rs
index 5c25e437cb1f6..02f0c2d1db696 100644
--- a/crates/bevy_render/src/gpu_readback.rs
+++ b/crates/bevy_render/src/gpu_readback.rs
@@ -24,7 +24,7 @@ use bevy_ecs::{
     system::{Query, Res},
 };
 use bevy_image::{Image, TextureFormatPixelInfo};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::Reflect;
 use bevy_render_macros::ExtractComponent;
 use encase::internal::ReadFrom;
diff --git a/crates/bevy_render/src/mesh/allocator.rs b/crates/bevy_render/src/mesh/allocator.rs
index c3a01392165b7..bc638859ed3ad 100644
--- a/crates/bevy_render/src/mesh/allocator.rs
+++ b/crates/bevy_render/src/mesh/allocator.rs
@@ -16,7 +16,7 @@ use bevy_ecs::{
     system::{Res, ResMut},
     world::{FromWorld, World},
 };
-use bevy_platform_support::collections::{hash_map::Entry, HashMap, HashSet};
+use bevy_platform::collections::{hash_map::Entry, HashMap, HashSet};
 use bevy_utils::default;
 use offset_allocator::{Allocation, Allocator};
 use tracing::error;
diff --git a/crates/bevy_render/src/mesh/components.rs b/crates/bevy_render/src/mesh/components.rs
index 772ff1f9e5ed1..000de324e3702 100644
--- a/crates/bevy_render/src/mesh/components.rs
+++ b/crates/bevy_render/src/mesh/components.rs
@@ -8,7 +8,7 @@ use bevy_ecs::{
     change_detection::DetectChangesMut, component::Component, event::EventReader,
     reflect::ReflectComponent, system::Query,
 };
-use bevy_platform_support::{collections::HashSet, hash::FixedHasher};
+use bevy_platform::{collections::HashSet, hash::FixedHasher};
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_transform::components::Transform;
 use derive_more::derive::From;
diff --git a/crates/bevy_render/src/render_asset.rs b/crates/bevy_render/src/render_asset.rs
index 66f0b2b23c226..6626cb7797947 100644
--- a/crates/bevy_render/src/render_asset.rs
+++ b/crates/bevy_render/src/render_asset.rs
@@ -11,7 +11,7 @@ use bevy_ecs::{
     system::{ScheduleSystem, StaticSystemParam, SystemParam, SystemParamItem, SystemState},
     world::{FromWorld, Mut},
 };
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use core::marker::PhantomData;
 use core::sync::atomic::{AtomicUsize, Ordering};
 use thiserror::Error;
diff --git a/crates/bevy_render/src/render_graph/graph.rs b/crates/bevy_render/src/render_graph/graph.rs
index 78e6cbf324724..d1a7020bcfcab 100644
--- a/crates/bevy_render/src/render_graph/graph.rs
+++ b/crates/bevy_render/src/render_graph/graph.rs
@@ -6,7 +6,7 @@ use crate::{
     renderer::RenderContext,
 };
 use bevy_ecs::{define_label, intern::Interned, prelude::World, resource::Resource};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use core::fmt::Debug;
 
 use super::{EdgeExistence, InternedRenderLabel, IntoRenderNodeArray};
@@ -680,7 +680,7 @@ mod tests {
         renderer::RenderContext,
     };
     use bevy_ecs::world::{FromWorld, World};
-    use bevy_platform_support::collections::HashSet;
+    use bevy_platform::collections::HashSet;
 
     #[derive(Debug, Hash, PartialEq, Eq, Clone, RenderLabel)]
     enum TestLabel {
diff --git a/crates/bevy_render/src/render_phase/mod.rs b/crates/bevy_render/src/render_phase/mod.rs
index 8a82604281e64..a4eb4a944f4f3 100644
--- a/crates/bevy_render/src/render_phase/mod.rs
+++ b/crates/bevy_render/src/render_phase/mod.rs
@@ -32,7 +32,7 @@ use bevy_app::{App, Plugin};
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::component::Tick;
 use bevy_ecs::entity::EntityHash;
-use bevy_platform_support::collections::{hash_map::Entry, HashMap};
+use bevy_platform::collections::{hash_map::Entry, HashMap};
 use bevy_utils::default;
 pub use draw::*;
 pub use draw_state::*;
diff --git a/crates/bevy_render/src/render_resource/pipeline_cache.rs b/crates/bevy_render/src/render_resource/pipeline_cache.rs
index 613737f3dee3e..653ae70b1c77c 100644
--- a/crates/bevy_render/src/render_resource/pipeline_cache.rs
+++ b/crates/bevy_render/src/render_resource/pipeline_cache.rs
@@ -11,7 +11,7 @@ use bevy_ecs::{
     resource::Resource,
     system::{Res, ResMut},
 };
-use bevy_platform_support::collections::{hash_map::EntryRef, HashMap, HashSet};
+use bevy_platform::collections::{hash_map::EntryRef, HashMap, HashSet};
 use bevy_tasks::Task;
 use bevy_utils::default;
 use core::{future::Future, hash::Hash, mem, ops::Deref};
diff --git a/crates/bevy_render/src/render_resource/pipeline_specializer.rs b/crates/bevy_render/src/render_resource/pipeline_specializer.rs
index 67f737a6a4193..e017242ea0b9b 100644
--- a/crates/bevy_render/src/render_resource/pipeline_specializer.rs
+++ b/crates/bevy_render/src/render_resource/pipeline_specializer.rs
@@ -6,7 +6,7 @@ use crate::{
     },
 };
 use bevy_ecs::resource::Resource;
-use bevy_platform_support::{
+use bevy_platform::{
     collections::{
         hash_map::{Entry, RawEntryMut, VacantEntry},
         HashMap,
diff --git a/crates/bevy_render/src/renderer/graph_runner.rs b/crates/bevy_render/src/renderer/graph_runner.rs
index 64a7b885d5db7..39f05ca6a85c6 100644
--- a/crates/bevy_render/src/renderer/graph_runner.rs
+++ b/crates/bevy_render/src/renderer/graph_runner.rs
@@ -1,5 +1,5 @@
 use bevy_ecs::{prelude::Entity, world::World};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 #[cfg(feature = "trace")]
 use tracing::info_span;
 
diff --git a/crates/bevy_render/src/renderer/mod.rs b/crates/bevy_render/src/renderer/mod.rs
index 81da7444dc053..1691911c2cbbe 100644
--- a/crates/bevy_render/src/renderer/mod.rs
+++ b/crates/bevy_render/src/renderer/mod.rs
@@ -18,7 +18,7 @@ use crate::{
 };
 use alloc::sync::Arc;
 use bevy_ecs::{prelude::*, system::SystemState};
-use bevy_platform_support::time::Instant;
+use bevy_platform::time::Instant;
 use bevy_time::TimeSender;
 use wgpu::{
     Adapter, AdapterInfo, CommandBuffer, CommandEncoder, DeviceType, Instance, Queue,
diff --git a/crates/bevy_render/src/sync_world.rs b/crates/bevy_render/src/sync_world.rs
index 6db9f78394243..ce0408833366c 100644
--- a/crates/bevy_render/src/sync_world.rs
+++ b/crates/bevy_render/src/sync_world.rs
@@ -12,7 +12,7 @@ use bevy_ecs::{
     system::{Local, Query, ResMut, SystemState},
     world::{Mut, OnAdd, OnRemove, World},
 };
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 
 /// A plugin that synchronizes entities with [`SyncToRenderWorld`] between the main world and the render world.
diff --git a/crates/bevy_render/src/texture/fallback_image.rs b/crates/bevy_render/src/texture/fallback_image.rs
index 277f9d477fcd7..18c83414bd7d6 100644
--- a/crates/bevy_render/src/texture/fallback_image.rs
+++ b/crates/bevy_render/src/texture/fallback_image.rs
@@ -11,7 +11,7 @@ use bevy_ecs::{
     system::SystemParam,
 };
 use bevy_image::{BevyDefault, Image, ImageSampler, TextureFormatPixelInfo};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 
 /// A [`RenderApp`](crate::RenderApp) resource that contains the default "fallback image",
 /// which can be used in situations where an image was not explicitly defined. The most common
diff --git a/crates/bevy_render/src/texture/texture_cache.rs b/crates/bevy_render/src/texture/texture_cache.rs
index 8a3fb010109d5..ca1ef9b31b35f 100644
--- a/crates/bevy_render/src/texture/texture_cache.rs
+++ b/crates/bevy_render/src/texture/texture_cache.rs
@@ -3,7 +3,7 @@ use crate::{
     renderer::RenderDevice,
 };
 use bevy_ecs::{prelude::ResMut, resource::Resource};
-use bevy_platform_support::collections::{hash_map::Entry, HashMap};
+use bevy_platform::collections::{hash_map::Entry, HashMap};
 use wgpu::{TextureDescriptor, TextureViewDescriptor};
 
 /// The internal representation of a [`CachedTexture`] used to track whether it was recently used
diff --git a/crates/bevy_render/src/view/mod.rs b/crates/bevy_render/src/view/mod.rs
index b91eafeb2de3c..c392dcaaebe76 100644
--- a/crates/bevy_render/src/view/mod.rs
+++ b/crates/bevy_render/src/view/mod.rs
@@ -33,7 +33,7 @@ use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::prelude::*;
 use bevy_image::BevyDefault as _;
 use bevy_math::{mat3, vec2, vec3, Mat3, Mat4, UVec4, Vec2, Vec3, Vec4, Vec4Swizzles};
-use bevy_platform_support::collections::{hash_map::Entry, HashMap};
+use bevy_platform::collections::{hash_map::Entry, HashMap};
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render_macros::ExtractComponent;
 use bevy_transform::components::GlobalTransform;
diff --git a/crates/bevy_render/src/view/visibility/range.rs b/crates/bevy_render/src/view/visibility/range.rs
index 74ac212bf34dd..4c264e0778543 100644
--- a/crates/bevy_render/src/view/visibility/range.rs
+++ b/crates/bevy_render/src/view/visibility/range.rs
@@ -18,7 +18,7 @@ use bevy_ecs::{
     system::{Local, Query, Res, ResMut},
 };
 use bevy_math::{vec4, FloatOrd, Vec4};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::Reflect;
 use bevy_transform::components::GlobalTransform;
 use bevy_utils::{prelude::default, Parallel};
diff --git a/crates/bevy_render/src/view/window/mod.rs b/crates/bevy_render/src/view/window/mod.rs
index dbf75567af952..c3fc6e551634f 100644
--- a/crates/bevy_render/src/view/window/mod.rs
+++ b/crates/bevy_render/src/view/window/mod.rs
@@ -5,7 +5,7 @@ use crate::{
 };
 use bevy_app::{App, Plugin};
 use bevy_ecs::{entity::EntityHashMap, prelude::*};
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_utils::default;
 use bevy_window::{
     CompositeAlphaMode, PresentMode, PrimaryWindow, RawHandleWrapper, Window, WindowClosing,
diff --git a/crates/bevy_render/src/view/window/screenshot.rs b/crates/bevy_render/src/view/window/screenshot.rs
index eb66343afc8ee..6e223eedaf047 100644
--- a/crates/bevy_render/src/view/window/screenshot.rs
+++ b/crates/bevy_render/src/view/window/screenshot.rs
@@ -23,7 +23,7 @@ use bevy_ecs::{
     entity::EntityHashMap, event::event_update_system, prelude::*, system::SystemState,
 };
 use bevy_image::{Image, TextureFormatPixelInfo};
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_reflect::Reflect;
 use bevy_tasks::AsyncComputeTaskPool;
 use bevy_utils::default;
diff --git a/crates/bevy_scene/Cargo.toml b/crates/bevy_scene/Cargo.toml
index 54cb344a827b4..3bb913c85908b 100644
--- a/crates/bevy_scene/Cargo.toml
+++ b/crates/bevy_scene/Cargo.toml
@@ -14,7 +14,7 @@ serialize = [
   "dep:serde",
   "uuid/serde",
   "bevy_ecs/serialize",
-  "bevy_platform_support/serialize",
+  "bevy_platform/serialize",
 ]
 
 [dependencies]
@@ -27,7 +27,7 @@ bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev" }
 bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_render = { path = "../bevy_render", version = "0.16.0-dev", optional = true }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
diff --git a/crates/bevy_scene/src/scene_filter.rs b/crates/bevy_scene/src/scene_filter.rs
index 732a1e5f15490..a3154c37e79ff 100644
--- a/crates/bevy_scene/src/scene_filter.rs
+++ b/crates/bevy_scene/src/scene_filter.rs
@@ -1,4 +1,4 @@
-use bevy_platform_support::collections::{hash_set::IntoIter, HashSet};
+use bevy_platform::collections::{hash_set::IntoIter, HashSet};
 use core::any::{Any, TypeId};
 
 /// A filter used to control which types can be added to a [`DynamicScene`].
diff --git a/crates/bevy_scene/src/scene_spawner.rs b/crates/bevy_scene/src/scene_spawner.rs
index 91c89e96ac996..dce5ad971e105 100644
--- a/crates/bevy_scene/src/scene_spawner.rs
+++ b/crates/bevy_scene/src/scene_spawner.rs
@@ -8,7 +8,7 @@ use bevy_ecs::{
     resource::Resource,
     world::{Mut, World},
 };
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_reflect::Reflect;
 use thiserror::Error;
 use uuid::Uuid;
diff --git a/crates/bevy_scene/src/serde.rs b/crates/bevy_scene/src/serde.rs
index 526069b5ab0ac..ead8933a49966 100644
--- a/crates/bevy_scene/src/serde.rs
+++ b/crates/bevy_scene/src/serde.rs
@@ -2,7 +2,7 @@
 
 use crate::{DynamicEntity, DynamicScene};
 use bevy_ecs::entity::Entity;
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_reflect::{
     serde::{
         ReflectDeserializer, TypeRegistrationDeserializer, TypedReflectDeserializer,
diff --git a/crates/bevy_sprite/Cargo.toml b/crates/bevy_sprite/Cargo.toml
index 67c28f0ec8c4a..8fa5bae2ccefe 100644
--- a/crates/bevy_sprite/Cargo.toml
+++ b/crates/bevy_sprite/Cargo.toml
@@ -29,7 +29,7 @@ bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.16.0-dev", optional = true }
 bevy_derive = { path = "../bevy_derive", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
diff --git a/crates/bevy_sprite/src/mesh2d/material.rs b/crates/bevy_sprite/src/mesh2d/material.rs
index 5df02cfc7b33e..2fd74f676c48c 100644
--- a/crates/bevy_sprite/src/mesh2d/material.rs
+++ b/crates/bevy_sprite/src/mesh2d/material.rs
@@ -19,7 +19,7 @@ use bevy_ecs::{
     system::{lifetimeless::SRes, SystemParamItem},
 };
 use bevy_math::FloatOrd;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{prelude::ReflectDefault, Reflect};
 use bevy_render::camera::extract_cameras;
 use bevy_render::render_phase::{DrawFunctionId, InputUniformIndex};
diff --git a/crates/bevy_sprite/src/mesh2d/wireframe2d.rs b/crates/bevy_sprite/src/mesh2d/wireframe2d.rs
index 0aef1777655c1..aaf3796c1b55f 100644
--- a/crates/bevy_sprite/src/mesh2d/wireframe2d.rs
+++ b/crates/bevy_sprite/src/mesh2d/wireframe2d.rs
@@ -19,7 +19,7 @@ use bevy_ecs::{
     query::QueryItem,
     system::{lifetimeless::SRes, SystemChangeTick, SystemParamItem},
 };
-use bevy_platform_support::{
+use bevy_platform::{
     collections::{HashMap, HashSet},
     hash::FixedHasher,
 };
diff --git a/crates/bevy_sprite/src/render/mod.rs b/crates/bevy_sprite/src/render/mod.rs
index 44da12b09a4ae..de57f43536631 100644
--- a/crates/bevy_sprite/src/render/mod.rs
+++ b/crates/bevy_sprite/src/render/mod.rs
@@ -18,7 +18,7 @@ use bevy_ecs::{
 };
 use bevy_image::{BevyDefault, Image, ImageSampler, TextureAtlasLayout, TextureFormatPixelInfo};
 use bevy_math::{Affine3A, FloatOrd, Quat, Rect, Vec2, Vec4};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_render::view::{RenderVisibleEntities, RetainedViewEntity};
 use bevy_render::{
     render_asset::RenderAssets,
diff --git a/crates/bevy_sprite/src/texture_slice/computed_slices.rs b/crates/bevy_sprite/src/texture_slice/computed_slices.rs
index f14d6978cc1ba..f36cf4bfacc78 100644
--- a/crates/bevy_sprite/src/texture_slice/computed_slices.rs
+++ b/crates/bevy_sprite/src/texture_slice/computed_slices.rs
@@ -5,7 +5,7 @@ use bevy_asset::{AssetEvent, Assets};
 use bevy_ecs::prelude::*;
 use bevy_image::Image;
 use bevy_math::{Rect, Vec2};
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 
 /// Component storing texture slices for tiled or sliced sprite entities
 ///
diff --git a/crates/bevy_state/Cargo.toml b/crates/bevy_state/Cargo.toml
index 3b205fa69c092..1ae52fa571670 100644
--- a/crates/bevy_state/Cargo.toml
+++ b/crates/bevy_state/Cargo.toml
@@ -33,7 +33,7 @@ std = [
   "bevy_utils/std",
   "bevy_reflect?/std",
   "bevy_app?/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
 ]
 
 ## `critical-section` provides the building blocks for synchronization primitives
@@ -43,7 +43,7 @@ critical-section = [
   "bevy_utils/critical-section",
   "bevy_app?/critical-section",
   "bevy_reflect?/critical-section",
-  "bevy_platform_support/critical-section",
+  "bevy_platform/critical-section",
 ]
 
 [dependencies]
@@ -53,7 +53,7 @@ bevy_state_macros = { path = "macros", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev", default-features = false }
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-features = false, optional = true }
 bevy_app = { path = "../bevy_app", version = "0.16.0-dev", default-features = false, optional = true }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false }
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false }
 variadics_please = "1.1"
 
 # other
diff --git a/crates/bevy_state/src/state_scoped_events.rs b/crates/bevy_state/src/state_scoped_events.rs
index 846db41b3f8e0..c84f5c60bf0a0 100644
--- a/crates/bevy_state/src/state_scoped_events.rs
+++ b/crates/bevy_state/src/state_scoped_events.rs
@@ -8,7 +8,7 @@ use bevy_ecs::{
     system::Commands,
     world::World,
 };
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 
 use crate::state::{FreelyMutableState, OnExit, StateTransitionEvent};
 
diff --git a/crates/bevy_tasks/Cargo.toml b/crates/bevy_tasks/Cargo.toml
index 9f878e71b7b87..07c20b9750f5b 100644
--- a/crates/bevy_tasks/Cargo.toml
+++ b/crates/bevy_tasks/Cargo.toml
@@ -26,23 +26,23 @@ async_executor = ["std", "dep:async-executor"]
 ## Allows access to the `std` crate. Enabling this feature will prevent compilation
 ## on `no_std` targets, but provides access to certain additional features on
 ## supported platforms.
-std = ["futures-lite/std", "async-task/std", "bevy_platform_support/std"]
+std = ["futures-lite/std", "async-task/std", "bevy_platform/std"]
 
 ## `critical-section` provides the building blocks for synchronization primitives
 ## on all platforms, including `no_std`.
-critical-section = ["bevy_platform_support/critical-section"]
+critical-section = ["bevy_platform/critical-section"]
 
 ## Enables use of browser APIs.
 ## Note this is currently only applicable on `wasm32` architectures.
 web = [
-  "bevy_platform_support/web",
+  "bevy_platform/web",
   "dep:wasm-bindgen-futures",
   "dep:pin-project",
   "dep:futures-channel",
 ]
 
 [dependencies]
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "alloc",
 ] }
 
diff --git a/crates/bevy_tasks/examples/busy_behavior.rs b/crates/bevy_tasks/examples/busy_behavior.rs
index c560e58b9149f..8dc56172df2a5 100644
--- a/crates/bevy_tasks/examples/busy_behavior.rs
+++ b/crates/bevy_tasks/examples/busy_behavior.rs
@@ -4,7 +4,7 @@
 
 #![expect(clippy::print_stdout, reason = "Allowed in examples.")]
 
-use bevy_platform_support::time::Instant;
+use bevy_platform::time::Instant;
 use bevy_tasks::TaskPoolBuilder;
 use core::time::Duration;
 
diff --git a/crates/bevy_tasks/examples/idle_behavior.rs b/crates/bevy_tasks/examples/idle_behavior.rs
index c68e399a892be..06276e916d1fb 100644
--- a/crates/bevy_tasks/examples/idle_behavior.rs
+++ b/crates/bevy_tasks/examples/idle_behavior.rs
@@ -4,7 +4,7 @@
 
 #![expect(clippy::print_stdout, reason = "Allowed in examples.")]
 
-use bevy_platform_support::time::Instant;
+use bevy_platform::time::Instant;
 use bevy_tasks::TaskPoolBuilder;
 use core::time::Duration;
 
diff --git a/crates/bevy_tasks/src/edge_executor.rs b/crates/bevy_tasks/src/edge_executor.rs
index da45c38d3a11c..70e11c8a433cf 100644
--- a/crates/bevy_tasks/src/edge_executor.rs
+++ b/crates/bevy_tasks/src/edge_executor.rs
@@ -22,7 +22,7 @@ use core::{
 
 use async_task::{Runnable, Task};
 use atomic_waker::AtomicWaker;
-use bevy_platform_support::sync::{Arc, LazyLock};
+use bevy_platform::sync::{Arc, LazyLock};
 use futures_lite::FutureExt;
 
 /// An async executor.
@@ -525,7 +525,7 @@ mod drop_tests {
     use core::task::{Poll, Waker};
     use std::sync::Mutex;
 
-    use bevy_platform_support::sync::LazyLock;
+    use bevy_platform::sync::LazyLock;
     use futures_lite::future;
 
     use super::{Executor, Task};
diff --git a/crates/bevy_tasks/src/single_threaded_task_pool.rs b/crates/bevy_tasks/src/single_threaded_task_pool.rs
index 23bc18635e692..0f9488bcd0f33 100644
--- a/crates/bevy_tasks/src/single_threaded_task_pool.rs
+++ b/crates/bevy_tasks/src/single_threaded_task_pool.rs
@@ -1,5 +1,5 @@
 use alloc::{string::String, vec::Vec};
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use core::{cell::RefCell, future::Future, marker::PhantomData, mem};
 
 use crate::Task;
@@ -8,7 +8,7 @@ use crate::Task;
 use std::thread_local;
 
 #[cfg(not(feature = "std"))]
-use bevy_platform_support::sync::{Mutex, PoisonError};
+use bevy_platform::sync::{Mutex, PoisonError};
 
 #[cfg(feature = "std")]
 use crate::executor::LocalExecutor;
diff --git a/crates/bevy_tasks/src/task_pool.rs b/crates/bevy_tasks/src/task_pool.rs
index 819fbd1235053..25255a1e5d1d3 100644
--- a/crates/bevy_tasks/src/task_pool.rs
+++ b/crates/bevy_tasks/src/task_pool.rs
@@ -6,7 +6,7 @@ use std::{
 };
 
 use crate::executor::FallibleTask;
-use bevy_platform_support::sync::Arc;
+use bevy_platform::sync::Arc;
 use concurrent_queue::ConcurrentQueue;
 use futures_lite::FutureExt;
 
diff --git a/crates/bevy_tasks/src/usages.rs b/crates/bevy_tasks/src/usages.rs
index 9563007b0388e..8b08d5941c6bd 100644
--- a/crates/bevy_tasks/src/usages.rs
+++ b/crates/bevy_tasks/src/usages.rs
@@ -1,5 +1,5 @@
 use super::TaskPool;
-use bevy_platform_support::sync::OnceLock;
+use bevy_platform::sync::OnceLock;
 use core::ops::Deref;
 
 macro_rules! taskpool {
diff --git a/crates/bevy_text/Cargo.toml b/crates/bevy_text/Cargo.toml
index 8a09ac48ae5f6..b8748fb3244f4 100644
--- a/crates/bevy_text/Cargo.toml
+++ b/crates/bevy_text/Cargo.toml
@@ -27,7 +27,7 @@ bevy_sprite = { path = "../bevy_sprite", version = "0.16.0-dev" }
 bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
   "serialize",
 ] }
@@ -49,7 +49,7 @@ bevy_log = { path = "../bevy_log", version = "0.16.0-dev", default-features = fa
 bevy_app = { path = "../bevy_app", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-features = false, features = [
diff --git a/crates/bevy_text/src/font_atlas.rs b/crates/bevy_text/src/font_atlas.rs
index e14157cb38f8a..a10dee5923a32 100644
--- a/crates/bevy_text/src/font_atlas.rs
+++ b/crates/bevy_text/src/font_atlas.rs
@@ -1,7 +1,7 @@
 use bevy_asset::{Assets, Handle};
 use bevy_image::{prelude::*, ImageSampler};
 use bevy_math::{IVec2, UVec2};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_render::{
     render_asset::RenderAssetUsages,
     render_resource::{Extent3d, TextureDimension, TextureFormat},
diff --git a/crates/bevy_text/src/font_atlas_set.rs b/crates/bevy_text/src/font_atlas_set.rs
index 92b71ef535842..1a498127ba49d 100644
--- a/crates/bevy_text/src/font_atlas_set.rs
+++ b/crates/bevy_text/src/font_atlas_set.rs
@@ -2,7 +2,7 @@ use bevy_asset::{Asset, AssetEvent, AssetId, Assets};
 use bevy_ecs::{event::EventReader, resource::Resource, system::ResMut};
 use bevy_image::prelude::*;
 use bevy_math::{IVec2, UVec2};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::TypePath;
 use bevy_render::{
     render_asset::RenderAssetUsages,
diff --git a/crates/bevy_text/src/pipeline.rs b/crates/bevy_text/src/pipeline.rs
index de6ed5b244cf6..c1f9ca7fe4920 100644
--- a/crates/bevy_text/src/pipeline.rs
+++ b/crates/bevy_text/src/pipeline.rs
@@ -10,7 +10,7 @@ use bevy_ecs::{
 use bevy_image::prelude::*;
 use bevy_log::{once, warn};
 use bevy_math::{UVec2, Vec2};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 
 use cosmic_text::{Attrs, Buffer, Family, Metrics, Shaping, Wrap};
diff --git a/crates/bevy_time/Cargo.toml b/crates/bevy_time/Cargo.toml
index 253dc4b90e39c..520782b51990c 100644
--- a/crates/bevy_time/Cargo.toml
+++ b/crates/bevy_time/Cargo.toml
@@ -21,11 +21,7 @@ bevy_reflect = [
 ]
 
 ## Adds serialization support through `serde`.
-serialize = [
-  "dep:serde",
-  "bevy_ecs/serialize",
-  "bevy_platform_support/serialize",
-]
+serialize = ["dep:serde", "bevy_ecs/serialize", "bevy_platform/serialize"]
 
 # Platform Compatibility
 
@@ -37,7 +33,7 @@ std = [
   "bevy_reflect?/std",
   "bevy_ecs/std",
   "bevy_app/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
   "dep:crossbeam-channel",
 ]
 
@@ -45,7 +41,7 @@ std = [
 ## on all platforms, including `no_std`.
 critical-section = [
   "bevy_ecs/critical-section",
-  "bevy_platform_support/critical-section",
+  "bevy_platform/critical-section",
   "bevy_reflect?/critical-section",
   "bevy_app/critical-section",
 ]
@@ -55,7 +51,7 @@ critical-section = [
 bevy_app = { path = "../bevy_app", version = "0.16.0-dev", default-features = false }
 bevy_ecs = { path = "../bevy_ecs", version = "0.16.0-dev", default-features = false }
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-features = false, optional = true }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false }
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false }
 
 # other
 crossbeam-channel = { version = "0.5.0", default-features = false, features = [
diff --git a/crates/bevy_time/src/lib.rs b/crates/bevy_time/src/lib.rs
index d2648e6fd80b0..1ac297fafabce 100644
--- a/crates/bevy_time/src/lib.rs
+++ b/crates/bevy_time/src/lib.rs
@@ -41,7 +41,7 @@ use bevy_ecs::{
     event::{event_update_system, signal_event_update_system, EventRegistry, ShouldUpdateEvents},
     prelude::*,
 };
-use bevy_platform_support::time::Instant;
+use bevy_platform::time::Instant;
 use core::time::Duration;
 
 #[cfg(feature = "std")]
diff --git a/crates/bevy_time/src/real.rs b/crates/bevy_time/src/real.rs
index 8470099788544..cf35fa3e9dfe6 100644
--- a/crates/bevy_time/src/real.rs
+++ b/crates/bevy_time/src/real.rs
@@ -1,4 +1,4 @@
-use bevy_platform_support::time::Instant;
+use bevy_platform::time::Instant;
 #[cfg(feature = "bevy_reflect")]
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use core::time::Duration;
diff --git a/crates/bevy_time/src/time.rs b/crates/bevy_time/src/time.rs
index 3b5dbc8e26633..d0845e22d3d76 100644
--- a/crates/bevy_time/src/time.rs
+++ b/crates/bevy_time/src/time.rs
@@ -160,7 +160,7 @@ use {
 /// ```
 /// # use bevy_ecs::prelude::*;
 /// # use bevy_time::prelude::*;
-/// # use bevy_platform_support::time::Instant;
+/// # use bevy_platform::time::Instant;
 /// #
 /// #[derive(Debug)]
 /// struct Custom {
diff --git a/crates/bevy_ui/Cargo.toml b/crates/bevy_ui/Cargo.toml
index c19a6dcdba0d9..eb1e9ed0da698 100644
--- a/crates/bevy_ui/Cargo.toml
+++ b/crates/bevy_ui/Cargo.toml
@@ -28,7 +28,7 @@ bevy_picking = { path = "../bevy_picking", version = "0.16.0-dev", optional = tr
 bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
@@ -49,7 +49,7 @@ serialize = [
   "serde",
   "smallvec/serde",
   "bevy_math/serialize",
-  "bevy_platform_support/serialize",
+  "bevy_platform/serialize",
 ]
 bevy_ui_picking_backend = ["bevy_picking"]
 bevy_ui_debug = []
diff --git a/crates/bevy_ui/src/focus.rs b/crates/bevy_ui/src/focus.rs
index c974ab1be5325..9242bf1380a38 100644
--- a/crates/bevy_ui/src/focus.rs
+++ b/crates/bevy_ui/src/focus.rs
@@ -9,7 +9,7 @@ use bevy_ecs::{
 };
 use bevy_input::{mouse::MouseButton, touch::Touches, ButtonInput};
 use bevy_math::{Rect, Vec2};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render::{camera::NormalizedRenderTarget, prelude::Camera, view::InheritedVisibility};
 use bevy_transform::components::GlobalTransform;
diff --git a/crates/bevy_ui/src/layout/debug.rs b/crates/bevy_ui/src/layout/debug.rs
index 2a8b371320482..800faa1cd335f 100644
--- a/crates/bevy_ui/src/layout/debug.rs
+++ b/crates/bevy_ui/src/layout/debug.rs
@@ -3,7 +3,7 @@ use core::fmt::Write;
 use taffy::{NodeId, TraversePartialTree};
 
 use bevy_ecs::prelude::Entity;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 
 use crate::layout::ui_surface::UiSurface;
 
diff --git a/crates/bevy_ui/src/layout/mod.rs b/crates/bevy_ui/src/layout/mod.rs
index cf1f5acd335e8..1c1c60ea8fd90 100644
--- a/crates/bevy_ui/src/layout/mod.rs
+++ b/crates/bevy_ui/src/layout/mod.rs
@@ -351,7 +351,7 @@ mod tests {
     use bevy_ecs::{prelude::*, system::RunSystemOnce};
     use bevy_image::Image;
     use bevy_math::{Rect, UVec2, Vec2};
-    use bevy_platform_support::collections::HashMap;
+    use bevy_platform::collections::HashMap;
     use bevy_render::{camera::ManualTextureViews, prelude::Camera};
     use bevy_transform::systems::mark_dirty_trees;
     use bevy_transform::{
diff --git a/crates/bevy_ui/src/layout/ui_surface.rs b/crates/bevy_ui/src/layout/ui_surface.rs
index a9322de53e87e..a4af6737a79dc 100644
--- a/crates/bevy_ui/src/layout/ui_surface.rs
+++ b/crates/bevy_ui/src/layout/ui_surface.rs
@@ -1,6 +1,6 @@
 use core::fmt;
 
-use bevy_platform_support::collections::hash_map::Entry;
+use bevy_platform::collections::hash_map::Entry;
 use taffy::TaffyTree;
 
 use bevy_ecs::{
diff --git a/crates/bevy_ui/src/picking_backend.rs b/crates/bevy_ui/src/picking_backend.rs
index f0b84128543ce..d0b60d9a469a9 100644
--- a/crates/bevy_ui/src/picking_backend.rs
+++ b/crates/bevy_ui/src/picking_backend.rs
@@ -28,7 +28,7 @@ use crate::{focus::pick_rounded_rect, prelude::*, UiStack};
 use bevy_app::prelude::*;
 use bevy_ecs::{prelude::*, query::QueryData};
 use bevy_math::{Rect, Vec2};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render::prelude::*;
 use bevy_transform::prelude::*;
diff --git a/crates/bevy_ui/src/render/mod.rs b/crates/bevy_ui/src/render/mod.rs
index 6f691d4163686..8cb61cde217e8 100644
--- a/crates/bevy_ui/src/render/mod.rs
+++ b/crates/bevy_ui/src/render/mod.rs
@@ -50,7 +50,7 @@ use bevy_sprite::{BorderRect, SpriteAssetEvents};
 pub use debug_overlay::UiDebugOptions;
 
 use crate::{Display, Node};
-use bevy_platform_support::collections::{HashMap, HashSet};
+use bevy_platform::collections::{HashMap, HashSet};
 use bevy_text::{ComputedTextBlock, PositionedGlyph, TextColor, TextLayoutInfo};
 use bevy_transform::components::GlobalTransform;
 use box_shadow::BoxShadowPlugin;
diff --git a/crates/bevy_ui/src/render/ui_texture_slice_pipeline.rs b/crates/bevy_ui/src/render/ui_texture_slice_pipeline.rs
index dee19ad8674d6..d8da926709c82 100644
--- a/crates/bevy_ui/src/render/ui_texture_slice_pipeline.rs
+++ b/crates/bevy_ui/src/render/ui_texture_slice_pipeline.rs
@@ -12,7 +12,7 @@ use bevy_ecs::{
 };
 use bevy_image::prelude::*;
 use bevy_math::{FloatOrd, Mat4, Rect, Vec2, Vec4Swizzles};
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_render::sync_world::MainEntity;
 use bevy_render::{
     render_asset::RenderAssets,
diff --git a/crates/bevy_ui/src/stack.rs b/crates/bevy_ui/src/stack.rs
index c8dfde318d5d2..d50311cbce9ed 100644
--- a/crates/bevy_ui/src/stack.rs
+++ b/crates/bevy_ui/src/stack.rs
@@ -1,7 +1,7 @@
 //! This module contains the systems that update the stored UI nodes stack
 
 use bevy_ecs::prelude::*;
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 
 use crate::{
     experimental::{UiChildren, UiRootNodes},
diff --git a/crates/bevy_utils/Cargo.toml b/crates/bevy_utils/Cargo.toml
index 2e8e9dc31494f..39ba4629a5094 100644
--- a/crates/bevy_utils/Cargo.toml
+++ b/crates/bevy_utils/Cargo.toml
@@ -14,24 +14,24 @@ default = ["std", "serde"]
 # Functionality
 
 ## Adds serialization support through `serde`.
-serde = ["bevy_platform_support/serialize"]
+serde = ["bevy_platform/serialize"]
 
 # Platform Compatibility
 
 ## Allows access to the `std` crate. Enabling this feature will prevent compilation
 ## on `no_std` targets, but provides access to certain additional features on
 ## supported platforms.
-std = ["alloc", "bevy_platform_support/std", "dep:thread_local"]
+std = ["alloc", "bevy_platform/std", "dep:thread_local"]
 
 ## Allows access to the `alloc` crate.
-alloc = ["bevy_platform_support/alloc"]
+alloc = ["bevy_platform/alloc"]
 
 ## `critical-section` provides the building blocks for synchronization primitives
 ## on all platforms, including `no_std`.
-critical-section = ["bevy_platform_support/critical-section"]
+critical-section = ["bevy_platform/critical-section"]
 
 [dependencies]
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false }
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false }
 
 thread_local = { version = "1.0", optional = true }
 
diff --git a/crates/bevy_utils/src/lib.rs b/crates/bevy_utils/src/lib.rs
index 4b7d91a40eee2..9f564f14c2f63 100644
--- a/crates/bevy_utils/src/lib.rs
+++ b/crates/bevy_utils/src/lib.rs
@@ -42,7 +42,7 @@ use core::mem::ManuallyDrop;
 
 #[cfg(feature = "alloc")]
 use {
-    bevy_platform_support::{
+    bevy_platform::{
         collections::HashMap,
         hash::{Hashed, NoOpHash, PassHash},
     },
@@ -67,7 +67,7 @@ pub trait PreHashMapExt<K, V> {
 impl<K: Hash + Eq + PartialEq + Clone, V> PreHashMapExt<K, V> for PreHashMap<K, V> {
     #[inline]
     fn get_or_insert_with<F: FnOnce() -> V>(&mut self, key: &Hashed<K>, func: F) -> &mut V {
-        use bevy_platform_support::collections::hash_map::RawEntryMut;
+        use bevy_platform::collections::hash_map::RawEntryMut;
         let entry = self
             .raw_entry_mut()
             .from_key_hashed_nocheck(key.hash(), key);
diff --git a/crates/bevy_utils/src/once.rs b/crates/bevy_utils/src/once.rs
index 674926ec53575..f36b1077a2954 100644
--- a/crates/bevy_utils/src/once.rs
+++ b/crates/bevy_utils/src/once.rs
@@ -1,4 +1,4 @@
-use bevy_platform_support::sync::atomic::{AtomicBool, Ordering};
+use bevy_platform::sync::atomic::{AtomicBool, Ordering};
 
 /// Wrapper around an [`AtomicBool`], abstracting the backing implementation and
 /// ordering considerations.
diff --git a/crates/bevy_window/Cargo.toml b/crates/bevy_window/Cargo.toml
index 2920c88361221..b2b6d730fe129 100644
--- a/crates/bevy_window/Cargo.toml
+++ b/crates/bevy_window/Cargo.toml
@@ -42,7 +42,7 @@ std = [
   "bevy_reflect?/std",
   "serde?/std",
   "raw-window-handle/std",
-  "bevy_platform_support/std",
+  "bevy_platform/std",
 ]
 
 ## Uses the `libm` maths library instead of the one provided in `std` and `core`.
@@ -59,7 +59,7 @@ bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-featu
   "smol_str",
 ], optional = true }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev", default-features = false }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false }
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false }
 
 # other
 serde = { version = "1.0", features = [
diff --git a/crates/bevy_window/src/lib.rs b/crates/bevy_window/src/lib.rs
index f54a59a09b6b8..21ee8d64c918d 100644
--- a/crates/bevy_window/src/lib.rs
+++ b/crates/bevy_window/src/lib.rs
@@ -19,7 +19,7 @@ extern crate alloc;
 
 use alloc::sync::Arc;
 
-use bevy_platform_support::sync::Mutex;
+use bevy_platform::sync::Mutex;
 
 mod event;
 mod monitor;
diff --git a/crates/bevy_window/src/raw_handle.rs b/crates/bevy_window/src/raw_handle.rs
index 3894eb283e944..545c220931636 100644
--- a/crates/bevy_window/src/raw_handle.rs
+++ b/crates/bevy_window/src/raw_handle.rs
@@ -5,7 +5,7 @@
 
 use alloc::sync::Arc;
 use bevy_ecs::prelude::Component;
-use bevy_platform_support::sync::Mutex;
+use bevy_platform::sync::Mutex;
 use core::{any::Any, marker::PhantomData, ops::Deref};
 use raw_window_handle::{
     DisplayHandle, HandleError, HasDisplayHandle, HasWindowHandle, RawDisplayHandle,
diff --git a/crates/bevy_window/src/window.rs b/crates/bevy_window/src/window.rs
index 44eee7cb9c4fa..e09e254d40015 100644
--- a/crates/bevy_window/src/window.rs
+++ b/crates/bevy_window/src/window.rs
@@ -6,7 +6,7 @@ use bevy_ecs::{
     prelude::Component,
 };
 use bevy_math::{CompassOctant, DVec2, IVec2, UVec2, Vec2};
-use bevy_platform_support::sync::LazyLock;
+use bevy_platform::sync::LazyLock;
 use log::warn;
 
 #[cfg(feature = "bevy_reflect")]
diff --git a/crates/bevy_winit/Cargo.toml b/crates/bevy_winit/Cargo.toml
index 32e2bb3120247..1214dab135767 100644
--- a/crates/bevy_winit/Cargo.toml
+++ b/crates/bevy_winit/Cargo.toml
@@ -19,7 +19,7 @@ serialize = [
   "serde",
   "bevy_input/serialize",
   "bevy_window/serialize",
-  "bevy_platform_support/serialize",
+  "bevy_platform/serialize",
 ]
 android-native-activity = ["winit/android-native-activity"]
 android-game-activity = ["winit/android-game-activity"]
@@ -40,7 +40,7 @@ bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev" }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "std",
 ] }
 
@@ -74,7 +74,7 @@ bevy_app = { path = "../bevy_app", version = "0.16.0-dev", default-features = fa
 bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
-bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
+bevy_platform = { path = "../bevy_platform", version = "0.16.0-dev", default-features = false, features = [
   "web",
 ] }
 bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-features = false, features = [
diff --git a/crates/bevy_winit/src/cursor.rs b/crates/bevy_winit/src/cursor.rs
index de075811416fc..f45b7f00d6915 100644
--- a/crates/bevy_winit/src/cursor.rs
+++ b/crates/bevy_winit/src/cursor.rs
@@ -30,7 +30,7 @@ use bevy_ecs::{
 };
 #[cfg(feature = "custom_cursor")]
 use bevy_image::{Image, TextureAtlasLayout};
-use bevy_platform_support::collections::HashSet;
+use bevy_platform::collections::HashSet;
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_window::{SystemCursorIcon, Window};
 #[cfg(feature = "custom_cursor")]
diff --git a/crates/bevy_winit/src/state.rs b/crates/bevy_winit/src/state.rs
index f2e2a09a6ee8f..33ad693c5ab4a 100644
--- a/crates/bevy_winit/src/state.rs
+++ b/crates/bevy_winit/src/state.rs
@@ -23,8 +23,8 @@ use bevy_log::{trace, warn};
 use bevy_math::URect;
 use bevy_math::{ivec2, DVec2, Vec2};
 #[cfg(feature = "custom_cursor")]
-use bevy_platform_support::collections::HashMap;
-use bevy_platform_support::time::Instant;
+use bevy_platform::collections::HashMap;
+use bevy_platform::time::Instant;
 #[cfg(not(target_arch = "wasm32"))]
 use bevy_tasks::tick_global_task_pools_on_main_thread;
 use core::marker::PhantomData;
diff --git a/crates/bevy_winit/src/winit_windows.rs b/crates/bevy_winit/src/winit_windows.rs
index 5bb816213201d..119da10fe1bb3 100644
--- a/crates/bevy_winit/src/winit_windows.rs
+++ b/crates/bevy_winit/src/winit_windows.rs
@@ -2,7 +2,7 @@ use bevy_a11y::AccessibilityRequested;
 use bevy_ecs::entity::Entity;
 
 use bevy_ecs::entity::EntityHashMap;
-use bevy_platform_support::collections::HashMap;
+use bevy_platform::collections::HashMap;
 use bevy_window::{
     CursorGrabMode, MonitorSelection, VideoModeSelection, Window, WindowMode, WindowPosition,
     WindowResolution, WindowWrapper,
diff --git a/examples/3d/tonemapping.rs b/examples/3d/tonemapping.rs
index e68e0d837c3f3..2fb671c0f6d9a 100644
--- a/examples/3d/tonemapping.rs
+++ b/examples/3d/tonemapping.rs
@@ -3,7 +3,7 @@
 use bevy::{
     core_pipeline::tonemapping::Tonemapping,
     pbr::CascadeShadowConfigBuilder,
-    platform_support::collections::HashMap,
+    platform::collections::HashMap,
     prelude::*,
     reflect::TypePath,
     render::{
diff --git a/examples/ecs/immutable_components.rs b/examples/ecs/immutable_components.rs
index 6fd434f446f13..5f4f2db8c4a14 100644
--- a/examples/ecs/immutable_components.rs
+++ b/examples/ecs/immutable_components.rs
@@ -7,7 +7,7 @@ use bevy::{
         },
         world::DeferredWorld,
     },
-    platform_support::collections::HashMap,
+    platform::collections::HashMap,
     prelude::*,
     ptr::OwningPtr,
 };
diff --git a/examples/ecs/observers.rs b/examples/ecs/observers.rs
index 4cd781e5cdb1c..41a2e5dd07ec8 100644
--- a/examples/ecs/observers.rs
+++ b/examples/ecs/observers.rs
@@ -1,7 +1,7 @@
 //! Demonstrates how to observe life-cycle triggers as well as define custom ones.
 
 use bevy::{
-    platform_support::collections::{HashMap, HashSet},
+    platform::collections::{HashMap, HashSet},
     prelude::*,
 };
 use rand::{Rng, SeedableRng};
diff --git a/examples/no_std/library/src/lib.rs b/examples/no_std/library/src/lib.rs
index bb10363ce0584..c8aa35d799e73 100644
--- a/examples/no_std/library/src/lib.rs
+++ b/examples/no_std/library/src/lib.rs
@@ -38,11 +38,11 @@ use core::time::Duration;
 use bevy::prelude::*;
 
 // While this example doesn't need it, a lot of fundamental types which are exclusively in `std`
-// have alternatives in `bevy::platform_support`.
+// have alternatives in `bevy::platform`.
 // If you find yourself needing a `HashMap`, `RwLock`, or `Instant`, check there first!
 
 #[expect(unused_imports, reason = "demonstrating some available items")]
-use bevy::platform_support::{
+use bevy::platform::{
     collections::{HashMap, HashSet},
     hash::DefaultHasher,
     sync::{
@@ -52,12 +52,12 @@ use bevy::platform_support::{
     time::Instant,
 };
 
-// Note that `bevy::platform_support::sync::Arc` exists, despite `alloc::sync::Arc` being available.
+// Note that `bevy::platform::sync::Arc` exists, despite `alloc::sync::Arc` being available.
 // The reason is not every platform has full support for atomic operations, so `Arc`, `AtomicBool`,
 // etc. aren't always available.
 // You can test for their inclusion with `#[cfg(target_has_atomic = "ptr")]` and other related flags.
 // You can get a more cross-platform alternative from `portable-atomic`, but Bevy handles this for you!
-// Simply use `bevy::platform_support::sync` instead of `core::sync` and `alloc::sync` when possible,
+// Simply use `bevy::platform::sync` instead of `core::sync` and `alloc::sync` when possible,
 // and Bevy will handle selecting the fallback from `portable-atomic` when it is required.
 
 /// Plugin for working with delayed components.
diff --git a/examples/reflection/reflection_types.rs b/examples/reflection/reflection_types.rs
index 427034056f1b4..291eb7bd5c5df 100644
--- a/examples/reflection/reflection_types.rs
+++ b/examples/reflection/reflection_types.rs
@@ -2,7 +2,7 @@
 //! structs, tuples and vectors.
 
 use bevy::{
-    platform_support::collections::HashMap,
+    platform::collections::HashMap,
     prelude::*,
     reflect::{DynamicList, PartialReflect, ReflectRef},
 };
diff --git a/examples/shader/custom_render_phase.rs b/examples/shader/custom_render_phase.rs
index 47aad1b88faef..269214369188d 100644
--- a/examples/shader/custom_render_phase.rs
+++ b/examples/shader/custom_render_phase.rs
@@ -23,7 +23,7 @@ use bevy::{
         DrawMesh, MeshInputUniform, MeshPipeline, MeshPipelineKey, MeshPipelineViewLayoutKey,
         MeshUniform, RenderMeshInstances, SetMeshBindGroup, SetMeshViewBindGroup,
     },
-    platform_support::collections::HashSet,
+    platform::collections::HashSet,
     prelude::*,
     render::{
         batching::{
diff --git a/examples/testbed/helpers.rs b/examples/testbed/helpers.rs
index 6172267d7d8a2..45ed4e03d9b72 100644
--- a/examples/testbed/helpers.rs
+++ b/examples/testbed/helpers.rs
@@ -2,7 +2,7 @@
 use bevy::{
     dev_tools::ci_testing::{CiTestingConfig, CiTestingEvent, CiTestingEventOnFrame},
     diagnostic::FrameCount,
-    platform_support::collections::HashSet,
+    platform::collections::HashSet,
     prelude::*,
     render::view::screenshot::Captured,
     state::state::FreelyMutableState,
diff --git a/examples/ui/directional_navigation.rs b/examples/ui/directional_navigation.rs
index 0512c7498db54..937970915cda2 100644
--- a/examples/ui/directional_navigation.rs
+++ b/examples/ui/directional_navigation.rs
@@ -19,7 +19,7 @@ use bevy::{
         backend::HitData,
         pointer::{Location, PointerId},
     },
-    platform_support::collections::{HashMap, HashSet},
+    platform::collections::{HashMap, HashSet},
     prelude::*,
     render::camera::NormalizedRenderTarget,
 };
diff --git a/tests/ecs/ambiguity_detection.rs b/tests/ecs/ambiguity_detection.rs
index c77c0e5edb8d4..1b9271b16112f 100644
--- a/tests/ecs/ambiguity_detection.rs
+++ b/tests/ecs/ambiguity_detection.rs
@@ -6,7 +6,7 @@
 
 use bevy::{
     ecs::schedule::{InternedScheduleLabel, LogLevel, ScheduleBuildSettings},
-    platform_support::collections::HashMap,
+    platform::collections::HashMap,
     prelude::*,
     render::pipelined_rendering::RenderExtractApp,
 };

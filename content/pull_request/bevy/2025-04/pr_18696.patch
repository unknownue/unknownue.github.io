diff --git a/crates/bevy_color/src/color_ops.rs b/crates/bevy_color/src/color_ops.rs
index 60a535d9fe7da..776ee906f9fb7 100644
--- a/crates/bevy_color/src/color_ops.rs
+++ b/crates/bevy_color/src/color_ops.rs
@@ -60,7 +60,7 @@ pub trait Alpha: Sized {
     /// Return a new version of this color with the given alpha value.
     fn with_alpha(&self, alpha: f32) -> Self;
 
-    /// Return a the alpha component of this color.
+    /// Return the alpha component of this color.
     fn alpha(&self) -> f32;
 
     /// Sets the alpha component of this color.
diff --git a/crates/bevy_picking/src/events.rs b/crates/bevy_picking/src/events.rs
index 71f0817557284..ec2c49274b80e 100644
--- a/crates/bevy_picking/src/events.rs
+++ b/crates/bevy_picking/src/events.rs
@@ -152,7 +152,7 @@ pub struct Cancel {
     pub hit: HitData,
 }
 
-/// Fires when a the pointer crosses into the bounds of the `target` entity.
+/// Fires when a pointer crosses into the bounds of the `target` entity.
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Over {
@@ -160,7 +160,7 @@ pub struct Over {
     pub hit: HitData,
 }
 
-/// Fires when a the pointer crosses out of the bounds of the `target` entity.
+/// Fires when a pointer crosses out of the bounds of the `target` entity.
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Out {
diff --git a/examples/transforms/transform.rs b/examples/transforms/transform.rs
index e0e644004c6f1..858e848edd572 100644
--- a/examples/transforms/transform.rs
+++ b/examples/transforms/transform.rs
@@ -113,7 +113,7 @@ fn rotate_cube(
         // Calculate the rotation of the cube if it would be looking at the sphere in the center.
         let look_at_sphere = transform.looking_at(center, *transform.local_y());
         // Interpolate between the current rotation and the fully turned rotation
-        // when looking a the sphere,  with a given turn speed to get a smooth motion.
+        // when looking at the sphere, with a given turn speed to get a smooth motion.
         // With higher speed the curvature of the orbit would be smaller.
         let incremental_turn_weight = cube.turn_speed * timer.delta_secs();
         let old_rotation = transform.rotation;

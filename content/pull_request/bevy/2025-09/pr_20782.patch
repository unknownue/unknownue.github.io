diff --git a/crates/bevy_pbr/src/light_probe/mod.rs b/crates/bevy_pbr/src/light_probe/mod.rs
index c6249a0fada88..2a51bdd3def94 100644
--- a/crates/bevy_pbr/src/light_probe/mod.rs
+++ b/crates/bevy_pbr/src/light_probe/mod.rs
@@ -143,7 +143,10 @@ where
     C: LightProbeComponent,
 {
     // The transform from world space to light probe space.
-    light_from_world: Affine3A,
+    // Stored as the transpose of the inverse transform to compress the structure
+    // on the GPU (from 4 `Vec4`s to 3 `Vec4`s). The shader will transpose it
+    // to recover the original inverse transform.
+    light_from_world: [Vec4; 3],
 
     // The transform from light probe space to world space.
     world_from_light: Affine3A,
@@ -360,7 +363,6 @@ fn gather_light_probes<C>(
             .iter()
             .filter_map(|query_row| LightProbeInfo::new(query_row, &image_assets)),
     );
-
     // Build up the light probes uniform and the key table.
     for (view_entity, view_transform, view_frustum, view_component) in view_query.iter() {
         // Cull light probes outside the view frustum.
@@ -541,9 +543,15 @@ where
         (light_probe_transform, environment_map): (&GlobalTransform, &C),
         image_assets: &RenderAssets<GpuImage>,
     ) -> Option<LightProbeInfo<C>> {
+        let light_from_world_transposed =
+            Mat4::from(light_probe_transform.affine().inverse()).transpose();
         environment_map.id(image_assets).map(|id| LightProbeInfo {
             world_from_light: light_probe_transform.affine(),
-            light_from_world: light_probe_transform.affine().inverse(),
+            light_from_world: [
+                light_from_world_transposed.x_axis,
+                light_from_world_transposed.y_axis,
+                light_from_world_transposed.z_axis,
+            ],
             asset_id: id,
             intensity: environment_map.intensity(),
             affects_lightmapped_mesh_diffuse: environment_map.affects_lightmapped_mesh_diffuse(),
@@ -630,18 +638,9 @@ where
             // Determine the index of the cubemap in the binding array.
             let cubemap_index = self.get_or_insert_cubemap(&light_probe.asset_id);
 
-            // Transpose the inverse transform to compress the structure on the
-            // GPU (from 4 `Vec4`s to 3 `Vec4`s). The shader will transpose it
-            // to recover the original inverse transform.
-            let light_from_world_transposed = Mat4::from(light_probe.light_from_world).transpose();
-
             // Write in the light probe data.
             self.render_light_probes.push(RenderLightProbe {
-                light_from_world_transposed: [
-                    light_from_world_transposed.x_axis,
-                    light_from_world_transposed.y_axis,
-                    light_from_world_transposed.z_axis,
-                ],
+                light_from_world_transposed: light_probe.light_from_world,
                 texture_index: cubemap_index as i32,
                 intensity: light_probe.intensity,
                 affects_lightmapped_mesh_diffuse: light_probe.affects_lightmapped_mesh_diffuse

diff --git a/examples/2d/sprite_scale.rs b/examples/2d/sprite_scale.rs
index 2ee3f05828507..0194db7c81e94 100644
--- a/examples/2d/sprite_scale.rs
+++ b/examples/2d/sprite_scale.rs
@@ -113,7 +113,7 @@ fn setup_sprites(mut commands: Commands, asset_server: Res<AssetServer>) {
     ];
 
     for rect in rects {
-        let mut cmd = commands.spawn((
+        commands.spawn((
             Sprite {
                 image: rect.texture,
                 custom_size: Some(rect.size),
@@ -121,17 +121,14 @@ fn setup_sprites(mut commands: Commands, asset_server: Res<AssetServer>) {
                 ..default()
             },
             rect.transform,
-        ));
-
-        cmd.with_children(|builder| {
-            builder.spawn((
+            children![(
                 Text2d::new(rect.text),
                 TextLayout::new_with_justify(Justify::Center),
                 TextFont::from_font_size(15.),
                 Transform::from_xyz(0., -0.5 * rect.size.y - 10., 0.),
                 bevy::sprite::Anchor::TOP_CENTER,
-            ));
-        });
+            )],
+        ));
     }
 }
 
@@ -257,7 +254,7 @@ fn setup_texture_atlas(
     ];
 
     for sprite_sheet in sprite_sheets {
-        let mut cmd = commands.spawn((
+        commands.spawn((
             Sprite {
                 image_mode: sprite_sheet.image_mode,
                 custom_size: Some(sprite_sheet.size),
@@ -266,17 +263,14 @@ fn setup_texture_atlas(
             sprite_sheet.indices,
             sprite_sheet.timer,
             sprite_sheet.transform,
-        ));
-
-        cmd.with_children(|builder| {
-            builder.spawn((
+            children![(
                 Text2d::new(sprite_sheet.text),
                 TextLayout::new_with_justify(Justify::Center),
                 TextFont::from_font_size(15.),
                 Transform::from_xyz(0., -0.5 * sprite_sheet.size.y - 10., 0.),
                 bevy::sprite::Anchor::TOP_CENTER,
-            ));
-        });
+            )],
+        ));
     }
 }
 
diff --git a/examples/2d/text2d.rs b/examples/2d/text2d.rs
index f1b5685ec757d..c51be59a1d1ac 100644
--- a/examples/2d/text2d.rs
+++ b/examples/2d/text2d.rs
@@ -132,44 +132,44 @@ fn setup(mut commands: Commands, asset_server: Res<AssetServer>) {
         Text2dShadow::default(),
     ));
 
-    commands
-        .spawn((
-            Sprite {
-                color: Color::Srgba(LIGHT_CYAN),
-                custom_size: Some(Vec2::new(10., 10.)),
-                ..Default::default()
-            },
-            Transform::from_translation(250. * Vec3::Y),
-        ))
-        .with_children(|commands| {
-            for (text_anchor, color) in [
-                (Anchor::TOP_LEFT, Color::Srgba(LIGHT_SALMON)),
-                (Anchor::TOP_RIGHT, Color::Srgba(LIGHT_GREEN)),
-                (Anchor::BOTTOM_RIGHT, Color::Srgba(LIGHT_BLUE)),
-                (Anchor::BOTTOM_LEFT, Color::Srgba(LIGHT_YELLOW)),
-            ] {
-                commands
-                    .spawn((
-                        Text2d::new(" Anchor".to_string()),
-                        slightly_smaller_text_font.clone(),
-                        text_anchor,
-                        TextBackgroundColor(Color::WHITE.darker(0.8)),
-                        Transform::from_translation(-1. * Vec3::Z),
-                    ))
-                    .with_child((
-                        TextSpan("::".to_string()),
-                        slightly_smaller_text_font.clone(),
-                        TextColor(LIGHT_GREY.into()),
-                        TextBackgroundColor(DARK_BLUE.into()),
-                    ))
-                    .with_child((
-                        TextSpan(format!("{text_anchor:?} ")),
-                        slightly_smaller_text_font.clone(),
-                        TextColor(color),
-                        TextBackgroundColor(color.darker(0.3)),
-                    ));
-            }
-        });
+    let make_child = move |(text_anchor, color): (Anchor, Color)| {
+        (
+            Text2d::new(" Anchor".to_string()),
+            slightly_smaller_text_font.clone(),
+            text_anchor,
+            TextBackgroundColor(Color::WHITE.darker(0.8)),
+            Transform::from_translation(-1. * Vec3::Z),
+            children![
+                (
+                    TextSpan("::".to_string()),
+                    slightly_smaller_text_font.clone(),
+                    TextColor(LIGHT_GREY.into()),
+                    TextBackgroundColor(DARK_BLUE.into()),
+                ),
+                (
+                    TextSpan(format!("{text_anchor:?} ")),
+                    slightly_smaller_text_font.clone(),
+                    TextColor(color),
+                    TextBackgroundColor(color.darker(0.3)),
+                )
+            ],
+        )
+    };
+
+    commands.spawn((
+        Sprite {
+            color: Color::Srgba(LIGHT_CYAN),
+            custom_size: Some(Vec2::new(10., 10.)),
+            ..Default::default()
+        },
+        Transform::from_translation(250. * Vec3::Y),
+        children![
+            make_child((Anchor::TOP_LEFT, Color::Srgba(LIGHT_SALMON))),
+            make_child((Anchor::TOP_RIGHT, Color::Srgba(LIGHT_GREEN))),
+            make_child((Anchor::BOTTOM_RIGHT, Color::Srgba(LIGHT_BLUE))),
+            make_child((Anchor::BOTTOM_LEFT, Color::Srgba(LIGHT_YELLOW))),
+        ],
+    ));
 }
 
 fn animate_translation(
diff --git a/examples/animation/animated_transform.rs b/examples/animation/animated_transform.rs
index decb3d34a69df..1b045f5f4d303 100644
--- a/examples/animation/animated_transform.rs
+++ b/examples/animation/animated_transform.rs
@@ -151,35 +151,29 @@ fn setup(
             player,
         ))
         .id();
-    commands
-        .entity(planet_entity)
-        .insert(AnimationTarget {
+    commands.entity(planet_entity).insert((
+        AnimationTarget {
             id: planet_animation_target_id,
             player: planet_entity,
-        })
-        .with_children(|p| {
-            // This entity is just used for animation, but doesn't display anything
-            p.spawn((
-                Transform::default(),
-                Visibility::default(),
-                orbit_controller,
+        },
+        children![(
+            Transform::default(),
+            Visibility::default(),
+            orbit_controller,
+            AnimationTarget {
+                id: orbit_controller_animation_target_id,
+                player: planet_entity,
+            },
+            children![(
+                Mesh3d(meshes.add(Cuboid::new(0.5, 0.5, 0.5))),
+                MeshMaterial3d(materials.add(Color::srgb(0.3, 0.9, 0.3))),
+                Transform::from_xyz(1.5, 0.0, 0.0),
                 AnimationTarget {
-                    id: orbit_controller_animation_target_id,
+                    id: satellite_animation_target_id,
                     player: planet_entity,
                 },
-            ))
-            .with_children(|p| {
-                // The satellite, placed at a distance of the planet
-                p.spawn((
-                    Mesh3d(meshes.add(Cuboid::new(0.5, 0.5, 0.5))),
-                    MeshMaterial3d(materials.add(Color::srgb(0.3, 0.9, 0.3))),
-                    Transform::from_xyz(1.5, 0.0, 0.0),
-                    AnimationTarget {
-                        id: satellite_animation_target_id,
-                        player: planet_entity,
-                    },
-                    satellite,
-                ));
-            });
-        });
+                satellite,
+            )],
+        )],
+    ));
 }
diff --git a/examples/animation/animated_ui.rs b/examples/animation/animated_ui.rs
index b0d84bb853726..546577d82ae49 100644
--- a/examples/animation/animated_ui.rs
+++ b/examples/animation/animated_ui.rs
@@ -123,43 +123,38 @@ fn setup(
     // Build the UI. We have a parent node that covers the whole screen and
     // contains the `AnimationPlayer`, as well as a child node that contains the
     // text to be animated.
-    commands
-        .spawn((
-            // Cover the whole screen, and center contents.
-            Node {
-                position_type: PositionType::Absolute,
-                top: px(0),
-                left: px(0),
-                right: px(0),
-                bottom: px(0),
-                justify_content: JustifyContent::Center,
-                align_items: AlignItems::Center,
-                ..default()
-            },
-            animation_player,
-            AnimationGraphHandle(animation_graph),
-        ))
-        .with_children(|builder| {
-            // Build the text node.
-            let player = builder.target_entity();
-            builder
-                .spawn((
-                    Text::new("Bevy"),
-                    TextFont {
-                        font: asset_server.load("fonts/FiraSans-Bold.ttf"),
-                        font_size: 24.0,
-                        ..default()
-                    },
-                    TextColor(Color::Srgba(Srgba::RED)),
-                    TextLayout::new_with_justify(Justify::Center),
-                ))
-                // Mark as an animation target.
-                .insert(AnimationTarget {
-                    id: animation_target_id,
-                    player,
-                })
-                .insert(animation_target_name);
-        });
+    let mut entity = commands.spawn((
+        // Cover the whole screen, and center contents.
+        Node {
+            position_type: PositionType::Absolute,
+            top: px(0),
+            left: px(0),
+            right: px(0),
+            bottom: px(0),
+            justify_content: JustifyContent::Center,
+            align_items: AlignItems::Center,
+            ..default()
+        },
+        animation_player,
+        AnimationGraphHandle(animation_graph),
+    ));
+
+    let player = entity.id();
+    entity.insert(children![(
+        Text::new("Bevy"),
+        TextFont {
+            font: asset_server.load("fonts/FiraSans-Bold.ttf"),
+            font_size: 24.0,
+            ..default()
+        },
+        TextColor(Color::Srgba(Srgba::RED)),
+        TextLayout::new_with_justify(Justify::Center),
+        AnimationTarget {
+            id: animation_target_id,
+            player,
+        },
+        animation_target_name,
+    )]);
 }
 
 // A type that represents the color of the first text section.
diff --git a/examples/animation/animation_masks.rs b/examples/animation/animation_masks.rs
index 26380000ad7c1..c908dd7b5f0ae 100644
--- a/examples/animation/animation_masks.rs
+++ b/examples/animation/animation_masks.rs
@@ -168,68 +168,65 @@ fn setup_ui(mut commands: Commands) {
     ));
 
     // Add the buttons that allow the user to toggle mask groups on and off.
-    commands
-        .spawn(Node {
+    commands.spawn((
+        Node {
             flex_direction: FlexDirection::Column,
             position_type: PositionType::Absolute,
             row_gap: px(6),
             left: px(12),
             bottom: px(12),
             ..default()
-        })
-        .with_children(|parent| {
-            let row_node = Node {
-                flex_direction: FlexDirection::Row,
-                column_gap: px(6),
-                ..default()
-            };
-
-            add_mask_group_control(parent, "Head", auto(), MASK_GROUP_HEAD);
-
-            parent.spawn(row_node.clone()).with_children(|parent| {
-                add_mask_group_control(
-                    parent,
-                    "Left Front Leg",
-                    px(MASK_GROUP_BUTTON_WIDTH),
-                    MASK_GROUP_LEFT_FRONT_LEG,
-                );
-                add_mask_group_control(
-                    parent,
-                    "Right Front Leg",
-                    px(MASK_GROUP_BUTTON_WIDTH),
-                    MASK_GROUP_RIGHT_FRONT_LEG,
-                );
-            });
-
-            parent.spawn(row_node).with_children(|parent| {
-                add_mask_group_control(
-                    parent,
-                    "Left Hind Leg",
-                    px(MASK_GROUP_BUTTON_WIDTH),
-                    MASK_GROUP_LEFT_HIND_LEG,
-                );
-                add_mask_group_control(
-                    parent,
-                    "Right Hind Leg",
-                    px(MASK_GROUP_BUTTON_WIDTH),
-                    MASK_GROUP_RIGHT_HIND_LEG,
-                );
-            });
-
-            add_mask_group_control(parent, "Tail", auto(), MASK_GROUP_TAIL);
-        });
+        },
+        children![
+            new_mask_group_control("Head", auto(), MASK_GROUP_HEAD),
+            (
+                Node {
+                    flex_direction: FlexDirection::Row,
+                    column_gap: px(6),
+                    ..default()
+                },
+                children![
+                    new_mask_group_control(
+                        "Left Front Leg",
+                        px(MASK_GROUP_BUTTON_WIDTH),
+                        MASK_GROUP_LEFT_FRONT_LEG,
+                    ),
+                    new_mask_group_control(
+                        "Right Front Leg",
+                        px(MASK_GROUP_BUTTON_WIDTH),
+                        MASK_GROUP_RIGHT_FRONT_LEG,
+                    )
+                ],
+            ),
+            (
+                Node {
+                    flex_direction: FlexDirection::Row,
+                    column_gap: px(6),
+                    ..default()
+                },
+                children![
+                    new_mask_group_control(
+                        "Left Hind Leg",
+                        px(MASK_GROUP_BUTTON_WIDTH),
+                        MASK_GROUP_LEFT_HIND_LEG,
+                    ),
+                    new_mask_group_control(
+                        "Right Hind Leg",
+                        px(MASK_GROUP_BUTTON_WIDTH),
+                        MASK_GROUP_RIGHT_HIND_LEG,
+                    )
+                ]
+            ),
+            new_mask_group_control("Tail", auto(), MASK_GROUP_TAIL),
+        ],
+    ));
 }
 
 // Adds a button that allows the user to toggle a mask group on and off.
 //
 // The button will automatically become a child of the parent that owns the
 // given `ChildSpawnerCommands`.
-fn add_mask_group_control(
-    parent: &mut ChildSpawnerCommands,
-    label: &str,
-    width: Val,
-    mask_group_id: u32,
-) {
+fn new_mask_group_control(label: &str, width: Val, mask_group_id: u32) -> impl Bundle {
     let button_text_style = (
         TextFont {
             font_size: 14.0,
@@ -243,107 +240,99 @@ fn add_mask_group_control(
         TextColor(Color::Srgba(LIGHT_GRAY)),
     );
 
-    parent
-        .spawn((
-            Node {
-                border: UiRect::all(px(1)),
-                width,
-                flex_direction: FlexDirection::Column,
-                justify_content: JustifyContent::Center,
-                align_items: AlignItems::Center,
-                padding: UiRect::ZERO,
-                margin: UiRect::ZERO,
-                ..default()
-            },
-            BorderColor::all(Color::WHITE),
-            BorderRadius::all(px(3)),
-            BackgroundColor(Color::BLACK),
-        ))
-        .with_children(|builder| {
-            builder
-                .spawn((
-                    Node {
-                        border: UiRect::ZERO,
-                        width: percent(100),
-                        justify_content: JustifyContent::Center,
-                        align_items: AlignItems::Center,
-                        padding: UiRect::ZERO,
-                        margin: UiRect::ZERO,
-                        ..default()
+    let make_animation_label = {
+        let button_text_style = button_text_style.clone();
+        let selected_button_text_style = selected_button_text_style.clone();
+        move |first: bool, label: AnimationLabel| {
+            (
+                Button,
+                BackgroundColor(if !first { Color::BLACK } else { Color::WHITE }),
+                Node {
+                    flex_grow: 1.0,
+                    border: if !first {
+                        UiRect::left(px(1))
+                    } else {
+                        UiRect::ZERO
                     },
-                    BackgroundColor(Color::BLACK),
-                ))
-                .with_child((
-                    Text::new(label),
-                    label_text_style.clone(),
+                    ..default()
+                },
+                BorderColor::all(Color::WHITE),
+                AnimationControl {
+                    group_id: mask_group_id,
+                    label,
+                },
+                children![(
+                    Text(format!("{label:?}")),
+                    if !first {
+                        button_text_style.clone()
+                    } else {
+                        selected_button_text_style.clone()
+                    },
+                    TextLayout::new_with_justify(Justify::Center),
                     Node {
+                        flex_grow: 1.0,
                         margin: UiRect::vertical(px(3)),
                         ..default()
                     },
-                ));
+                )],
+            )
+        }
+    };
 
-            builder
-                .spawn((
+    (
+        Node {
+            border: UiRect::all(px(1)),
+            width,
+            flex_direction: FlexDirection::Column,
+            justify_content: JustifyContent::Center,
+            align_items: AlignItems::Center,
+            padding: UiRect::ZERO,
+            margin: UiRect::ZERO,
+            ..default()
+        },
+        BorderColor::all(Color::WHITE),
+        BorderRadius::all(px(3)),
+        BackgroundColor(Color::BLACK),
+        children![
+            (
+                Node {
+                    border: UiRect::ZERO,
+                    width: percent(100),
+                    justify_content: JustifyContent::Center,
+                    align_items: AlignItems::Center,
+                    padding: UiRect::ZERO,
+                    margin: UiRect::ZERO,
+                    ..default()
+                },
+                BackgroundColor(Color::BLACK),
+                children![(
+                    Text::new(label),
+                    label_text_style.clone(),
                     Node {
-                        width: percent(100),
-                        flex_direction: FlexDirection::Row,
-                        justify_content: JustifyContent::Center,
-                        align_items: AlignItems::Center,
-                        border: UiRect::top(px(1)),
+                        margin: UiRect::vertical(px(3)),
                         ..default()
                     },
-                    BorderColor::all(Color::WHITE),
-                ))
-                .with_children(|builder| {
-                    for (index, label) in [
-                        AnimationLabel::Run,
-                        AnimationLabel::Walk,
-                        AnimationLabel::Idle,
-                        AnimationLabel::Off,
-                    ]
-                    .iter()
-                    .enumerate()
-                    {
-                        builder
-                            .spawn((
-                                Button,
-                                BackgroundColor(if index > 0 {
-                                    Color::BLACK
-                                } else {
-                                    Color::WHITE
-                                }),
-                                Node {
-                                    flex_grow: 1.0,
-                                    border: if index > 0 {
-                                        UiRect::left(px(1))
-                                    } else {
-                                        UiRect::ZERO
-                                    },
-                                    ..default()
-                                },
-                                BorderColor::all(Color::WHITE),
-                                AnimationControl {
-                                    group_id: mask_group_id,
-                                    label: *label,
-                                },
-                            ))
-                            .with_child((
-                                Text(format!("{label:?}")),
-                                if index > 0 {
-                                    button_text_style.clone()
-                                } else {
-                                    selected_button_text_style.clone()
-                                },
-                                TextLayout::new_with_justify(Justify::Center),
-                                Node {
-                                    flex_grow: 1.0,
-                                    margin: UiRect::vertical(px(3)),
-                                    ..default()
-                                },
-                            ));
-                    }
-                });
-        });
+                )]
+            ),
+            (
+                Node {
+                    width: percent(100),
+                    flex_direction: FlexDirection::Row,
+                    justify_content: JustifyContent::Center,
+                    align_items: AlignItems::Center,
+                    border: UiRect::top(px(1)),
+                    ..default()
+                },
+                BorderColor::all(Color::WHITE),
+                children![
+                    make_animation_label(true, AnimationLabel::Run),
+                    make_animation_label(false, AnimationLabel::Walk),
+                    make_animation_label(false, AnimationLabel::Idle),
+                    make_animation_label(false, AnimationLabel::Off),
+                ]
+            )
+        ],
+    )
 }
 
 // Builds up the animation graph, including the mask groups, and adds it to the
diff --git a/examples/animation/easing_functions.rs b/examples/animation/easing_functions.rs
index 6481675104040..95f5d9b10fdab 100644
--- a/examples/animation/easing_functions.rs
+++ b/examples/animation/easing_functions.rs
@@ -84,35 +84,30 @@ fn setup(mut commands: Commands) {
     for (row, functions) in chunks.enumerate() {
         for (col, function) in functions.iter().enumerate() {
             let color = Hsla::hsl(col as f32 / COLS as f32 * 360.0, 0.8, 0.75).into();
-            commands
-                .spawn((
-                    EaseFunctionPlot(*function, color),
-                    Transform::from_xyz(
-                        -half_extent.x + EXTENT.x / (COLS - 1) as f32 * col as f32,
-                        half_extent.y - EXTENT.y / (max_rows - 1) as f32 * row as f32,
-                        0.0,
-                    ),
-                ))
-                .with_children(|p| {
-                    // Marks the y value on the right side of the plot
-                    p.spawn((
+            commands.spawn((
+                EaseFunctionPlot(*function, color),
+                Transform::from_xyz(
+                    -half_extent.x + EXTENT.x / (COLS - 1) as f32 * col as f32,
+                    half_extent.y - EXTENT.y / (max_rows - 1) as f32 * row as f32,
+                    0.0,
+                ),
+                children![
+                    (
                         Sprite::from_color(color, Vec2::splat(5.0)),
                         Transform::from_xyz(half_size.x + 5.0, -half_size.y, 0.0),
-                    ));
-                    // Marks the x and y value inside the plot
-                    p.spawn((
+                    ),
+                    (
                         Sprite::from_color(color, Vec2::splat(4.0)),
                         Transform::from_xyz(-half_size.x, -half_size.y, 0.0),
-                    ));
-
-                    // Label
-                    p.spawn((
+                    ),
+                    (
                         Text2d(format!("{function:?}")),
                         text_font.clone(),
                         TextColor(color),
                         Transform::from_xyz(0.0, -half_size.y - 15.0, 0.0),
-                    ));
-                });
+                    )
+                ],
+            ));
         }
     }
     commands.spawn((
diff --git a/examples/ecs/one_shot_systems.rs b/examples/ecs/one_shot_systems.rs
index faa40b61846d5..59b8dedb045f6 100644
--- a/examples/ecs/one_shot_systems.rs
+++ b/examples/ecs/one_shot_systems.rs
@@ -91,22 +91,21 @@ fn system_b(entity_b: Single<Entity, With<Text>>, mut writer: TextUiWriter) {
 
 fn setup_ui(mut commands: Commands) {
     commands.spawn(Camera2d);
-    commands
-        .spawn((
-            Text::default(),
-            TextLayout::new_with_justify(Justify::Center),
-            Node {
-                align_self: AlignSelf::Center,
-                justify_self: JustifySelf::Center,
-                ..default()
-            },
-        ))
-        .with_children(|p| {
-            p.spawn(TextSpan::new("Press A or B to trigger a one-shot system\n"));
-            p.spawn(TextSpan::new("Last Triggered: "));
-            p.spawn((
+    commands.spawn((
+        Text::default(),
+        TextLayout::new_with_justify(Justify::Center),
+        Node {
+            align_self: AlignSelf::Center,
+            justify_self: JustifySelf::Center,
+            ..default()
+        },
+        children![
+            (TextSpan::new("Press A or B to trigger a one-shot system\n")),
+            (TextSpan::new("Last Triggered: ")),
+            (
                 TextSpan::new("-"),
                 TextColor(bevy::color::palettes::css::ORANGE.into()),
-            ));
-        });
+            )
+        ],
+    ));
 }
diff --git a/examples/window/low_power.rs b/examples/window/low_power.rs
index 91aca5f626018..0641a7808a98f 100644
--- a/examples/window/low_power.rs
+++ b/examples/window/low_power.rs
@@ -185,23 +185,22 @@ pub(crate) mod test_setup {
             Transform::from_xyz(-2.0, 2.0, 2.0).looking_at(Vec3::ZERO, Vec3::Y),
         ));
         event.write(RequestRedraw);
-        commands
-            .spawn((
-                Text::default(),
-                Node {
-                    align_self: AlignSelf::FlexStart,
-                    position_type: PositionType::Absolute,
-                    top: px(12),
-                    left: px(12),
-                    ..default()
-                },
-                ModeText,
-            ))
-            .with_children(|p| {
-                p.spawn(TextSpan::new("Press space bar to cycle modes\n"));
-                p.spawn((TextSpan::default(), TextColor(LIME.into())));
-                p.spawn((TextSpan::new("\nFrame: "), TextColor(YELLOW.into())));
-                p.spawn((TextSpan::new(""), TextColor(YELLOW.into())));
-            });
+        commands.spawn((
+            Text::default(),
+            Node {
+                align_self: AlignSelf::FlexStart,
+                position_type: PositionType::Absolute,
+                top: px(12),
+                left: px(12),
+                ..default()
+            },
+            ModeText,
+            children![
+                TextSpan::new("Press space bar to cycle modes\n"),
+                (TextSpan::default(), TextColor(LIME.into())),
+                (TextSpan::new("\nFrame: "), TextColor(YELLOW.into())),
+                (TextSpan::new(""), TextColor(YELLOW.into())),
+            ],
+        ));
     }
 }
diff --git a/examples/window/scale_factor_override.rs b/examples/window/scale_factor_override.rs
index 8bc6051cb85ff..8cbd4bfd9cc7d 100644
--- a/examples/window/scale_factor_override.rs
+++ b/examples/window/scale_factor_override.rs
@@ -27,38 +27,35 @@ fn setup(mut commands: Commands) {
     // camera
     commands.spawn(Camera2d);
     // root node
-    commands
-        .spawn(Node {
+    commands.spawn((
+        Node {
             width: percent(100),
             height: percent(100),
             justify_content: JustifyContent::SpaceBetween,
             ..default()
-        })
-        .with_children(|parent| {
-            // left vertical fill (border)
-            parent
-                .spawn((
-                    Node {
-                        width: px(300),
-                        height: percent(100),
-                        border: UiRect::all(px(2)),
-                        ..default()
-                    },
-                    BackgroundColor(Color::srgb(0.65, 0.65, 0.65)),
-                ))
-                .with_child((
-                    CustomText,
-                    Text::new("Example text"),
-                    TextFont {
-                        font_size: 25.0,
-                        ..default()
-                    },
-                    Node {
-                        align_self: AlignSelf::FlexEnd,
-                        ..default()
-                    },
-                ));
-        });
+        },
+        children![(
+            Node {
+                width: px(300),
+                height: percent(100),
+                border: UiRect::all(px(2)),
+                ..default()
+            },
+            BackgroundColor(Color::srgb(0.65, 0.65, 0.65)),
+            children![(
+                CustomText,
+                Text::new("Example text"),
+                TextFont {
+                    font_size: 25.0,
+                    ..default()
+                },
+                Node {
+                    align_self: AlignSelf::FlexEnd,
+                    ..default()
+                },
+            )]
+        )],
+    ));
 }
 
 /// Set the title of the window to the current override
diff --git a/examples/window/window_drag_move.rs b/examples/window/window_drag_move.rs
index 31b99a5b44072..f0550aa795c5b 100644
--- a/examples/window/window_drag_move.rs
+++ b/examples/window/window_drag_move.rs
@@ -60,30 +60,30 @@ fn setup(mut commands: Commands) {
     commands.spawn(Camera3d::default());
 
     // UI
-    commands
-        .spawn((
-            Node {
-                position_type: PositionType::Absolute,
-                padding: UiRect::all(px(5)),
-                ..default()
-            },
-            BackgroundColor(Color::BLACK.with_alpha(0.75)),
-            GlobalZIndex(i32::MAX),
-        ))
-        .with_children(|p| {
-            p.spawn(Text::default()).with_children(|p| {
-                p.spawn(TextSpan::new(
+    commands.spawn((
+        Node {
+            position_type: PositionType::Absolute,
+            padding: UiRect::all(px(5)),
+            ..default()
+        },
+        BackgroundColor(Color::BLACK.with_alpha(0.75)),
+        GlobalZIndex(i32::MAX),
+        children![(
+            Text::default(),
+            children![
+                TextSpan::new(
                     "Demonstrate drag move and drag resize without window decorations.\n\n",
-                ));
-                p.spawn(TextSpan::new("Controls:\n"));
-                p.spawn(TextSpan::new("A - change left click action ["));
-                p.spawn(TextSpan::new("Move"));
-                p.spawn(TextSpan::new("]\n"));
-                p.spawn(TextSpan::new("S / D - change resize direction ["));
-                p.spawn(TextSpan::new("NorthWest"));
-                p.spawn(TextSpan::new("]\n"));
-            });
-        });
+                ),
+                TextSpan::new("Controls:\n"),
+                TextSpan::new("A - change left click action ["),
+                TextSpan::new("Move"),
+                TextSpan::new("]\n"),
+                TextSpan::new("S / D - change resize direction ["),
+                TextSpan::new("NorthWest"),
+                TextSpan::new("]\n"),
+            ]
+        )],
+    ));
 }
 
 fn handle_input(

diff --git a/crates/bevy_scene/src/components.rs b/crates/bevy_scene/src/components.rs
index 7d4e9aef2dbf9..b4902751f8a4b 100644
--- a/crates/bevy_scene/src/components.rs
+++ b/crates/bevy_scene/src/components.rs
@@ -1,4 +1,4 @@
-use bevy_asset::Handle;
+use bevy_asset::{AsAssetId, AssetId, Handle};
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::{component::Component, prelude::ReflectComponent};
 use bevy_reflect::{prelude::ReflectDefault, Reflect};
@@ -17,6 +17,14 @@ use crate::{DynamicScene, Scene};
 #[require(Visibility)]
 pub struct SceneRoot(pub Handle<Scene>);
 
+impl AsAssetId for SceneRoot {
+    type Asset = Scene;
+
+    fn as_asset_id(&self) -> AssetId<Self::Asset> {
+        self.id()
+    }
+}
+
 /// Adding this component will spawn the scene as a child of that entity.
 /// Once it's spawned, the entity will have a [`SceneInstance`](crate::SceneInstance) component.
 #[derive(Component, Clone, Debug, Default, Deref, DerefMut, Reflect, PartialEq, Eq, From)]
@@ -24,3 +32,11 @@ pub struct SceneRoot(pub Handle<Scene>);
 #[require(Transform)]
 #[require(Visibility)]
 pub struct DynamicSceneRoot(pub Handle<DynamicScene>);
+
+impl AsAssetId for DynamicSceneRoot {
+    type Asset = DynamicScene;
+
+    fn as_asset_id(&self) -> AssetId<Self::Asset> {
+        self.id()
+    }
+}

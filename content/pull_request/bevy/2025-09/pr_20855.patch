diff --git a/crates/bevy_anti_alias/src/dlss/extract.rs b/crates/bevy_anti_alias/src/dlss/extract.rs
index f909df6b5b996..c8af2dbd25720 100644
--- a/crates/bevy_anti_alias/src/dlss/extract.rs
+++ b/crates/bevy_anti_alias/src/dlss/extract.rs
@@ -15,11 +15,10 @@ pub fn extract_dlss<F: DlssFeature>(
         .query_filtered::<(RenderEntity, &Camera, &Projection, Option<&mut Dlss<F>>), With<Hdr>>();
 
     for (entity, camera, camera_projection, mut dlss) in cameras_3d.iter_mut(&mut main_world) {
-        let has_perspective_projection = matches!(camera_projection, Projection::Perspective(_));
         let mut entity_commands = commands
             .get_entity(entity)
             .expect("Camera entity wasn't synced.");
-        if dlss.is_some() && camera.is_active && has_perspective_projection {
+        if dlss.is_some() && camera.is_active && camera_projection.is_perspective() {
             entity_commands.insert(dlss.as_deref().unwrap().clone());
             dlss.as_mut().unwrap().reset = false;
         } else if cleanup_query.get(entity) == Ok(true) {
diff --git a/crates/bevy_anti_alias/src/taa/mod.rs b/crates/bevy_anti_alias/src/taa/mod.rs
index 0103d3a6ca4cc..28c04ea3593b4 100644
--- a/crates/bevy_anti_alias/src/taa/mod.rs
+++ b/crates/bevy_anti_alias/src/taa/mod.rs
@@ -351,13 +351,12 @@ fn extract_taa_settings(mut commands: Commands, mut main_world: ResMut<MainWorld
     )>();
 
     for (entity, camera, camera_projection, taa_settings) in cameras_3d.iter_mut(&mut main_world) {
-        let has_perspective_projection = matches!(camera_projection, Projection::Perspective(_));
         let mut entity_commands = commands
             .get_entity(entity)
             .expect("Camera entity wasn't synced.");
         if let Some(mut taa_settings) = taa_settings
             && camera.is_active
-            && has_perspective_projection
+            && camera_projection.is_perspective()
         {
             entity_commands.insert(taa_settings.clone());
             taa_settings.reset = false;
diff --git a/crates/bevy_camera/src/projection.rs b/crates/bevy_camera/src/projection.rs
index 9a1d61f4ee981..7a1cb5f80ea01 100644
--- a/crates/bevy_camera/src/projection.rs
+++ b/crates/bevy_camera/src/projection.rs
@@ -237,6 +237,16 @@ impl Projection {
             dyn_projection: Box::new(projection),
         })
     }
+
+    /// Check if the projection is perspective.
+    /// For [`CustomProjection`], this checks if the projection matrix's w-axis's w is 0.0.
+    pub fn is_perspective(&self) -> bool {
+        match self {
+            Projection::Perspective(_) => true,
+            Projection::Orthographic(_) => false,
+            Projection::Custom(projection) => projection.get_clip_from_view().w_axis.w == 0.0,
+        }
+    }
 }
 
 impl Deref for Projection {

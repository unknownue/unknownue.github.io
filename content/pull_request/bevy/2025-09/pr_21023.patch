diff --git a/crates/bevy_camera/src/projection.rs b/crates/bevy_camera/src/projection.rs
index 12db2c5bf885a..12a6dd89e8d15 100644
--- a/crates/bevy_camera/src/projection.rs
+++ b/crates/bevy_camera/src/projection.rs
@@ -81,7 +81,7 @@ pub trait CameraProjection {
 mod sealed {
     use super::CameraProjection;
 
-    /// A wrapper trait to make it possible to implement Clone for boxed [`CameraProjection`][`super::CameraProjection`]
+    /// A wrapper trait to make it possible to implement Clone for boxed [`CameraProjection`](`super::CameraProjection`)
     /// trait objects, without breaking object safety rules by making it `Sized`. Additional bounds
     /// are included for downcasting, and fulfilling the trait bounds on `Projection`.
     pub trait DynCameraProjection:
diff --git a/crates/bevy_pbr/src/meshlet/asset.rs b/crates/bevy_pbr/src/meshlet/asset.rs
index 2f70c3276dffe..49a993ffa4388 100644
--- a/crates/bevy_pbr/src/meshlet/asset.rs
+++ b/crates/bevy_pbr/src/meshlet/asset.rs
@@ -25,7 +25,7 @@ pub const MESHLET_MESH_ASSET_VERSION: u64 = 2;
 /// The conversion step is very slow, and is meant to be ran once ahead of time, and not during runtime. This type of mesh is not suitable for
 /// dynamically generated geometry.
 ///
-/// There are restrictions on the [`crate::Material`] functionality that can be used with this type of mesh.
+/// There are restrictions on the [`Material`](`crate::Material`) functionality that can be used with this type of mesh.
 /// * Materials have no control over the vertex shader or vertex attributes.
 /// * Materials must be opaque. Transparent, alpha masked, and transmissive materials are not supported.
 /// * Do not use normal maps baked from higher-poly geometry. Use the high-poly geometry directly and skip the normal map.
@@ -33,10 +33,10 @@ pub const MESHLET_MESH_ASSET_VERSION: u64 = 2;
 /// * Material shaders must not use builtin functions that automatically calculate derivatives <https://gpuweb.github.io/gpuweb/wgsl/#derivatives>.
 ///   * Performing manual arithmetic on texture coordinates (UVs) is forbidden. Use the chain-rule version of arithmetic functions instead (TODO: not yet implemented).
 /// * Limited control over [`bevy_render::render_resource::RenderPipelineDescriptor`] attributes.
-/// * Materials must use the [`crate::Material::meshlet_mesh_fragment_shader`] method (and similar variants for prepass/deferred shaders)
+/// * Materials must use the [`Material::meshlet_mesh_fragment_shader`](`crate::Material::meshlet_mesh_fragment_shader`) method (and similar variants for prepass/deferred shaders)
 ///   which requires certain shader patterns that differ from the regular material shaders.
 ///
-/// See also [`super::MeshletMesh3d`] and [`super::MeshletPlugin`].
+/// See also [`MeshletMesh3d`](`super::MeshletMesh3d`) and [`MeshletPlugin`](`super::MeshletPlugin`).
 #[derive(Asset, TypePath, Clone)]
 pub struct MeshletMesh {
     /// Quantized and bitstream-packed vertex positions for meshlet vertices.
diff --git a/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs b/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
index 1382438f98be5..e00c41900146d 100644
--- a/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
+++ b/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
@@ -18,11 +18,11 @@ use bevy_render::{camera::TemporalJitter, render_resource::*, view::ExtractedVie
 use bevy_utils::default;
 use core::any::{Any, TypeId};
 
-/// A list of `(Material ID, Pipeline, BindGroup)` for a view for use in [`super::MeshletMainOpaquePass3dNode`].
+/// A list of `(Material ID, Pipeline, BindGroup)` for a view for use in [`MeshletMainOpaquePass3dNode`](`super::MeshletMainOpaquePass3dNode`).
 #[derive(Component, Deref, DerefMut, Default)]
 pub struct MeshletViewMaterialsMainOpaquePass(pub Vec<(u32, CachedRenderPipelineId, BindGroup)>);
 
-/// Prepare [`Material`] pipelines for [`super::MeshletMesh`] entities for use in [`super::MeshletMainOpaquePass3dNode`],
+/// Prepare [`Material`] pipelines for [`MeshletMesh`](`super::MeshletMesh`) entities for use in [`MeshletMainOpaquePass3dNode`](`super::MeshletMainOpaquePass3dNode`),
 /// and register the material with [`InstanceManager`].
 pub fn prepare_material_meshlet_meshes_main_opaque_pass(
     resource_manager: ResMut<ResourceManager>,
@@ -245,18 +245,18 @@ pub fn prepare_material_meshlet_meshes_main_opaque_pass(
     }
 }
 
-/// A list of `(Material ID, Pipeline, BindGroup)` for a view for use in [`super::MeshletPrepassNode`].
+/// A list of `(Material ID, Pipeline, BindGroup)` for a view for use in [`MeshletPrepassNode`](`super::MeshletPrepassNode`).
 #[derive(Component, Deref, DerefMut, Default)]
 pub struct MeshletViewMaterialsPrepass(pub Vec<(u32, CachedRenderPipelineId, BindGroup)>);
 
-/// A list of `(Material ID, Pipeline, BindGroup)` for a view for use in [`super::MeshletDeferredGBufferPrepassNode`].
+/// A list of `(Material ID, Pipeline, BindGroup)` for a view for use in [`MeshletDeferredGBufferPrepassNode`](`super::MeshletDeferredGBufferPrepassNode`).
 #[derive(Component, Deref, DerefMut, Default)]
 pub struct MeshletViewMaterialsDeferredGBufferPrepass(
     pub Vec<(u32, CachedRenderPipelineId, BindGroup)>,
 );
 
-/// Prepare [`Material`] pipelines for [`super::MeshletMesh`] entities for use in [`super::MeshletPrepassNode`],
-/// and [`super::MeshletDeferredGBufferPrepassNode`] and register the material with [`InstanceManager`].
+/// Prepare [`Material`] pipelines for [`MeshletMesh`](`super::MeshletMesh`) entities for use in [`MeshletPrepassNode`](`super::MeshletPrepassNode`),
+/// and [`MeshletDeferredGBufferPrepassNode`](`super::MeshletDeferredGBufferPrepassNode`) and register the material with [`InstanceManager`].
 pub fn prepare_material_meshlet_meshes_prepass(
     resource_manager: ResMut<ResourceManager>,
     mut instance_manager: ResMut<InstanceManager>,
diff --git a/crates/bevy_pbr/src/meshlet/resource_manager.rs b/crates/bevy_pbr/src/meshlet/resource_manager.rs
index 35906ce666cf2..927e2bc88b67d 100644
--- a/crates/bevy_pbr/src/meshlet/resource_manager.rs
+++ b/crates/bevy_pbr/src/meshlet/resource_manager.rs
@@ -23,7 +23,7 @@ use bevy_render::{
 use binding_types::*;
 use core::iter;
 
-/// Manages per-view and per-cluster GPU resources for [`super::MeshletPlugin`].
+/// Manages per-view and per-cluster GPU resources for [`MeshletPlugin`](`super::MeshletPlugin`).
 #[derive(Resource)]
 pub struct ResourceManager {
     /// Intermediate buffer of cluster IDs for use with rasterizing the visibility buffer
diff --git a/crates/bevy_state/src/lib.rs b/crates/bevy_state/src/lib.rs
index 4089a39ebd95f..1ca9f01bffeb7 100644
--- a/crates/bevy_state/src/lib.rs
+++ b/crates/bevy_state/src/lib.rs
@@ -29,7 +29,7 @@
 //! - The [`in_state<S>`](crate::condition::in_state) and [`state_changed<S>`](crate::condition::state_changed) run conditions - which are used
 //!   to determine whether a system should run based on the current state.
 //!
-//! Bevy also provides ("state-scoped entities")[`crate::state_scoped`] functionality for managing the lifetime of entities in the context of game states.
+//! Bevy also provides ("state-scoped entities") [`state_scoped`](`crate::state_scoped`) functionality for managing the lifetime of entities in the context of game states.
 //! This, especially in combination with system scheduling, enables a flexible and expressive way to manage spawning and despawning entities.
 
 #![cfg_attr(
diff --git a/crates/bevy_text/src/glyph.rs b/crates/bevy_text/src/glyph.rs
index 5bc2111dbd27d..453fc579a6b56 100644
--- a/crates/bevy_text/src/glyph.rs
+++ b/crates/bevy_text/src/glyph.rs
@@ -9,7 +9,7 @@ use bevy_reflect::Reflect;
 ///
 /// Contains information about how and where to render a glyph.
 ///
-/// Used in [`TextPipeline::queue_text`](crate::TextPipeline::queue_text) and [`crate::TextLayoutInfo`] for rendering glyphs.
+/// Used in [`TextPipeline::queue_text`](crate::TextPipeline::queue_text) and [`TextLayoutInfo`](`crate::TextLayoutInfo`) for rendering glyphs.
 #[derive(Debug, Clone, Reflect)]
 #[reflect(Clone)]
 pub struct PositionedGlyph {
diff --git a/crates/bevy_window/src/event.rs b/crates/bevy_window/src/event.rs
index d410ca9a63f2b..d070f9b269079 100644
--- a/crates/bevy_window/src/event.rs
+++ b/crates/bevy_window/src/event.rs
@@ -60,7 +60,7 @@ pub struct RequestRedraw;
 
 /// An event that is sent whenever a new window is created.
 ///
-/// To create a new window, spawn an entity with a [`crate::Window`] on it.
+/// To create a new window, spawn an entity with a [`Window`](`crate::Window`) on it.
 #[derive(Message, Debug, Clone, PartialEq, Eq)]
 #[cfg_attr(
     feature = "bevy_reflect",
diff --git a/crates/bevy_window/src/monitor.rs b/crates/bevy_window/src/monitor.rs
index e788db6363e5a..6090d770b4094 100644
--- a/crates/bevy_window/src/monitor.rs
+++ b/crates/bevy_window/src/monitor.rs
@@ -12,7 +12,7 @@ use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 /// to query information about the display, such as its size, position, and video modes.
 ///
 /// Each monitor corresponds to an entity and can be used to position a monitor using
-/// [`crate::window::MonitorSelection::Entity`].
+/// [`MonitorSelection::Entity`](`crate::window::MonitorSelection::Entity`).
 ///
 /// # Warning
 ///
diff --git a/crates/bevy_window/src/window.rs b/crates/bevy_window/src/window.rs
index fc51d55f9ef54..b3a306cb8c3b2 100644
--- a/crates/bevy_window/src/window.rs
+++ b/crates/bevy_window/src/window.rs
@@ -1149,7 +1149,7 @@ pub enum MonitorSelection {
     Primary,
     /// Uses the monitor with the specified index.
     Index(usize),
-    /// Uses a given [`crate::monitor::Monitor`] entity.
+    /// Uses a given [`Monitor`](`crate::monitor::Monitor`) entity.
     Entity(Entity),
 }
 
@@ -1170,8 +1170,8 @@ pub enum MonitorSelection {
 pub enum VideoModeSelection {
     /// Uses the video mode that the monitor is already in.
     Current,
-    /// Uses a given [`crate::monitor::VideoMode`]. A list of video modes supported by the monitor
-    /// is supplied by [`crate::monitor::Monitor::video_modes`].
+    /// Uses a given [`VideoMode`](`crate::monitor::VideoMode`). A list of video modes supported by the monitor
+    /// is supplied by [`Monitor::video_modes`](`crate::monitor::Monitor::video_modes`).
     Specific(VideoMode),
 }
 

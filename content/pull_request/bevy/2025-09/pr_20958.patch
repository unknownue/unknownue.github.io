diff --git a/crates/bevy_ecs/src/archetype.rs b/crates/bevy_ecs/src/archetype.rs
index c6fa3dc81dd53..9a9f80aa0d995 100644
--- a/crates/bevy_ecs/src/archetype.rs
+++ b/crates/bevy_ecs/src/archetype.rs
@@ -165,7 +165,7 @@ impl ArchetypeAfterBundleInsert {
 
 /// This trait is used to report the status of [`Bundle`](crate::bundle::Bundle) components
 /// being inserted into a given entity, relative to that entity's original archetype.
-/// See [`crate::bundle::BundleInfo::write_components`] for more info.
+/// See [`BundleInfo::write_components`](`crate::bundle::BundleInfo::write_components`) for more info.
 pub(crate) trait BundleComponentStatus {
     /// Returns the Bundle's component status for the given "bundle index".
     ///
diff --git a/crates/bevy_ecs/src/lifecycle.rs b/crates/bevy_ecs/src/lifecycle.rs
index cc16250dfc978..6a36eca8329ac 100644
--- a/crates/bevy_ecs/src/lifecycle.rs
+++ b/crates/bevy_ecs/src/lifecycle.rs
@@ -327,7 +327,7 @@ pub const DESPAWN: EventKey = EventKey(ComponentId::new(4));
 
 /// Trigger emitted when a component is inserted onto an entity that does not already have that
 /// component. Runs before `Insert`.
-/// See [`crate::lifecycle::ComponentHooks::on_add`] for more information.
+/// See [`ComponentHooks::on_add`](`crate::lifecycle::ComponentHooks::on_add`) for more information.
 #[derive(Debug, Clone, EntityEvent)]
 #[entity_event(trigger = EntityComponentsTrigger<'a>)]
 #[cfg_attr(feature = "bevy_reflect", derive(Reflect))]
@@ -340,7 +340,7 @@ pub struct Add {
 
 /// Trigger emitted when a component is inserted, regardless of whether or not the entity already
 /// had that component. Runs after `Add`, if it ran.
-/// See [`crate::lifecycle::ComponentHooks::on_insert`] for more information.
+/// See [`ComponentHooks::on_insert`](`crate::lifecycle::ComponentHooks::on_insert`) for more information.
 #[derive(Debug, Clone, EntityEvent)]
 #[entity_event(trigger = EntityComponentsTrigger<'a>)]
 #[cfg_attr(feature = "bevy_reflect", derive(Reflect))]
@@ -355,7 +355,7 @@ pub struct Insert {
 /// of whether or not it is later replaced.
 ///
 /// Runs before the value is replaced, so you can still access the original component data.
-/// See [`crate::lifecycle::ComponentHooks::on_replace`] for more information.
+/// See [`ComponentHooks::on_replace`](`crate::lifecycle::ComponentHooks::on_replace`) for more information.
 #[derive(Debug, Clone, EntityEvent)]
 #[entity_event(trigger = EntityComponentsTrigger<'a>)]
 #[cfg_attr(feature = "bevy_reflect", derive(Reflect))]
@@ -368,7 +368,7 @@ pub struct Replace {
 
 /// Trigger emitted when a component is removed from an entity, and runs before the component is
 /// removed, so you can still access the component data.
-/// See [`crate::lifecycle::ComponentHooks::on_remove`] for more information.
+/// See [`ComponentHooks::on_remove`](`crate::lifecycle::ComponentHooks::on_remove`) for more information.
 #[derive(Debug, Clone, EntityEvent)]
 #[entity_event(trigger = EntityComponentsTrigger<'a>)]
 #[cfg_attr(feature = "bevy_reflect", derive(Reflect))]
@@ -380,7 +380,7 @@ pub struct Remove {
 }
 
 /// [`EntityEvent`] emitted for each component on an entity when it is despawned.
-/// See [`crate::lifecycle::ComponentHooks::on_despawn`] for more information.
+/// See [`ComponentHooks::on_despawn`](`crate::lifecycle::ComponentHooks::on_despawn`) for more information.
 #[derive(Debug, Clone, EntityEvent)]
 #[entity_event(trigger = EntityComponentsTrigger<'a>)]
 #[cfg_attr(feature = "bevy_reflect", derive(Reflect))]
diff --git a/crates/bevy_ecs/src/query/filter.rs b/crates/bevy_ecs/src/query/filter.rs
index dbc6483d8021e..4ebc38098503a 100644
--- a/crates/bevy_ecs/src/query/filter.rs
+++ b/crates/bevy_ecs/src/query/filter.rs
@@ -84,7 +84,7 @@ pub unsafe trait QueryFilter: WorldQuery {
     /// Returns true if (and only if) this Filter relies strictly on archetypes to limit which
     /// components are accessed by the Query.
     ///
-    /// This enables optimizations for [`crate::query::QueryIter`] that rely on knowing exactly how
+    /// This enables optimizations for [`QueryIter`](`crate::query::QueryIter`) that rely on knowing exactly how
     /// many elements are being iterated (such as `Iterator::collect()`).
     ///
     /// If this is `true`, then [`QueryFilter::filter_fetch`] must always return true.
diff --git a/crates/bevy_ecs/src/reflect/resource.rs b/crates/bevy_ecs/src/reflect/resource.rs
index 60cf7bc609169..16362b046f87f 100644
--- a/crates/bevy_ecs/src/reflect/resource.rs
+++ b/crates/bevy_ecs/src/reflect/resource.rs
@@ -2,7 +2,7 @@
 //!
 //! # Architecture
 //!
-//! See the module doc for [`crate::reflect::component`].
+//! See the module doc for [`reflect::component`](`crate::reflect::component`).
 
 use crate::{
     change_detection::Mut,
diff --git a/crates/bevy_ecs/src/system/system_param.rs b/crates/bevy_ecs/src/system/system_param.rs
index d9adab6fe34b7..1b4286c1f6662 100644
--- a/crates/bevy_ecs/src/system/system_param.rs
+++ b/crates/bevy_ecs/src/system/system_param.rs
@@ -2777,7 +2777,7 @@ pub struct SystemParamValidationError {
     /// Whether the system should be skipped.
     ///
     /// If `false`, the error should be handled.
-    /// By default, this will result in a panic. See [`crate::error`] for more information.
+    /// By default, this will result in a panic. See [`error`](`crate::error`) for more information.
     ///
     /// This is the default behavior, and is suitable for system params that should *always* be valid,
     /// either because sensible fallback behavior exists (like [`Query`]) or because
diff --git a/crates/bevy_ecs/src/world/entity_ref.rs b/crates/bevy_ecs/src/world/entity_ref.rs
index b4dd981f07f61..e1170d03950c7 100644
--- a/crates/bevy_ecs/src/world/entity_ref.rs
+++ b/crates/bevy_ecs/src/world/entity_ref.rs
@@ -4372,7 +4372,7 @@ unsafe impl<B: Bundle> EntityEquivalent for EntityRefExcept<'_, '_, B> {}
 /// *all* components of an entity, while still allowing you to consult other
 /// queries that might match entities that this query also matches. If you don't
 /// need access to all components, prefer a standard query with a
-/// [`crate::query::Without`] filter.
+/// [`Without`](`crate::query::Without`) filter.
 pub struct EntityMutExcept<'w, 's, B>
 where
     B: Bundle,
diff --git a/crates/bevy_gizmos/src/primitives/mod.rs b/crates/bevy_gizmos/src/primitives/mod.rs
index 86e2c4511f3c1..419ef50217450 100644
--- a/crates/bevy_gizmos/src/primitives/mod.rs
+++ b/crates/bevy_gizmos/src/primitives/mod.rs
@@ -1,4 +1,4 @@
-//! A module for rendering each of the 2D and 3D [`bevy_math::primitives`] with [`crate::prelude::Gizmos`].
+//! A module for rendering each of the 2D and 3D [`bevy_math::primitives`] with [`Gizmos`](`crate::prelude::Gizmos`).
 
 pub mod dim2;
 pub mod dim3;
diff --git a/crates/bevy_light/src/spot_light.rs b/crates/bevy_light/src/spot_light.rs
index e4bc5696ac809..00026ff0328e9 100644
--- a/crates/bevy_light/src/spot_light.rs
+++ b/crates/bevy_light/src/spot_light.rs
@@ -18,7 +18,7 @@ use crate::cluster::{ClusterVisibilityClass, GlobalVisibleClusterableObjects};
 /// shines light only in a given direction. The direction is taken from
 /// the transform, and can be specified with [`Transform::looking_at`](Transform::looking_at).
 ///
-/// To control the resolution of the shadow maps, use the [`crate::DirectionalLightShadowMap`] resource.
+/// To control the resolution of the shadow maps, use the [`DirectionalLightShadowMap`](`crate::DirectionalLightShadowMap`)  resource.
 #[derive(Component, Debug, Clone, Copy, Reflect)]
 #[reflect(Component, Default, Debug, Clone)]
 #[require(Frustum, VisibleMeshEntities, Transform, Visibility, VisibilityClass)]
diff --git a/crates/bevy_scene/src/scene_spawner.rs b/crates/bevy_scene/src/scene_spawner.rs
index 76b47d62d86f2..a7d1f51ea88cd 100644
--- a/crates/bevy_scene/src/scene_spawner.rs
+++ b/crates/bevy_scene/src/scene_spawner.rs
@@ -22,7 +22,7 @@ use bevy_ecs::{
     system::{Commands, Query},
 };
 
-/// Triggered on a scene's parent entity when [`crate::SceneInstance`] becomes ready to use.
+/// Triggered on a scene's parent entity when [`SceneInstance`](`crate::SceneInstance`) becomes ready to use.
 ///
 /// See also [`On`], [`SceneSpawner::instance_is_ready`].
 ///

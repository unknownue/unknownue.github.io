diff --git a/crates/bevy_ecs/src/hierarchy.rs b/crates/bevy_ecs/src/hierarchy.rs
index 612f2bcbcb2ea..bde9526d72136 100644
--- a/crates/bevy_ecs/src/hierarchy.rs
+++ b/crates/bevy_ecs/src/hierarchy.rs
@@ -284,7 +284,7 @@ impl<'w> EntityWorldMut<'w> {
     }
 
     /// Removes all the children from this entity.
-    /// See also [`clear_related`](Self::clear_related)
+    /// See also [`detach_all_related`](Self::detach_all_related)
     #[deprecated = "Use detach_all_children() instead"]
     pub fn clear_children(&mut self) -> &mut Self {
         self.detach_all_children()
@@ -292,9 +292,9 @@ impl<'w> EntityWorldMut<'w> {
 
     /// Removes all the parent-child relationships from this entity.
     /// To despawn the child entities, instead use [`EntityWorldMut::despawn_children`](EntityWorldMut::despawn_children).
-    /// See also [`clear_related`](Self::clear_related)
+    /// See also [`detach_all_related`](Self::detach_all_related)
     pub fn detach_all_children(&mut self) -> &mut Self {
-        self.clear_related::<ChildOf>()
+        self.detach_all_related::<ChildOf>()
     }
 
     /// Insert children at specific index.
@@ -397,7 +397,7 @@ impl<'a> EntityCommands<'a> {
     }
 
     /// Removes all the children from this entity.
-    /// See also [`clear_related`](Self::clear_related)
+    /// See also [`detach_all_related`](Self::detach_all_related)
     #[deprecated = "Use detach_all_children() instead"]
     pub fn clear_children(&mut self) -> &mut Self {
         self.detach_all_children()
@@ -405,9 +405,9 @@ impl<'a> EntityCommands<'a> {
 
     /// Removes all the parent-child relationships from this entity.
     /// To despawn the child entities, instead use [`EntityWorldMut::despawn_children`](EntityWorldMut::despawn_children).
-    /// See also [`clear_related`](Self::clear_related)
+    /// See also [`detach_all_related`](Self::detach_all_related)
     pub fn detach_all_children(&mut self) -> &mut Self {
-        self.clear_related::<ChildOf>()
+        self.detach_all_related::<ChildOf>()
     }
 
     /// Insert children at specific index.
diff --git a/crates/bevy_ecs/src/relationship/related_methods.rs b/crates/bevy_ecs/src/relationship/related_methods.rs
index e9b7849441ece..75bdad1604385 100644
--- a/crates/bevy_ecs/src/relationship/related_methods.rs
+++ b/crates/bevy_ecs/src/relationship/related_methods.rs
@@ -54,7 +54,7 @@ impl<'w> EntityWorldMut<'w> {
     }
 
     /// Removes the relation `R` between this entity and all its related entities.
-    pub fn clear_related<R: Relationship>(&mut self) -> &mut Self {
+    pub fn detach_all_related<R: Relationship>(&mut self) -> &mut Self {
         self.remove::<R::RelationshipTarget>()
     }
 
@@ -437,9 +437,9 @@ impl<'a> EntityCommands<'a> {
     }
 
     /// Removes the relation `R` between this entity and all its related entities.
-    pub fn clear_related<R: Relationship>(&mut self) -> &mut Self {
+    pub fn detach_all_related<R: Relationship>(&mut self) -> &mut Self {
         self.queue(|mut entity: EntityWorldMut| {
-            entity.clear_related::<R>();
+            entity.detach_all_related::<R>();
         })
     }
 
@@ -707,7 +707,7 @@ mod tests {
         let b = world.spawn(ChildOf(a)).id();
         let c = world.spawn(ChildOf(a)).id();
 
-        world.entity_mut(a).clear_related::<ChildOf>();
+        world.entity_mut(a).detach_all_related::<ChildOf>();
 
         assert_eq!(world.entity(a).get::<Children>(), None);
         assert_eq!(world.entity(b).get::<ChildOf>(), None);
diff --git a/release-content/migration-guides/rename-clear_children.md b/release-content/migration-guides/rename-clear_children.md
index f77f1efad9e47..4b325c8a1ea99 100644
--- a/release-content/migration-guides/rename-clear_children.md
+++ b/release-content/migration-guides/rename-clear_children.md
@@ -1,10 +1,10 @@
 ---
-title: Renamed `clear_children` methods to `detach_all_children`
-pull_requests: [21470]
+title: Renamed `clear_children` and `clear_related` methods to `detach_*`
+pull_requests: [21470, 21537]
 ---
 
 In summary, we renamed `clear_*` and `remove_*` methods to `detach_*`.
-This should clarify that these methods do not despawn the child entities.
+This should clarify that these methods do not despawn the child entities or related entities.
 
 We renamed several related methods on both `EntityCommands` and `EntityWorldMut`:
 
@@ -14,3 +14,5 @@ We renamed several related methods on both `EntityCommands` and `EntityWorldMut`
 - The method `EntityWorldMut::remove_children` has been renamed to `EntityWorldMut::detach_children`.
 - The method `EntityCommands::remove_child` has been renamed to `EntityCommands::detach_child`.
 - The method `EntityWorldMut::remove_child` has been renamed to `EntityWorldMut::detach_child`.
+- The method `EntityCommands::clear_related` has been renamed to `EntityCommands::detach_all_related`.
+- The method `EntityWorldMut::clear_related` has been renamed to `EntityWorldMut::detach_all_related`.

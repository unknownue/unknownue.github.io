diff --git a/crates/bevy_winit/src/state.rs b/crates/bevy_winit/src/state.rs
index 0eef31fb96640..93db66446038e 100644
--- a/crates/bevy_winit/src/state.rs
+++ b/crates/bevy_winit/src/state.rs
@@ -466,24 +466,23 @@ impl<M: Message> ApplicationHandler<M> for WinitAppRunnerState<M> {
         // invisible window creation. https://github.com/bevyengine/bevy/issues/18027
         #[cfg(target_os = "windows")]
         {
-            WINIT_WINDOWS.with_borrow(|winit_windows| {
-                let headless = winit_windows.windows.is_empty();
-                let exiting = self.app_exit.is_some();
-                let reactive = matches!(self.update_mode, UpdateMode::Reactive { .. });
-                let all_invisible = winit_windows
-                    .windows
-                    .iter()
-                    .all(|(_, w)| !w.is_visible().unwrap_or(false));
-                if !exiting
-                    && (self.startup_forced_updates > 0
-                        || headless
-                        || all_invisible
-                        || reactive
-                        || self.window_event_received)
-                {
-                    self.redraw_requested(event_loop);
-                }
-            });
+            fn headless_or_all_invisible() -> bool {
+                WINIT_WINDOWS.with_borrow(|winit_windows| {
+                    winit_windows
+                        .windows
+                        .iter()
+                        .all(|(_, w)| !w.is_visible().unwrap_or(false))
+                })
+            }
+
+            if !self.app_exit.is_some()
+                && (self.startup_forced_updates > 0
+                    || matches!(self.update_mode, UpdateMode::Reactive { .. })
+                    || self.window_event_received
+                    || headless_or_all_invisible())
+            {
+                self.redraw_requested(event_loop);
+            }
         }
     }
 
@@ -1023,10 +1022,10 @@ mod tests {
         app.add_systems(
             Update,
             move |mut window: Single<(Entity, &mut Window)>,
-             mut window_backend_scale_factor_changed: MessageWriter<
-                WindowBackendScaleFactorChanged,
-            >,
-             mut window_scale_factor_changed: MessageWriter<WindowScaleFactorChanged>| {
+                  mut window_backend_scale_factor_changed: MessageWriter<
+                      WindowBackendScaleFactorChanged,
+                  >,
+                  mut window_scale_factor_changed: MessageWriter<WindowScaleFactorChanged>| {
                 react_to_scale_factor_change(
                     window.0,
                     &mut window.1,

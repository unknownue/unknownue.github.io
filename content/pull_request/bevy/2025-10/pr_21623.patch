diff --git a/crates/bevy_ecs/src/entity_disabling.rs b/crates/bevy_ecs/src/entity_disabling.rs
index c2fc5ee6c53b9..2460d72ab64d2 100644
--- a/crates/bevy_ecs/src/entity_disabling.rs
+++ b/crates/bevy_ecs/src/entity_disabling.rs
@@ -134,27 +134,6 @@ use {
 // This component is registered as a disabling component during World::bootstrap
 pub struct Disabled;
 
-/// A marker component for internal entities.
-///
-/// This component is used to mark entities as being internal to the engine.
-/// These entities should be hidden from the developer's view by default,
-/// as they are both noisy and expose confusing implementation details.
-/// Internal entities are hidden from queries using [`DefaultQueryFilters`].
-/// For more information, see [the module docs].
-/// We strongly advise against altering, removing or relying on entities tagged with this component in any way.
-/// These are "internal implementation details", and may not be robust to these changes or stable across minor Bevy versions.
-///
-/// [the module docs]: crate::entity_disabling
-#[derive(Component, Clone, Debug, Default)]
-#[cfg_attr(
-    feature = "bevy_reflect",
-    derive(Reflect),
-    reflect(Component),
-    reflect(Debug, Clone, Default)
-)]
-// This component is registered as a disabling component during World::bootstrap
-pub struct Internal;
-
 /// Default query filters work by excluding entities with certain components from most queries.
 ///
 /// If a query does not explicitly mention a given disabling component, it will not include entities with that component.
@@ -199,8 +178,6 @@ impl FromWorld for DefaultQueryFilters {
         let mut filters = DefaultQueryFilters::empty();
         let disabled_component_id = world.register_component::<Disabled>();
         filters.register_disabling_component(disabled_component_id);
-        let internal_component_id = world.register_component::<Internal>();
-        filters.register_disabling_component(internal_component_id);
         filters
     }
 }
@@ -263,10 +240,8 @@ mod tests {
 
     use super::*;
     use crate::{
-        observer::Observer,
-        prelude::{Add, EntityMut, EntityRef, On, World},
+        prelude::{EntityMut, EntityRef, World},
         query::{Has, With},
-        system::SystemIdMarker,
     };
     use alloc::{vec, vec::Vec};
 
@@ -376,22 +351,4 @@ mod tests {
         let mut query = world.query::<Option<&Disabled>>();
         assert_eq!(1, query.iter(&world).count());
     }
-
-    #[test]
-    fn internal_entities() {
-        let mut world = World::default();
-        world.register_system(|| {});
-        let mut query = world.query::<()>();
-        assert_eq!(query.iter(&world).count(), 0);
-        let mut query = world.query_filtered::<&SystemIdMarker, With<Internal>>();
-        assert_eq!(query.iter(&world).count(), 1);
-
-        #[derive(Component)]
-        struct A;
-        world.add_observer(|_: On<Add, A>| {});
-        let mut query = world.query::<()>();
-        assert_eq!(query.iter(&world).count(), 0);
-        let mut query = world.query_filtered::<&Observer, With<Internal>>();
-        assert_eq!(query.iter(&world).count(), 1);
-    }
 }
diff --git a/crates/bevy_ecs/src/observer/distributed_storage.rs b/crates/bevy_ecs/src/observer/distributed_storage.rs
index 3de8b486b880f..584713e5dc6ae 100644
--- a/crates/bevy_ecs/src/observer/distributed_storage.rs
+++ b/crates/bevy_ecs/src/observer/distributed_storage.rs
@@ -12,11 +12,8 @@
 use core::any::Any;
 
 use crate::{
-    component::{
-        ComponentCloneBehavior, ComponentId, Mutable, RequiredComponentsRegistrator, StorageType,
-    },
+    component::{ComponentCloneBehavior, ComponentId, Mutable, StorageType},
     entity::Entity,
-    entity_disabling::Internal,
     error::{ErrorContext, ErrorHandler},
     event::{Event, EventKey},
     lifecycle::{ComponentHook, HookContext},
@@ -360,13 +357,6 @@ impl Component for Observer {
             });
         })
     }
-
-    fn register_required_components(
-        _component_id: ComponentId,
-        required_components: &mut RequiredComponentsRegistrator,
-    ) {
-        required_components.register_required(Internal::default);
-    }
 }
 
 /// Store information about what an [`Observer`] observes.
diff --git a/crates/bevy_ecs/src/observer/mod.rs b/crates/bevy_ecs/src/observer/mod.rs
index d268085c40e8f..477cf440deb79 100644
--- a/crates/bevy_ecs/src/observer/mod.rs
+++ b/crates/bevy_ecs/src/observer/mod.rs
@@ -260,7 +260,6 @@ mod tests {
 
     use crate::{
         change_detection::MaybeLocation,
-        entity_disabling::Internal,
         event::{EntityComponentsTrigger, Event, GlobalTrigger},
         hierarchy::ChildOf,
         observer::{Observer, Replace},
@@ -453,13 +452,7 @@ mod tests {
         assert_eq!(vec!["add_2", "add_1"], world.resource::<Order>().0);
         // we have one A entity and two observers
         assert_eq!(world.query::<&A>().query(&world).count(), 1);
-        assert_eq!(
-            world
-                .query_filtered::<&Observer, Allow<Internal>>()
-                .query(&world)
-                .count(),
-            2
-        );
+        assert_eq!(world.query::<&Observer>().query(&world).count(), 2);
     }
 
     #[test]
diff --git a/crates/bevy_ecs/src/system/system_registry.rs b/crates/bevy_ecs/src/system/system_registry.rs
index 9719fb4311981..2c8b003064147 100644
--- a/crates/bevy_ecs/src/system/system_registry.rs
+++ b/crates/bevy_ecs/src/system/system_registry.rs
@@ -3,7 +3,6 @@ use crate::{change_detection::DetectChanges, HotPatchChanges};
 use crate::{
     change_detection::Mut,
     entity::Entity,
-    entity_disabling::Internal,
     error::BevyError,
     system::{
         input::SystemInput, BoxedSystem, IntoSystem, RunSystemError, SystemParamValidationError,
@@ -18,7 +17,7 @@ use thiserror::Error;
 
 /// A small wrapper for [`BoxedSystem`] that also keeps track whether or not the system has been initialized.
 #[derive(Component)]
-#[require(SystemIdMarker = SystemIdMarker::typed_system_id_marker::<I, O>(), Internal)]
+#[require(SystemIdMarker = SystemIdMarker::typed_system_id_marker::<I, O>())]
 pub(crate) struct RegisteredSystem<I, O> {
     initialized: bool,
     system: BoxedSystem<I, O>,
diff --git a/crates/bevy_scene/src/lib.rs b/crates/bevy_scene/src/lib.rs
index b93515f5fe5d2..95233cbd150ac 100644
--- a/crates/bevy_scene/src/lib.rs
+++ b/crates/bevy_scene/src/lib.rs
@@ -117,9 +117,7 @@ mod tests {
     use bevy_ecs::{
         component::Component,
         entity::Entity,
-        entity_disabling::Internal,
         hierarchy::{ChildOf, Children},
-        query::Allow,
         reflect::{AppTypeRegistry, ReflectComponent},
         world::World,
     };
@@ -306,11 +304,7 @@ mod tests {
             scene
                 .world
                 .insert_resource(world.resource::<AppTypeRegistry>().clone());
-            let entities: Vec<Entity> = scene
-                .world
-                .query_filtered::<Entity, Allow<Internal>>()
-                .iter(&scene.world)
-                .collect();
+            let entities: Vec<Entity> = scene.world.query::<Entity>().iter(&scene.world).collect();
             DynamicSceneBuilder::from_world(&scene.world)
                 .extract_entities(entities.into_iter())
                 .build()
diff --git a/crates/bevy_state/src/state_scoped.rs b/crates/bevy_state/src/state_scoped.rs
index 1dc59461bffaa..149e7f8cb73b6 100644
--- a/crates/bevy_state/src/state_scoped.rs
+++ b/crates/bevy_state/src/state_scoped.rs
@@ -3,7 +3,7 @@ use bevy_ecs::reflect::ReflectComponent;
 use bevy_ecs::{
     component::Component,
     entity::Entity,
-    entity_disabling::{Disabled, Internal},
+    entity_disabling::Disabled,
     message::MessageReader,
     query::Allow,
     system::{Commands, Query},
@@ -74,8 +74,7 @@ pub type StateScoped<S> = DespawnOnExit<S>;
 pub fn despawn_entities_on_exit_state<S: States>(
     mut commands: Commands,
     mut transitions: MessageReader<StateTransitionEvent<S>>,
-    // TODO: Use `AllowAll` once it exists: https://github.com/bevyengine/bevy/issues/21615
-    query: Query<(Entity, &DespawnOnExit<S>), (Allow<Disabled>, Allow<Internal>)>,
+    query: Query<(Entity, &DespawnOnExit<S>), Allow<Disabled>>,
 ) {
     // We use the latest event, because state machine internals generate at most 1
     // transition event (per type) each frame. No event means no change happened
@@ -141,8 +140,7 @@ pub struct DespawnOnEnter<S: States>(pub S);
 pub fn despawn_entities_on_enter_state<S: States>(
     mut commands: Commands,
     mut transitions: MessageReader<StateTransitionEvent<S>>,
-    // TODO: Use `AllowAll` once it exists: https://github.com/bevyengine/bevy/issues/21615
-    query: Query<(Entity, &DespawnOnEnter<S>), (Allow<Disabled>, Allow<Internal>)>,
+    query: Query<(Entity, &DespawnOnEnter<S>), Allow<Disabled>>,
 ) {
     // We use the latest event, because state machine internals generate at most 1
     // transition event (per type) each frame. No event means no change happened
diff --git a/release-content/migration-guides/internal_disabling_component_removed.md b/release-content/migration-guides/internal_disabling_component_removed.md
new file mode 100644
index 0000000000000..4694885554cfc
--- /dev/null
+++ b/release-content/migration-guides/internal_disabling_component_removed.md
@@ -0,0 +1,20 @@
+---
+title: "`Internal` has been removed"
+pull_requests: [ 21623 ]
+---
+
+The `Internal` component, previously added as a required component to both one-shot systems and observer entities has been removed.
+
+You can remove all references to it: these entities are no longer hidden by default query filters.
+If you have tests which rely on a specific number of entities existing in the world,
+you should refactor them to query for entities with a component that you care about:
+this is much more robust in general.
+
+This component was previously motivated by two factors:
+
+1. A desire to protect users from accidentally modifying engine internals, breaking their app in subtle and complex ways.
+2. A unified API for entity inspectors, allowing them to readily distinguish between "engine-internal" and "user-defined" entities.
+
+In practice, we found that this increased user friction and confusion without meaningfully improving robustness.
+Entity inspectors and similar tools can and should define their own entity categorization functionality:
+simply lumping all "internal" entities together is rarely helpful.

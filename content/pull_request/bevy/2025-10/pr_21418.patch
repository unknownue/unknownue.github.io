diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index ac4367d5561ad..08af31f6af846 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -339,7 +339,7 @@ jobs:
     steps:
       - uses: actions/checkout@v5
       - name: Check for typos
-        uses: crate-ci/typos@v1.36.3
+        uses: crate-ci/typos@v1.37.2
       - name: Typos info
         if: failure()
         run: |
diff --git a/crates/bevy_ecs/src/component/required.rs b/crates/bevy_ecs/src/component/required.rs
index 833606e536a6e..a873e2eb85421 100644
--- a/crates/bevy_ecs/src/component/required.rs
+++ b/crates/bevy_ecs/src/component/required.rs
@@ -296,7 +296,7 @@ impl RequiredComponents {
         // Note that `insert` does not change the order of components, meaning `component_id` will still appear
         // before any other component that requires it.
         //
-        // SAFETY: the caller guaranees that `required_component` is valid for the component with ID `required_id`.
+        // SAFETY: the caller guarantees that `required_component` is valid for the component with ID `required_id`.
         all.insert(required_id, required_component);
     }
 
diff --git a/crates/bevy_macro_utils/src/bevy_manifest.rs b/crates/bevy_macro_utils/src/bevy_manifest.rs
index 3c553032f8a94..845d6557bcfc5 100644
--- a/crates/bevy_macro_utils/src/bevy_manifest.rs
+++ b/crates/bevy_macro_utils/src/bevy_manifest.rs
@@ -42,7 +42,7 @@ impl BevyManifest {
         };
 
         let key = manifest_path.clone();
-        // TODO: Switch to using RwLockWriteGuard::downgrade when it stablizes.
+        // TODO: Switch to using RwLockWriteGuard::downgrade when it stabilizes.
         MANIFESTS
             .write()
             .unwrap_or_else(PoisonError::into_inner)
diff --git a/crates/bevy_tasks/src/single_threaded_task_pool.rs b/crates/bevy_tasks/src/single_threaded_task_pool.rs
index d81e43b4e91b9..b6888aec3cb13 100644
--- a/crates/bevy_tasks/src/single_threaded_task_pool.rs
+++ b/crates/bevy_tasks/src/single_threaded_task_pool.rs
@@ -356,7 +356,7 @@ mod test {
     /// woken by the external thread.
     #[test]
     fn scoped_spawn() {
-        let (sender, recever) = async_channel::unbounded();
+        let (sender, receiver) = async_channel::unbounded();
         let task_pool = TaskPool {};
         let thread = thread::spawn(move || {
             let duration = time::Duration::from_millis(50);
@@ -365,7 +365,7 @@ mod test {
         });
         task_pool.scope(|scope| {
             scope.spawn(async {
-                recever.recv().await
+                receiver.recv().await
             });
         });
     }

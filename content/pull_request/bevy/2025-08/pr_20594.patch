diff --git a/crates/bevy_sprite/Cargo.toml b/crates/bevy_sprite/Cargo.toml
index 8339230d6f4c6..bc851d94a58af 100644
--- a/crates/bevy_sprite/Cargo.toml
+++ b/crates/bevy_sprite/Cargo.toml
@@ -26,12 +26,17 @@ bevy_reflect = { path = "../bevy_reflect", version = "0.17.0-dev" }
 bevy_transform = { path = "../bevy_transform", version = "0.17.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.17.0-dev", optional = true }
 bevy_derive = { path = "../bevy_derive", version = "0.17.0-dev" }
+bevy_text = { path = "../bevy_text", version = "0.17.0-dev" }
 
 # other
 radsort = "0.1"
 tracing = { version = "0.1", default-features = false, features = ["std"] }
 wgpu-types = { version = "26", default-features = false }
 
+[dev-dependencies]
+approx = "0.5.1"
+bevy_window = { path = "../bevy_window", version = "0.17.0-dev" }
+
 [lints]
 workspace = true
 
diff --git a/crates/bevy_sprite/src/lib.rs b/crates/bevy_sprite/src/lib.rs
index 5f5a2de77c415..115e996e6aedf 100644
--- a/crates/bevy_sprite/src/lib.rs
+++ b/crates/bevy_sprite/src/lib.rs
@@ -13,6 +13,7 @@ extern crate alloc;
 #[cfg(feature = "bevy_sprite_picking_backend")]
 mod picking_backend;
 mod sprite;
+mod text2d;
 mod texture_slice;
 
 /// The sprite prelude.
@@ -27,20 +28,26 @@ pub mod prelude {
     #[doc(hidden)]
     pub use crate::{
         sprite::{Sprite, SpriteImageMode},
+        text2d::{Text2d, Text2dReader, Text2dWriter},
         texture_slice::{BorderRect, SliceScaleMode, TextureSlice, TextureSlicer},
         ScalingMode,
     };
 }
 
+use bevy_app::AnimationSystems;
 use bevy_asset::Assets;
 use bevy_camera::{
     primitives::{Aabb, MeshAabb},
-    visibility::{NoFrustumCulling, VisibilitySystems},
+    visibility::NoFrustumCulling,
 };
+use bevy_camera::{visibility::VisibilitySystems, CameraUpdateSystems};
 use bevy_mesh::{Mesh, Mesh2d};
+use bevy_text::detect_text_needs_rerender;
+use bevy_text::Text2dUpdateSystems;
 #[cfg(feature = "bevy_sprite_picking_backend")]
 pub use picking_backend::*;
 pub use sprite::*;
+pub use text2d::*;
 pub use texture_slice::*;
 
 use bevy_app::prelude::*;
@@ -72,6 +79,24 @@ impl Plugin for SpritePlugin {
             calculate_bounds_2d.in_set(VisibilitySystems::CalculateBounds),
         );
 
+        app.add_systems(
+            PostUpdate,
+            (
+                detect_text_needs_rerender::<Text2d>,
+                update_text2d_layout
+                    // Potential conflict: `Assets<Image>`
+                    // In practice, they run independently since `bevy_render::camera_update_system`
+                    // will only ever observe its own render target, and `update_text2d_layout`
+                    // will never modify a pre-existing `Image` asset.
+                    .ambiguous_with(CameraUpdateSystems)
+                    .after(bevy_text::remove_dropped_font_atlas_sets),
+                calculate_bounds_text2d.in_set(VisibilitySystems::CalculateBounds),
+            )
+                .chain()
+                .in_set(Text2dUpdateSystems)
+                .after(AnimationSystems),
+        );
+
         #[cfg(feature = "bevy_sprite_picking_backend")]
         app.add_plugins(SpritePickingPlugin);
     }
diff --git a/crates/bevy_text/src/text2d.rs b/crates/bevy_sprite/src/text2d.rs
similarity index 95%
rename from crates/bevy_text/src/text2d.rs
rename to crates/bevy_sprite/src/text2d.rs
index 635c3857df3fd..cb3c6dde8d034 100644
--- a/crates/bevy_text/src/text2d.rs
+++ b/crates/bevy_sprite/src/text2d.rs
@@ -1,10 +1,10 @@
-use crate::pipeline::CosmicFontSystem;
-use crate::{
-    ComputedTextBlock, Font, FontAtlasSets, LineBreak, SwashCache, TextBounds, TextColor,
-    TextError, TextFont, TextLayout, TextLayoutInfo, TextPipeline, TextReader, TextRoot,
+use bevy_text::{
+    ComputedTextBlock, CosmicFontSystem, Font, FontAtlasSets, LineBreak, SwashCache, TextBounds,
+    TextColor, TextError, TextFont, TextLayout, TextLayoutInfo, TextPipeline, TextReader, TextRoot,
     TextSpanAccess, TextWriter,
 };
 
+use crate::{Anchor, Sprite};
 use bevy_asset::Assets;
 use bevy_camera::primitives::Aabb;
 use bevy_camera::visibility::{self, NoFrustumCulling, Visibility, VisibilityClass};
@@ -22,7 +22,6 @@ use bevy_ecs::{
 use bevy_image::prelude::*;
 use bevy_math::{Vec2, Vec3};
 use bevy_reflect::{prelude::ReflectDefault, Reflect};
-use bevy_sprite::{Anchor, Sprite};
 use bevy_transform::components::Transform;
 use bevy_window::{PrimaryWindow, Window};
 
@@ -32,7 +31,7 @@ use bevy_window::{PrimaryWindow, Window};
 /// [Example usage.](https://github.com/bevyengine/bevy/blob/latest/examples/2d/text2d.rs)
 ///
 /// The string in this component is the first 'text span' in a hierarchy of text spans that are collected into
-/// a [`ComputedTextBlock`]. See [`TextSpan`](crate::TextSpan) for the component used by children of entities with [`Text2d`].
+/// a [`ComputedTextBlock`]. See `TextSpan` for the component used by children of entities with [`Text2d`].
 ///
 /// With `Text2d` the `justify` field of [`TextLayout`] only affects the internal alignment of a block of text and not its
 /// relative position, which is controlled by the [`Anchor`] component.
@@ -44,7 +43,8 @@ use bevy_window::{PrimaryWindow, Window};
 /// # use bevy_color::Color;
 /// # use bevy_color::palettes::basic::BLUE;
 /// # use bevy_ecs::world::World;
-/// # use bevy_text::{Font, Justify, Text2d, TextLayout, TextFont, TextColor, TextSpan};
+/// # use bevy_text::{Font, Justify, TextLayout, TextFont, TextColor, TextSpan};
+/// # use bevy_sprite::Text2d;
 /// #
 /// # let font_handle: Handle<Font> = Default::default();
 /// # let mut world = World::default();
@@ -278,8 +278,7 @@ mod tests {
     use bevy_app::{App, Update};
     use bevy_asset::{load_internal_binary_asset, Handle};
     use bevy_ecs::schedule::IntoScheduleConfigs;
-
-    use crate::{detect_text_needs_rerender, TextIterScratch};
+    use bevy_text::{detect_text_needs_rerender, TextIterScratch};
 
     use super::*;
 
@@ -310,7 +309,7 @@ mod tests {
         load_internal_binary_asset!(
             app,
             Handle::default(),
-            "FiraMono-subset.ttf",
+            "../../bevy_text/src/FiraMono-subset.ttf",
             |bytes: &[u8], _path: String| { Font::try_from_bytes(bytes.to_vec()).unwrap() }
         );
 
diff --git a/crates/bevy_sprite_render/Cargo.toml b/crates/bevy_sprite_render/Cargo.toml
index 08113f7051849..3e99922125ea8 100644
--- a/crates/bevy_sprite_render/Cargo.toml
+++ b/crates/bevy_sprite_render/Cargo.toml
@@ -25,6 +25,7 @@ bevy_mesh = { path = "../bevy_mesh", version = "0.17.0-dev" }
 bevy_math = { path = "../bevy_math", version = "0.17.0-dev" }
 bevy_shader = { path = "../bevy_shader", version = "0.17.0-dev" }
 bevy_sprite = { path = "../bevy_sprite", version = "0.17.0-dev" }
+bevy_text = { path = "../bevy_text", version = "0.17.0-dev" }
 bevy_reflect = { path = "../bevy_reflect", version = "0.17.0-dev" }
 bevy_render = { path = "../bevy_render", version = "0.17.0-dev" }
 bevy_transform = { path = "../bevy_transform", version = "0.17.0-dev" }
@@ -33,6 +34,7 @@ bevy_derive = { path = "../bevy_derive", version = "0.17.0-dev" }
 bevy_platform = { path = "../bevy_platform", version = "0.17.0-dev", default-features = false, features = [
   "std",
 ] }
+bevy_window = { path = "../bevy_window", version = "0.17.0-dev" }
 
 # other
 bytemuck = { version = "1", features = ["derive", "must_cast"] }
diff --git a/crates/bevy_sprite_render/src/lib.rs b/crates/bevy_sprite_render/src/lib.rs
index 5819a5da63766..801336b849677 100644
--- a/crates/bevy_sprite_render/src/lib.rs
+++ b/crates/bevy_sprite_render/src/lib.rs
@@ -12,6 +12,7 @@ extern crate alloc;
 
 mod mesh2d;
 mod render;
+mod text2d;
 mod texture_slice;
 mod tilemap_chunk;
 
@@ -42,6 +43,8 @@ use bevy_render::{
 };
 use bevy_sprite::Sprite;
 
+use crate::text2d::extract_text2d_sprite;
+
 /// Adds support for 2D sprite rendering.
 #[derive(Default)]
 pub struct SpriteRenderingPlugin;
@@ -100,6 +103,7 @@ impl Plugin for SpriteRenderingPlugin {
                     (
                         extract_sprites.in_set(SpriteSystems::ExtractSprites),
                         extract_sprite_events,
+                        extract_text2d_sprite.after(SpriteSystems::ExtractSprites),
                     ),
                 )
                 .add_systems(
diff --git a/crates/bevy_ui_render/src/text2d.rs b/crates/bevy_sprite_render/src/text2d/mod.rs
similarity index 97%
rename from crates/bevy_ui_render/src/text2d.rs
rename to crates/bevy_sprite_render/src/text2d/mod.rs
index faa650853aa94..940f1288387c3 100644
--- a/crates/bevy_ui_render/src/text2d.rs
+++ b/crates/bevy_sprite_render/src/text2d/mod.rs
@@ -1,3 +1,6 @@
+use crate::{
+    ExtractedSlice, ExtractedSlices, ExtractedSprite, ExtractedSpriteKind, ExtractedSprites,
+};
 use bevy_asset::{AssetId, Assets};
 use bevy_camera::visibility::ViewVisibility;
 use bevy_color::LinearRgba;
@@ -10,13 +13,9 @@ use bevy_image::prelude::*;
 use bevy_math::Vec2;
 use bevy_render::sync_world::TemporaryRenderEntity;
 use bevy_render::Extract;
-use bevy_sprite::Anchor;
-use bevy_sprite_render::{
-    ExtractedSlice, ExtractedSlices, ExtractedSprite, ExtractedSpriteKind, ExtractedSprites,
-};
+use bevy_sprite::{Anchor, Text2dShadow};
 use bevy_text::{
-    ComputedTextBlock, PositionedGlyph, Text2dShadow, TextBackgroundColor, TextBounds, TextColor,
-    TextLayoutInfo,
+    ComputedTextBlock, PositionedGlyph, TextBackgroundColor, TextBounds, TextColor, TextLayoutInfo,
 };
 use bevy_transform::prelude::GlobalTransform;
 use bevy_window::{PrimaryWindow, Window};
diff --git a/crates/bevy_text/Cargo.toml b/crates/bevy_text/Cargo.toml
index 50cd2f55c5e7b..1d46bf56511d5 100644
--- a/crates/bevy_text/Cargo.toml
+++ b/crates/bevy_text/Cargo.toml
@@ -22,10 +22,6 @@ bevy_image = { path = "../bevy_image", version = "0.17.0-dev" }
 bevy_log = { path = "../bevy_log", version = "0.17.0-dev" }
 bevy_math = { path = "../bevy_math", version = "0.17.0-dev" }
 bevy_reflect = { path = "../bevy_reflect", version = "0.17.0-dev" }
-bevy_camera = { path = "../bevy_camera", version = "0.17.0-dev" }
-bevy_sprite = { path = "../bevy_sprite", version = "0.17.0-dev" }
-bevy_transform = { path = "../bevy_transform", version = "0.17.0-dev" }
-bevy_window = { path = "../bevy_window", version = "0.17.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.17.0-dev" }
 bevy_platform = { path = "../bevy_platform", version = "0.17.0-dev", default-features = false, features = [
   "std",
@@ -41,9 +37,6 @@ smallvec = { version = "1", default-features = false }
 sys-locale = "0.3.0"
 tracing = { version = "0.1", default-features = false, features = ["std"] }
 
-[dev-dependencies]
-approx = "0.5.1"
-
 [lints]
 workspace = true
 
diff --git a/crates/bevy_text/src/lib.rs b/crates/bevy_text/src/lib.rs
index b5b4381683b12..1e341880e5336 100644
--- a/crates/bevy_text/src/lib.rs
+++ b/crates/bevy_text/src/lib.rs
@@ -20,7 +20,7 @@
 //! Note that text measurement is only relevant in a UI context.
 //!
 //! With the actual text bounds defined, the `bevy_ui::widget::text::text_system` system (in a UI context)
-//! or [`text2d::update_text2d_layout`] system (in a 2d world space context)
+//! or `bevy_sprite::text2d::update_text2d_layout` system (in a 2d world space context)
 //! passes it into [`TextPipeline::queue_text`], which:
 //!
 //! 1. updates a [`Buffer`](cosmic_text::Buffer) from the [`TextSpan`]s, generating new [`FontAtlasSet`]s if necessary.
@@ -40,10 +40,8 @@ mod font_loader;
 mod glyph;
 mod pipeline;
 mod text;
-mod text2d;
 mod text_access;
 
-use bevy_camera::{visibility::VisibilitySystems, CameraUpdateSystems};
 pub use bounds::*;
 pub use error::*;
 pub use font::*;
@@ -53,7 +51,6 @@ pub use font_loader::*;
 pub use glyph::*;
 pub use pipeline::*;
 pub use text::*;
-pub use text2d::*;
 pub use text_access::*;
 
 /// The text prelude.
@@ -62,12 +59,11 @@ pub use text_access::*;
 pub mod prelude {
     #[doc(hidden)]
     pub use crate::{
-        Font, Justify, LineBreak, Text2d, Text2dReader, Text2dWriter, TextColor, TextError,
-        TextFont, TextLayout, TextSpan,
+        Font, Justify, LineBreak, TextColor, TextError, TextFont, TextLayout, TextSpan,
     };
 }
 
-use bevy_app::{prelude::*, AnimationSystems};
+use bevy_app::prelude::*;
 use bevy_asset::{AssetApp, AssetEventSystems};
 use bevy_ecs::prelude::*;
 
@@ -101,20 +97,7 @@ impl Plugin for TextPlugin {
             .init_resource::<TextIterScratch>()
             .add_systems(
                 PostUpdate,
-                (
-                    remove_dropped_font_atlas_sets.before(AssetEventSystems),
-                    detect_text_needs_rerender::<Text2d>,
-                    update_text2d_layout
-                        // Potential conflict: `Assets<Image>`
-                        // In practice, they run independently since `bevy_render::camera_update_system`
-                        // will only ever observe its own render target, and `update_text2d_layout`
-                        // will never modify a pre-existing `Image` asset.
-                        .ambiguous_with(CameraUpdateSystems),
-                    calculate_bounds_text2d.in_set(VisibilitySystems::CalculateBounds),
-                )
-                    .chain()
-                    .in_set(Text2dUpdateSystems)
-                    .after(AnimationSystems),
+                remove_dropped_font_atlas_sets.before(AssetEventSystems),
             )
             .add_systems(Last, trim_cosmic_cache);
 
diff --git a/crates/bevy_text/src/pipeline.rs b/crates/bevy_text/src/pipeline.rs
index 8c1136c0636d4..73e30e3756b6b 100644
--- a/crates/bevy_text/src/pipeline.rs
+++ b/crates/bevy_text/src/pipeline.rs
@@ -64,7 +64,7 @@ pub struct FontFaceInfo {
     pub family_name: Arc<str>,
 }
 
-/// The `TextPipeline` is used to layout and render text blocks (see `Text`/[`Text2d`](crate::Text2d)).
+/// The `TextPipeline` is used to layout and render text blocks (see `Text`/`Text2d`).
 ///
 /// See the [crate-level documentation](crate) for more information.
 #[derive(Default, Resource)]
diff --git a/crates/bevy_text/src/text.rs b/crates/bevy_text/src/text.rs
index c4cbb9afc1ef1..88c766c6d822f 100644
--- a/crates/bevy_text/src/text.rs
+++ b/crates/bevy_text/src/text.rs
@@ -109,7 +109,7 @@ impl Default for ComputedTextBlock {
 /// spans associated with a text block are collected into [`ComputedTextBlock`] for layout, and then inserted
 /// to [`TextLayoutInfo`] for rendering.
 ///
-/// See [`Text2d`](crate::Text2d) for the core component of 2d text, and `Text` in `bevy_ui` for UI text.
+/// See `Text2d` in `bevy_sprite` for the core component of 2d text, and `Text` in `bevy_ui` for UI text.
 #[derive(Component, Debug, Copy, Clone, Default, Reflect)]
 #[reflect(Component, Default, Debug, Clone)]
 #[require(ComputedTextBlock, TextLayoutInfo)]
@@ -170,46 +170,6 @@ impl TextLayout {
 /// with `TextSpan` extend this text by appending their content to the parent's text in sequence to
 /// form a [`ComputedTextBlock`]. The parent's [`TextLayout`] determines the layout of the block
 /// but each node has its own [`TextFont`] and [`TextColor`].
-///
-/// ```
-/// # use bevy_asset::Handle;
-/// # use bevy_color::Color;
-/// # use bevy_color::palettes::basic::{BLUE, GREEN, RED};
-/// # use bevy_ecs::{children, spawn::SpawnRelated, world::World};
-/// # use bevy_text::{Font, Justify, Text2d, TextColor, TextLayout, TextFont, TextSpan};
-///
-/// # let font_handle: Handle<Font> = Default::default();
-/// # let mut world = World::default();
-/// #
-/// world.spawn((
-///     // `Text` or `Text2d` is needed.
-///     Text2d::new("Bevy\n"),
-///     // Layout of the entire block of text.
-///     TextLayout::new_with_justify(Justify::Center),
-///     // TextFont of this node. Won't apply to children.
-///     TextFont::from_font_size(50.0),
-///     // TextColor of this node. Won't apply to children.
-///     TextColor(BLUE.into()),
-///     // Children must be `TextSpan`, not `Text` or `Text2d`.
-///     children![
-///         (
-///             TextSpan::new("Bevy\n"),
-///             TextFont::from_font_size(40.0),
-///             TextColor(RED.into()),
-///         ),
-///         (
-///             TextSpan::new("Bevy\n"),
-///             TextFont::from_font_size(30.0),
-///             // Default TextColor will be inserted because TextSpan requires it.
-///         ),
-///         (
-///             TextSpan::new("Bevy"),
-///             TextColor(GREEN.into()),
-///             // Default TextFont will be inserted because TextSpan requires it.
-///         )
-///     ],
-/// ));
-/// ```
 #[derive(Component, Debug, Default, Clone, Deref, DerefMut, Reflect)]
 #[reflect(Component, Default, Debug, Clone)]
 #[require(TextFont, TextColor)]
@@ -500,7 +460,7 @@ pub enum FontSmoothing {
 
 /// System that detects changes to text blocks and sets `ComputedTextBlock::should_rerender`.
 ///
-/// Generic over the root text component and text span component. For example, [`Text2d`](crate::Text2d)/[`TextSpan`] for
+/// Generic over the root text component and text span component. For example, `Text2d`/[`TextSpan`] for
 /// 2d or `Text`/[`TextSpan`] for UI.
 pub fn detect_text_needs_rerender<Root: Component>(
     changed_roots: Query<
diff --git a/crates/bevy_text/src/text_access.rs b/crates/bevy_text/src/text_access.rs
index 3c1e83c959e3a..7de9e8e323b36 100644
--- a/crates/bevy_text/src/text_access.rs
+++ b/crates/bevy_text/src/text_access.rs
@@ -21,8 +21,9 @@ pub trait TextRoot: TextSpanAccess + From<String> {}
 /// Helper trait for the text span components in a text block.
 pub trait TextSpanComponent: TextSpanAccess + From<String> {}
 
+/// Scratch buffer used to store intermediate state when iterating over text spans.
 #[derive(Resource, Default)]
-pub(crate) struct TextIterScratch {
+pub struct TextIterScratch {
     stack: Vec<(&'static Children, usize)>,
 }
 
diff --git a/crates/bevy_ui/src/lib.rs b/crates/bevy_ui/src/lib.rs
index 9e2dcb5bc0245..eb62969c6eeb6 100644
--- a/crates/bevy_ui/src/lib.rs
+++ b/crates/bevy_ui/src/lib.rs
@@ -184,8 +184,8 @@ impl Plugin for UiPlugin {
 
         let ui_layout_system_config = ui_layout_system_config
             // Text and Text2D operate on disjoint sets of entities
-            .ambiguous_with(bevy_text::update_text2d_layout)
-            .ambiguous_with(bevy_text::detect_text_needs_rerender::<bevy_text::Text2d>);
+            .ambiguous_with(bevy_sprite::update_text2d_layout)
+            .ambiguous_with(bevy_text::detect_text_needs_rerender::<bevy_sprite::Text2d>);
 
         app.add_systems(
             PostUpdate,
@@ -236,11 +236,11 @@ fn build_text_interop(app: &mut App) {
                 .chain()
                 .in_set(UiSystems::Content)
                 // Text and Text2d are independent.
-                .ambiguous_with(bevy_text::detect_text_needs_rerender::<bevy_text::Text2d>)
+                .ambiguous_with(bevy_text::detect_text_needs_rerender::<bevy_sprite::Text2d>)
                 // Potential conflict: `Assets<Image>`
                 // Since both systems will only ever insert new [`Image`] assets,
                 // they will never observe each other's effects.
-                .ambiguous_with(bevy_text::update_text2d_layout)
+                .ambiguous_with(bevy_sprite::update_text2d_layout)
                 // We assume Text is on disjoint UI entities to ImageNode and UiTextureAtlasImage
                 // FIXME: Add an archetype invariant for this https://github.com/bevyengine/bevy/issues/1481.
                 .ambiguous_with(widget::update_image_content_size_system),
@@ -249,9 +249,9 @@ fn build_text_interop(app: &mut App) {
                 .after(bevy_text::remove_dropped_font_atlas_sets)
                 .before(bevy_asset::AssetEventSystems)
                 // Text2d and bevy_ui text are entirely on separate entities
-                .ambiguous_with(bevy_text::detect_text_needs_rerender::<bevy_text::Text2d>)
-                .ambiguous_with(bevy_text::update_text2d_layout)
-                .ambiguous_with(bevy_text::calculate_bounds_text2d),
+                .ambiguous_with(bevy_text::detect_text_needs_rerender::<bevy_sprite::Text2d>)
+                .ambiguous_with(bevy_sprite::update_text2d_layout)
+                .ambiguous_with(bevy_sprite::calculate_bounds_text2d),
         ),
     );
 
@@ -271,6 +271,6 @@ fn build_text_interop(app: &mut App) {
 
     app.configure_sets(
         PostUpdate,
-        AmbiguousWithUpdateText2dLayout.ambiguous_with(bevy_text::update_text2d_layout),
+        AmbiguousWithUpdateText2dLayout.ambiguous_with(bevy_sprite::update_text2d_layout),
     );
 }
diff --git a/crates/bevy_ui_render/src/lib.rs b/crates/bevy_ui_render/src/lib.rs
index fc575d5ae2018..713c2e86be7cc 100644
--- a/crates/bevy_ui_render/src/lib.rs
+++ b/crates/bevy_ui_render/src/lib.rs
@@ -11,13 +11,10 @@ pub mod box_shadow;
 mod gradient;
 mod pipeline;
 mod render_pass;
-mod text2d;
 pub mod ui_material;
 mod ui_material_pipeline;
 pub mod ui_texture_slice_pipeline;
 
-use text2d::extract_text2d_sprite;
-
 #[cfg(feature = "bevy_ui_debug")]
 mod debug_overlay;
 
@@ -26,6 +23,7 @@ use bevy_camera::{Camera, Camera2d, Camera3d};
 use bevy_reflect::prelude::ReflectDefault;
 use bevy_reflect::Reflect;
 use bevy_shader::load_shader_library;
+use bevy_sprite_render::SpriteAssetEvents;
 use bevy_ui::widget::{ImageNode, TextShadow, ViewportNode};
 use bevy_ui::{
     BackgroundColor, BorderColor, CalculatedClip, ComputedNode, ComputedUiTargetCamera, Display,
@@ -55,8 +53,7 @@ use bevy_render::{
     view::{ExtractedView, Hdr, RetainedViewEntity, ViewUniforms},
     Extract, ExtractSchedule, Render, RenderApp, RenderStartup, RenderSystems,
 };
-use bevy_sprite::{BorderRect, SpriteSystems};
-use bevy_sprite_render::SpriteAssetEvents;
+use bevy_sprite::BorderRect;
 #[cfg(feature = "bevy_ui_debug")]
 pub use debug_overlay::UiDebugOptions;
 use gradient::GradientPlugin;
@@ -286,11 +283,6 @@ impl Plugin for UiRenderPlugin {
                 }
             });
 
-        render_app.add_systems(
-            ExtractSchedule,
-            extract_text2d_sprite.after(SpriteSystems::ExtractSprites),
-        );
-
         app.add_plugins(UiTextureSlicerPlugin);
         app.add_plugins(GradientPlugin);
         app.add_plugins(BoxShadowPlugin);
diff --git a/examples/2d/text2d.rs b/examples/2d/text2d.rs
index fddba6afd9229..f1b5685ec757d 100644
--- a/examples/2d/text2d.rs
+++ b/examples/2d/text2d.rs
@@ -9,8 +9,8 @@ use bevy::{
     color::palettes::css::*,
     math::ops,
     prelude::*,
-    sprite::Anchor,
-    text::{FontSmoothing, LineBreak, Text2dShadow, TextBounds},
+    sprite::{Anchor, Text2dShadow},
+    text::{FontSmoothing, LineBreak, TextBounds},
 };
 
 fn main() {
diff --git a/release-content/migration-guides/text2d_moved_to_bevy_sprite.md b/release-content/migration-guides/text2d_moved_to_bevy_sprite.md
new file mode 100644
index 0000000000000..53d020c937dae
--- /dev/null
+++ b/release-content/migration-guides/text2d_moved_to_bevy_sprite.md
@@ -0,0 +1,7 @@
+---
+title: "`Text2d` moved to `bevy_sprite`"
+pull_requests: [20594]
+---
+
+The world-space text types `Text2d` and `Text2dShadow` have been moved to the `bevy_sprite` crate, along with their associated systems.
+Import them directly or from `bevy::sprite` now.

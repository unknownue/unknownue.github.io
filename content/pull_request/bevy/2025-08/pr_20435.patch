diff --git a/crates/bevy_animation/src/lib.rs b/crates/bevy_animation/src/lib.rs
index 0c667417b5ae3..67e5cde0466a9 100644
--- a/crates/bevy_animation/src/lib.rs
+++ b/crates/bevy_animation/src/lib.rs
@@ -40,7 +40,6 @@ use bevy_reflect::{prelude::ReflectDefault, Reflect, TypePath};
 use bevy_time::Time;
 use bevy_transform::TransformSystems;
 use bevy_utils::{PreHashMap, PreHashMapExt, TypeIdMap};
-use petgraph::graph::NodeIndex;
 use serde::{Deserialize, Serialize};
 use thread_local::ThreadLocal;
 use tracing::{trace, warn};
@@ -60,7 +59,7 @@ pub mod prelude {
 use crate::{
     animation_curves::AnimationCurve,
     graph::{AnimationGraph, AnimationGraphAssetLoader, AnimationNodeIndex},
-    transition::{advance_transitions, expire_completed_transitions, AnimationTransitions},
+    transition::{advance_transitions, expire_completed_transitions},
 };
 use alloc::sync::Arc;
 
@@ -1234,12 +1233,6 @@ impl Plugin for AnimationPlugin {
             .init_asset_loader::<AnimationGraphAssetLoader>()
             .register_asset_reflect::<AnimationClip>()
             .register_asset_reflect::<AnimationGraph>()
-            .register_type::<AnimationPlayer>()
-            .register_type::<AnimationTarget>()
-            .register_type::<AnimationTransitions>()
-            .register_type::<AnimationGraphHandle>()
-            .register_type::<NodeIndex>()
-            .register_type::<ThreadedAnimationGraphs>()
             .init_resource::<ThreadedAnimationGraphs>()
             .add_systems(
                 PostUpdate,
diff --git a/crates/bevy_anti_aliasing/src/contrast_adaptive_sharpening/mod.rs b/crates/bevy_anti_aliasing/src/contrast_adaptive_sharpening/mod.rs
index 872175dbc741b..845f4c98dd462 100644
--- a/crates/bevy_anti_aliasing/src/contrast_adaptive_sharpening/mod.rs
+++ b/crates/bevy_anti_aliasing/src/contrast_adaptive_sharpening/mod.rs
@@ -103,7 +103,6 @@ impl Plugin for CasPlugin {
     fn build(&self, app: &mut App) {
         embedded_asset!(app, "robust_contrast_adaptive_sharpening.wgsl");
 
-        app.register_type::<ContrastAdaptiveSharpening>();
         app.add_plugins((
             ExtractComponentPlugin::<ContrastAdaptiveSharpening>::default(),
             UniformComponentPlugin::<CasUniform>::default(),
diff --git a/crates/bevy_anti_aliasing/src/fxaa/mod.rs b/crates/bevy_anti_aliasing/src/fxaa/mod.rs
index bba559626379b..6b67770230684 100644
--- a/crates/bevy_anti_aliasing/src/fxaa/mod.rs
+++ b/crates/bevy_anti_aliasing/src/fxaa/mod.rs
@@ -86,7 +86,6 @@ impl Plugin for FxaaPlugin {
     fn build(&self, app: &mut App) {
         embedded_asset!(app, "fxaa.wgsl");
 
-        app.register_type::<Fxaa>();
         app.add_plugins(ExtractComponentPlugin::<Fxaa>::default());
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
diff --git a/crates/bevy_anti_aliasing/src/smaa/mod.rs b/crates/bevy_anti_aliasing/src/smaa/mod.rs
index d54dff8e9ce5d..3d3913ccce4ca 100644
--- a/crates/bevy_anti_aliasing/src/smaa/mod.rs
+++ b/crates/bevy_anti_aliasing/src/smaa/mod.rs
@@ -313,8 +313,7 @@ impl Plugin for SmaaPlugin {
             }
         };
 
-        app.add_plugins(ExtractComponentPlugin::<Smaa>::default())
-            .register_type::<Smaa>();
+        app.add_plugins(ExtractComponentPlugin::<Smaa>::default());
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
             return;
diff --git a/crates/bevy_anti_aliasing/src/taa/mod.rs b/crates/bevy_anti_aliasing/src/taa/mod.rs
index 263ebd00436ff..3055160a820c9 100644
--- a/crates/bevy_anti_aliasing/src/taa/mod.rs
+++ b/crates/bevy_anti_aliasing/src/taa/mod.rs
@@ -51,8 +51,6 @@ impl Plugin for TemporalAntiAliasPlugin {
     fn build(&self, app: &mut App) {
         embedded_asset!(app, "taa.wgsl");
 
-        app.register_type::<TemporalAntiAliasing>();
-
         app.add_plugins(SyncComponentPlugin::<TemporalAntiAliasing>::default());
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
diff --git a/crates/bevy_app/src/app.rs b/crates/bevy_app/src/app.rs
index 9ff4792960679..c6c16cb5bed86 100644
--- a/crates/bevy_app/src/app.rs
+++ b/crates/bevy_app/src/app.rs
@@ -106,18 +106,11 @@ impl Default for App {
 
         #[cfg(feature = "bevy_reflect")]
         {
-            use bevy_ecs::observer::ObservedBy;
-
             #[cfg(not(feature = "reflect_auto_register"))]
             app.init_resource::<AppTypeRegistry>();
 
             #[cfg(feature = "reflect_auto_register")]
             app.insert_resource(AppTypeRegistry::new_with_derived_types());
-
-            app.register_type::<Name>();
-            app.register_type::<ChildOf>();
-            app.register_type::<Children>();
-            app.register_type::<ObservedBy>();
         }
 
         #[cfg(feature = "reflect_functions")]
diff --git a/crates/bevy_asset/src/lib.rs b/crates/bevy_asset/src/lib.rs
index 8186b6315d5b4..3c939b07cf8b0 100644
--- a/crates/bevy_asset/src/lib.rs
+++ b/crates/bevy_asset/src/lib.rs
@@ -422,8 +422,7 @@ impl Plugin for AssetPlugin {
             // and as a result has ambiguous system ordering with all other systems in `PreUpdate`.
             // This is virtually never a real problem: asset loading is async and so anything that interacts directly with it
             // needs to be robust to stochastic delays anyways.
-            .add_systems(PreUpdate, handle_internal_asset_events.ambiguous_with_all())
-            .register_type::<AssetPath>();
+            .add_systems(PreUpdate, handle_internal_asset_events.ambiguous_with_all());
     }
 }
 
diff --git a/crates/bevy_audio/src/lib.rs b/crates/bevy_audio/src/lib.rs
index e3b5e02569fd2..43e7cbe05c0e0 100644
--- a/crates/bevy_audio/src/lib.rs
+++ b/crates/bevy_audio/src/lib.rs
@@ -80,13 +80,7 @@ pub struct AudioPlugin {
 
 impl Plugin for AudioPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<Volume>()
-            .register_type::<GlobalVolume>()
-            .register_type::<SpatialListener>()
-            .register_type::<DefaultSpatialScale>()
-            .register_type::<PlaybackMode>()
-            .register_type::<PlaybackSettings>()
-            .insert_resource(self.global_volume)
+        app.insert_resource(self.global_volume)
             .insert_resource(DefaultSpatialScale(self.default_spatial_scale))
             .configure_sets(
                 PostUpdate,
diff --git a/crates/bevy_camera/src/lib.rs b/crates/bevy_camera/src/lib.rs
index bf0ededae8314..1ae5c8107860e 100644
--- a/crates/bevy_camera/src/lib.rs
+++ b/crates/bevy_camera/src/lib.rs
@@ -18,20 +18,10 @@ pub struct CameraPlugin;
 
 impl Plugin for CameraPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<Camera>()
-            .register_type::<ClearColor>()
-            .register_type::<CameraMainTextureUsages>()
-            .register_type::<Exposure>()
-            .register_type::<MainPassResolutionOverride>()
-            .register_type::<primitives::Aabb>()
-            .register_type::<primitives::CascadesFrusta>()
-            .register_type::<primitives::CubemapFrusta>()
-            .register_type::<primitives::Frustum>()
-            .init_resource::<ClearColor>()
-            .add_plugins((
-                CameraProjectionPlugin,
-                visibility::VisibilityPlugin,
-                visibility::VisibilityRangePlugin,
-            ));
+        app.init_resource::<ClearColor>().add_plugins((
+            CameraProjectionPlugin,
+            visibility::VisibilityPlugin,
+            visibility::VisibilityRangePlugin,
+        ));
     }
 }
diff --git a/crates/bevy_camera/src/projection.rs b/crates/bevy_camera/src/projection.rs
index 847714208d12a..1d2bfdab27561 100644
--- a/crates/bevy_camera/src/projection.rs
+++ b/crates/bevy_camera/src/projection.rs
@@ -18,16 +18,12 @@ pub struct CameraProjectionPlugin;
 
 impl Plugin for CameraProjectionPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<Projection>()
-            .register_type::<PerspectiveProjection>()
-            .register_type::<OrthographicProjection>()
-            .register_type::<CustomProjection>()
-            .add_systems(
-                PostUpdate,
-                crate::visibility::update_frusta
-                    .in_set(VisibilitySystems::UpdateFrusta)
-                    .after(TransformSystems::Propagate),
-            );
+        app.add_systems(
+            PostUpdate,
+            crate::visibility::update_frusta
+                .in_set(VisibilitySystems::UpdateFrusta)
+                .after(TransformSystems::Propagate),
+        );
     }
 }
 
diff --git a/crates/bevy_camera/src/visibility/mod.rs b/crates/bevy_camera/src/visibility/mod.rs
index 478db336e32a3..275715cb26b33 100644
--- a/crates/bevy_camera/src/visibility/mod.rs
+++ b/crates/bevy_camera/src/visibility/mod.rs
@@ -340,17 +340,7 @@ impl Plugin for VisibilityPlugin {
     fn build(&self, app: &mut bevy_app::App) {
         use VisibilitySystems::*;
 
-        app.register_type::<VisibilityClass>()
-            .register_type::<InheritedVisibility>()
-            .register_type::<ViewVisibility>()
-            .register_type::<NoFrustumCulling>()
-            .register_type::<RenderLayers>()
-            .register_type::<Visibility>()
-            .register_type::<VisibleEntities>()
-            .register_type::<CascadesVisibleEntities>()
-            .register_type::<VisibleMeshEntities>()
-            .register_type::<CubemapVisibleEntities>()
-            .register_required_components::<Mesh3d, Visibility>()
+        app.register_required_components::<Mesh3d, Visibility>()
             .register_required_components::<Mesh3d, VisibilityClass>()
             .register_required_components::<Mesh2d, Visibility>()
             .register_required_components::<Mesh2d, VisibilityClass>()
diff --git a/crates/bevy_camera/src/visibility/range.rs b/crates/bevy_camera/src/visibility/range.rs
index b85631c9d5c75..b827dedbbf10c 100644
--- a/crates/bevy_camera/src/visibility/range.rs
+++ b/crates/bevy_camera/src/visibility/range.rs
@@ -30,14 +30,12 @@ pub struct VisibilityRangePlugin;
 
 impl Plugin for VisibilityRangePlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<VisibilityRange>()
-            .init_resource::<VisibleEntityRanges>()
-            .add_systems(
-                PostUpdate,
-                check_visibility_ranges
-                    .in_set(VisibilitySystems::CheckVisibility)
-                    .before(check_visibility),
-            );
+        app.init_resource::<VisibleEntityRanges>().add_systems(
+            PostUpdate,
+            check_visibility_ranges
+                .in_set(VisibilitySystems::CheckVisibility)
+                .before(check_visibility),
+        );
     }
 }
 
diff --git a/crates/bevy_core_pipeline/src/auto_exposure/mod.rs b/crates/bevy_core_pipeline/src/auto_exposure/mod.rs
index 805e67ec97c6e..773ab8b12f646 100644
--- a/crates/bevy_core_pipeline/src/auto_exposure/mod.rs
+++ b/crates/bevy_core_pipeline/src/auto_exposure/mod.rs
@@ -46,14 +46,12 @@ impl Plugin for AutoExposurePlugin {
         embedded_asset!(app, "auto_exposure.wgsl");
 
         app.add_plugins(RenderAssetPlugin::<GpuAutoExposureCompensationCurve>::default())
-            .register_type::<AutoExposureCompensationCurve>()
             .init_asset::<AutoExposureCompensationCurve>()
             .register_asset_reflect::<AutoExposureCompensationCurve>();
         app.world_mut()
             .resource_mut::<Assets<AutoExposureCompensationCurve>>()
             .insert(&Handle::default(), AutoExposureCompensationCurve::default());
 
-        app.register_type::<AutoExposure>();
         app.add_plugins(ExtractComponentPlugin::<AutoExposure>::default());
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
diff --git a/crates/bevy_core_pipeline/src/bloom/mod.rs b/crates/bevy_core_pipeline/src/bloom/mod.rs
index 09112794026ba..f07675fad36c7 100644
--- a/crates/bevy_core_pipeline/src/bloom/mod.rs
+++ b/crates/bevy_core_pipeline/src/bloom/mod.rs
@@ -49,9 +49,6 @@ impl Plugin for BloomPlugin {
     fn build(&self, app: &mut App) {
         embedded_asset!(app, "bloom.wgsl");
 
-        app.register_type::<Bloom>();
-        app.register_type::<BloomPrefilter>();
-        app.register_type::<BloomCompositeMode>();
         app.add_plugins((
             ExtractComponentPlugin::<Bloom>::default(),
             UniformComponentPlugin::<BloomUniforms>::default(),
diff --git a/crates/bevy_core_pipeline/src/core_2d/mod.rs b/crates/bevy_core_pipeline/src/core_2d/mod.rs
index f051c1164cc8a..70146efd7a253 100644
--- a/crates/bevy_core_pipeline/src/core_2d/mod.rs
+++ b/crates/bevy_core_pipeline/src/core_2d/mod.rs
@@ -80,8 +80,7 @@ pub struct Core2dPlugin;
 
 impl Plugin for Core2dPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<Camera2d>()
-            .register_required_components::<Camera2d, DebandDither>()
+        app.register_required_components::<Camera2d, DebandDither>()
             .register_required_components_with::<Camera2d, CameraRenderGraph>(|| {
                 CameraRenderGraph::new(Core2d)
             })
diff --git a/crates/bevy_core_pipeline/src/core_3d/mod.rs b/crates/bevy_core_pipeline/src/core_3d/mod.rs
index 9fd7880869546..ad058f8579072 100644
--- a/crates/bevy_core_pipeline/src/core_3d/mod.rs
+++ b/crates/bevy_core_pipeline/src/core_3d/mod.rs
@@ -139,9 +139,7 @@ pub struct Core3dPlugin;
 
 impl Plugin for Core3dPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<Camera3d>()
-            .register_type::<ScreenSpaceTransmissionQuality>()
-            .register_required_components_with::<Camera3d, DebandDither>(|| DebandDither::Enabled)
+        app.register_required_components_with::<Camera3d, DebandDither>(|| DebandDither::Enabled)
             .register_required_components_with::<Camera3d, CameraRenderGraph>(|| {
                 CameraRenderGraph::new(Core3d)
             })
diff --git a/crates/bevy_core_pipeline/src/dof/mod.rs b/crates/bevy_core_pipeline/src/dof/mod.rs
index 51ec0b97af61d..10ca30c8fc2c8 100644
--- a/crates/bevy_core_pipeline/src/dof/mod.rs
+++ b/crates/bevy_core_pipeline/src/dof/mod.rs
@@ -207,8 +207,6 @@ impl Plugin for DepthOfFieldPlugin {
     fn build(&self, app: &mut App) {
         embedded_asset!(app, "dof.wgsl");
 
-        app.register_type::<DepthOfField>();
-        app.register_type::<DepthOfFieldMode>();
         app.add_plugins(UniformComponentPlugin::<DepthOfFieldUniform>::default());
 
         app.add_plugins(SyncComponentPlugin::<DepthOfField>::default());
diff --git a/crates/bevy_core_pipeline/src/lib.rs b/crates/bevy_core_pipeline/src/lib.rs
index bc3159de18712..1b5f022428a3c 100644
--- a/crates/bevy_core_pipeline/src/lib.rs
+++ b/crates/bevy_core_pipeline/src/lib.rs
@@ -37,19 +37,11 @@ pub mod prelude {
 }
 
 use crate::{
-    blit::BlitPlugin,
-    bloom::BloomPlugin,
-    core_2d::Core2dPlugin,
-    core_3d::Core3dPlugin,
-    deferred::copy_lighting_id::CopyDeferredLightingIdPlugin,
-    dof::DepthOfFieldPlugin,
-    experimental::mip_generation::MipGenerationPlugin,
-    motion_blur::MotionBlurPlugin,
-    msaa_writeback::MsaaWritebackPlugin,
-    post_process::PostProcessingPlugin,
-    prepass::{DeferredPrepass, DepthPrepass, MotionVectorPrepass, NormalPrepass},
-    tonemapping::TonemappingPlugin,
-    upscaling::UpscalingPlugin,
+    blit::BlitPlugin, bloom::BloomPlugin, core_2d::Core2dPlugin, core_3d::Core3dPlugin,
+    deferred::copy_lighting_id::CopyDeferredLightingIdPlugin, dof::DepthOfFieldPlugin,
+    experimental::mip_generation::MipGenerationPlugin, motion_blur::MotionBlurPlugin,
+    msaa_writeback::MsaaWritebackPlugin, post_process::PostProcessingPlugin,
+    tonemapping::TonemappingPlugin, upscaling::UpscalingPlugin,
 };
 use bevy_app::{App, Plugin};
 use bevy_asset::embedded_asset;
@@ -63,12 +55,7 @@ impl Plugin for CorePipelinePlugin {
     fn build(&self, app: &mut App) {
         embedded_asset!(app, "fullscreen_vertex_shader/fullscreen.wgsl");
 
-        app.register_type::<DepthPrepass>()
-            .register_type::<NormalPrepass>()
-            .register_type::<MotionVectorPrepass>()
-            .register_type::<DeferredPrepass>()
-            .init_resource::<FullscreenShader>()
-            .add_plugins((Core2dPlugin, Core3dPlugin, CopyDeferredLightingIdPlugin))
+        app.add_plugins((Core2dPlugin, Core3dPlugin, CopyDeferredLightingIdPlugin))
             .add_plugins((
                 BlitPlugin,
                 MsaaWritebackPlugin,
diff --git a/crates/bevy_core_pipeline/src/oit/mod.rs b/crates/bevy_core_pipeline/src/oit/mod.rs
index 9c20f4739d752..774d18efe55bf 100644
--- a/crates/bevy_core_pipeline/src/oit/mod.rs
+++ b/crates/bevy_core_pipeline/src/oit/mod.rs
@@ -106,8 +106,7 @@ impl Plugin for OrderIndependentTransparencyPlugin {
             OitResolvePlugin,
         ))
         .add_systems(Update, check_msaa)
-        .add_systems(Last, configure_depth_texture_usages)
-        .register_type::<OrderIndependentTransparencySettings>();
+        .add_systems(Last, configure_depth_texture_usages);
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
             return;
diff --git a/crates/bevy_core_pipeline/src/post_process/mod.rs b/crates/bevy_core_pipeline/src/post_process/mod.rs
index 229d4e32c3aa6..551caf28f1f64 100644
--- a/crates/bevy_core_pipeline/src/post_process/mod.rs
+++ b/crates/bevy_core_pipeline/src/post_process/mod.rs
@@ -201,7 +201,6 @@ impl Plugin for PostProcessingPlugin {
             RenderAssetUsages::RENDER_WORLD,
         ));
 
-        app.register_type::<ChromaticAberration>();
         app.add_plugins(ExtractComponentPlugin::<ChromaticAberration>::default());
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
diff --git a/crates/bevy_core_pipeline/src/skybox/mod.rs b/crates/bevy_core_pipeline/src/skybox/mod.rs
index f80bbbf770c22..205aad66a817e 100644
--- a/crates/bevy_core_pipeline/src/skybox/mod.rs
+++ b/crates/bevy_core_pipeline/src/skybox/mod.rs
@@ -45,7 +45,7 @@ impl Plugin for SkyboxPlugin {
         embedded_asset!(app, "skybox.wgsl");
         embedded_asset!(app, "skybox_prepass.wgsl");
 
-        app.register_type::<Skybox>().add_plugins((
+        app.add_plugins((
             ExtractComponentPlugin::<Skybox>::default(),
             UniformComponentPlugin::<SkyboxUniforms>::default(),
         ));
diff --git a/crates/bevy_core_pipeline/src/tonemapping/mod.rs b/crates/bevy_core_pipeline/src/tonemapping/mod.rs
index 2eb3d267e34c5..90b7de086f318 100644
--- a/crates/bevy_core_pipeline/src/tonemapping/mod.rs
+++ b/crates/bevy_core_pipeline/src/tonemapping/mod.rs
@@ -82,9 +82,6 @@ impl Plugin for TonemappingPlugin {
 
         app.add_plugins(ExtractResourcePlugin::<TonemappingLuts>::default());
 
-        app.register_type::<Tonemapping>();
-        app.register_type::<DebandDither>();
-
         app.add_plugins((
             ExtractComponentPlugin::<Tonemapping>::default(),
             ExtractComponentPlugin::<DebandDither>::default(),
diff --git a/crates/bevy_gizmos/src/aabb.rs b/crates/bevy_gizmos/src/aabb.rs
index 4ac9e5f2ac456..97b4f3e9ebd4c 100644
--- a/crates/bevy_gizmos/src/aabb.rs
+++ b/crates/bevy_gizmos/src/aabb.rs
@@ -28,19 +28,17 @@ pub struct AabbGizmoPlugin;
 
 impl Plugin for AabbGizmoPlugin {
     fn build(&self, app: &mut bevy_app::App) {
-        app.register_type::<AabbGizmoConfigGroup>()
-            .init_gizmo_group::<AabbGizmoConfigGroup>()
-            .add_systems(
-                PostUpdate,
-                (
-                    draw_aabbs,
-                    draw_all_aabbs.run_if(|config: Res<GizmoConfigStore>| {
-                        config.config::<AabbGizmoConfigGroup>().1.draw_all
-                    }),
-                )
-                    .after(bevy_render::view::VisibilitySystems::CalculateBounds)
-                    .after(TransformSystems::Propagate),
-            );
+        app.init_gizmo_group::<AabbGizmoConfigGroup>().add_systems(
+            PostUpdate,
+            (
+                draw_aabbs,
+                draw_all_aabbs.run_if(|config: Res<GizmoConfigStore>| {
+                    config.config::<AabbGizmoConfigGroup>().1.draw_all
+                }),
+            )
+                .after(bevy_render::view::VisibilitySystems::CalculateBounds)
+                .after(TransformSystems::Propagate),
+        );
     }
 }
 /// The [`GizmoConfigGroup`] used for debug visualizations of [`Aabb`] components on entities
diff --git a/crates/bevy_gizmos/src/lib.rs b/crates/bevy_gizmos/src/lib.rs
index 4eeeea508d048..ca3aba088b9a4 100755
--- a/crates/bevy_gizmos/src/lib.rs
+++ b/crates/bevy_gizmos/src/lib.rs
@@ -159,9 +159,7 @@ impl Plugin for GizmoPlugin {
             embedded_asset!(app, "line_joints.wgsl");
         }
 
-        app.register_type::<GizmoConfig>()
-            .register_type::<GizmoConfigStore>()
-            .init_asset::<GizmoAsset>()
+        app.init_asset::<GizmoAsset>()
             .init_resource::<GizmoHandles>()
             // We insert the Resource GizmoConfigStore into the world implicitly here if it does not exist.
             .init_gizmo_group::<DefaultGizmoConfigGroup>();
diff --git a/crates/bevy_gizmos/src/light.rs b/crates/bevy_gizmos/src/light.rs
index 1bd6ee3cacb05..4fdd784ac0ec5 100644
--- a/crates/bevy_gizmos/src/light.rs
+++ b/crates/bevy_gizmos/src/light.rs
@@ -116,18 +116,16 @@ pub struct LightGizmoPlugin;
 
 impl Plugin for LightGizmoPlugin {
     fn build(&self, app: &mut bevy_app::App) {
-        app.register_type::<LightGizmoConfigGroup>()
-            .init_gizmo_group::<LightGizmoConfigGroup>()
-            .add_systems(
-                PostUpdate,
-                (
-                    draw_lights,
-                    draw_all_lights.run_if(|config: Res<GizmoConfigStore>| {
-                        config.config::<LightGizmoConfigGroup>().1.draw_all
-                    }),
-                )
-                    .after(TransformSystems::Propagate),
-            );
+        app.init_gizmo_group::<LightGizmoConfigGroup>().add_systems(
+            PostUpdate,
+            (
+                draw_lights,
+                draw_all_lights.run_if(|config: Res<GizmoConfigStore>| {
+                    config.config::<LightGizmoConfigGroup>().1.draw_all
+                }),
+            )
+                .after(TransformSystems::Propagate),
+        );
     }
 }
 
diff --git a/crates/bevy_gltf/src/lib.rs b/crates/bevy_gltf/src/lib.rs
index 6b90a4d99bcac..c53e1a6b7617e 100644
--- a/crates/bevy_gltf/src/lib.rs
+++ b/crates/bevy_gltf/src/lib.rs
@@ -208,13 +208,7 @@ impl GltfPlugin {
 
 impl Plugin for GltfPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<GltfExtras>()
-            .register_type::<GltfSceneExtras>()
-            .register_type::<GltfMeshExtras>()
-            .register_type::<GltfMeshName>()
-            .register_type::<GltfMaterialExtras>()
-            .register_type::<GltfMaterialName>()
-            .init_asset::<Gltf>()
+        app.init_asset::<Gltf>()
             .init_asset::<GltfNode>()
             .init_asset::<GltfPrimitive>()
             .init_asset::<GltfMesh>()
diff --git a/crates/bevy_image/src/texture_atlas.rs b/crates/bevy_image/src/texture_atlas.rs
index 67e1b203170a0..b7a7a715a360c 100644
--- a/crates/bevy_image/src/texture_atlas.rs
+++ b/crates/bevy_image/src/texture_atlas.rs
@@ -19,8 +19,7 @@ impl Plugin for TextureAtlasPlugin {
         app.init_asset::<TextureAtlasLayout>();
 
         #[cfg(feature = "bevy_reflect")]
-        app.register_asset_reflect::<TextureAtlasLayout>()
-            .register_type::<TextureAtlas>();
+        app.register_asset_reflect::<TextureAtlasLayout>();
     }
 }
 
diff --git a/crates/bevy_input/src/lib.rs b/crates/bevy_input/src/lib.rs
index 77cbe96822d1d..b546452c4e9dd 100644
--- a/crates/bevy_input/src/lib.rs
+++ b/crates/bevy_input/src/lib.rs
@@ -57,16 +57,12 @@ use mouse::{
 };
 use touch::{touch_screen_input_system, TouchInput, Touches};
 
-#[cfg(feature = "bevy_reflect")]
-use gamepad::Gamepad;
 use gamepad::{
     gamepad_connection_system, gamepad_event_processing_system, GamepadAxisChangedEvent,
     GamepadButtonChangedEvent, GamepadButtonStateChangedEvent, GamepadConnectionEvent,
     GamepadEvent, GamepadRumbleRequest, RawGamepadAxisChangedEvent, RawGamepadButtonChangedEvent,
     RawGamepadEvent,
 };
-#[cfg(feature = "bevy_reflect")]
-use gamepad::{GamepadAxis, GamepadButton, GamepadConnection, GamepadInput, GamepadSettings};
 
 #[cfg(all(feature = "serialize", feature = "bevy_reflect"))]
 use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
@@ -134,34 +130,6 @@ impl Plugin for InputPlugin {
             .add_event::<TouchInput>()
             .init_resource::<Touches>()
             .add_systems(PreUpdate, touch_screen_input_system.in_set(InputSystems));
-
-        #[cfg(feature = "bevy_reflect")]
-        {
-            // Register common types
-            app.register_type::<ButtonState>()
-                .register_type::<KeyboardInput>()
-                .register_type::<MouseButtonInput>()
-                .register_type::<PinchGesture>()
-                .register_type::<RotationGesture>()
-                .register_type::<DoubleTapGesture>()
-                .register_type::<PanGesture>()
-                .register_type::<TouchInput>()
-                .register_type::<RawGamepadEvent>()
-                .register_type::<RawGamepadAxisChangedEvent>()
-                .register_type::<RawGamepadButtonChangedEvent>()
-                .register_type::<Gamepad>()
-                .register_type::<GamepadConnectionEvent>()
-                .register_type::<GamepadButtonChangedEvent>()
-                .register_type::<GamepadAxisChangedEvent>()
-                .register_type::<GamepadButtonStateChangedEvent>()
-                .register_type::<GamepadConnection>()
-                .register_type::<GamepadSettings>()
-                .register_type::<GamepadAxis>()
-                .register_type::<GamepadButton>()
-                .register_type::<GamepadInput>()
-                .register_type::<AccumulatedMouseMotion>()
-                .register_type::<AccumulatedMouseScroll>();
-        }
     }
 }
 
diff --git a/crates/bevy_input_focus/src/directional_navigation.rs b/crates/bevy_input_focus/src/directional_navigation.rs
index 2f3d64702549b..eca52febf85a6 100644
--- a/crates/bevy_input_focus/src/directional_navigation.rs
+++ b/crates/bevy_input_focus/src/directional_navigation.rs
@@ -36,10 +36,6 @@ pub struct DirectionalNavigationPlugin;
 impl Plugin for DirectionalNavigationPlugin {
     fn build(&self, app: &mut App) {
         app.init_resource::<DirectionalNavigationMap>();
-
-        #[cfg(feature = "bevy_reflect")]
-        app.register_type::<NavNeighbors>()
-            .register_type::<DirectionalNavigationMap>();
     }
 }
 
diff --git a/crates/bevy_input_focus/src/lib.rs b/crates/bevy_input_focus/src/lib.rs
index 86466869d0ee8..3d1f8851350d8 100644
--- a/crates/bevy_input_focus/src/lib.rs
+++ b/crates/bevy_input_focus/src/lib.rs
@@ -221,11 +221,6 @@ impl Plugin for InputDispatchPlugin {
                 )
                     .in_set(InputFocusSystems::Dispatch),
             );
-
-        #[cfg(feature = "bevy_reflect")]
-        app.register_type::<AutoFocus>()
-            .register_type::<InputFocus>()
-            .register_type::<InputFocusVisible>();
     }
 }
 
diff --git a/crates/bevy_input_focus/src/tab_navigation.rs b/crates/bevy_input_focus/src/tab_navigation.rs
index 98cf49163fc3d..e8eb6d85ce0dc 100644
--- a/crates/bevy_input_focus/src/tab_navigation.rs
+++ b/crates/bevy_input_focus/src/tab_navigation.rs
@@ -345,9 +345,6 @@ pub struct TabNavigationPlugin;
 impl Plugin for TabNavigationPlugin {
     fn build(&self, app: &mut App) {
         app.add_systems(Startup, setup_tab_navigation);
-
-        #[cfg(feature = "bevy_reflect")]
-        app.register_type::<TabIndex>().register_type::<TabGroup>();
         app.add_observer(acquire_focus);
         app.add_observer(click_to_focus);
     }
diff --git a/crates/bevy_light/src/lib.rs b/crates/bevy_light/src/lib.rs
index 89d69b81083b8..5ef9ad00250f3 100644
--- a/crates/bevy_light/src/lib.rs
+++ b/crates/bevy_light/src/lib.rs
@@ -21,8 +21,8 @@ use core::ops::DerefMut;
 pub mod cluster;
 pub use cluster::ClusteredDecal;
 use cluster::{
-    add_clusters, assign::assign_objects_to_clusters, ClusterConfig,
-    GlobalVisibleClusterableObjects, VisibleClusterableObjects,
+    add_clusters, assign::assign_objects_to_clusters, GlobalVisibleClusterableObjects,
+    VisibleClusterableObjects,
 };
 mod ambient_light;
 pub use ambient_light::AmbientLight;
@@ -117,24 +117,7 @@ pub struct LightPlugin;
 
 impl Plugin for LightPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<AmbientLight>()
-            .register_type::<CascadeShadowConfig>()
-            .register_type::<Cascades>()
-            .register_type::<DirectionalLight>()
-            .register_type::<DirectionalLightShadowMap>()
-            .register_type::<NotShadowCaster>()
-            .register_type::<NotShadowReceiver>()
-            .register_type::<PointLight>()
-            .register_type::<LightProbe>()
-            .register_type::<EnvironmentMapLight>()
-            .register_type::<IrradianceVolume>()
-            .register_type::<VolumetricFog>()
-            .register_type::<VolumetricLight>()
-            .register_type::<PointLightShadowMap>()
-            .register_type::<SpotLight>()
-            .register_type::<ShadowFilteringMethod>()
-            .register_type::<ClusterConfig>()
-            .init_resource::<GlobalVisibleClusterableObjects>()
+        app.init_resource::<GlobalVisibleClusterableObjects>()
             .init_resource::<AmbientLight>()
             .init_resource::<DirectionalLightShadowMap>()
             .init_resource::<PointLightShadowMap>()
diff --git a/crates/bevy_pbr/src/atmosphere/mod.rs b/crates/bevy_pbr/src/atmosphere/mod.rs
index ed4dabdf9621e..4b6065c76dc7b 100644
--- a/crates/bevy_pbr/src/atmosphere/mod.rs
+++ b/crates/bevy_pbr/src/atmosphere/mod.rs
@@ -92,14 +92,12 @@ impl Plugin for AtmospherePlugin {
         embedded_asset!(app, "aerial_view_lut.wgsl");
         embedded_asset!(app, "render_sky.wgsl");
 
-        app.register_type::<Atmosphere>()
-            .register_type::<AtmosphereSettings>()
-            .add_plugins((
-                ExtractComponentPlugin::<Atmosphere>::default(),
-                ExtractComponentPlugin::<AtmosphereSettings>::default(),
-                UniformComponentPlugin::<Atmosphere>::default(),
-                UniformComponentPlugin::<AtmosphereSettings>::default(),
-            ));
+        app.add_plugins((
+            ExtractComponentPlugin::<Atmosphere>::default(),
+            ExtractComponentPlugin::<AtmosphereSettings>::default(),
+            UniformComponentPlugin::<Atmosphere>::default(),
+            UniformComponentPlugin::<AtmosphereSettings>::default(),
+        ));
     }
 
     fn finish(&self, app: &mut App) {
diff --git a/crates/bevy_pbr/src/decal/clustered.rs b/crates/bevy_pbr/src/decal/clustered.rs
index 7580f1475e92a..2eed8f741e86d 100644
--- a/crates/bevy_pbr/src/decal/clustered.rs
+++ b/crates/bevy_pbr/src/decal/clustered.rs
@@ -144,8 +144,7 @@ impl Plugin for ClusteredDecalPlugin {
     fn build(&self, app: &mut App) {
         load_shader_library!(app, "clustered.wgsl");
 
-        app.add_plugins(ExtractComponentPlugin::<ClusteredDecal>::default())
-            .register_type::<ClusteredDecal>();
+        app.add_plugins(ExtractComponentPlugin::<ClusteredDecal>::default());
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
             return;
diff --git a/crates/bevy_pbr/src/decal/forward.rs b/crates/bevy_pbr/src/decal/forward.rs
index d862331be510e..f5b24169d069e 100644
--- a/crates/bevy_pbr/src/decal/forward.rs
+++ b/crates/bevy_pbr/src/decal/forward.rs
@@ -30,8 +30,6 @@ impl Plugin for ForwardDecalPlugin {
     fn build(&self, app: &mut App) {
         load_shader_library!(app, "forward_decal.wgsl");
 
-        app.register_type::<ForwardDecal>();
-
         let mesh = app.world_mut().resource_mut::<Assets<Mesh>>().add(
             Rectangle::from_size(Vec2::ONE)
                 .mesh()
diff --git a/crates/bevy_pbr/src/lib.rs b/crates/bevy_pbr/src/lib.rs
index 2947927b0cec5..6af1d6dad1b03 100644
--- a/crates/bevy_pbr/src/lib.rs
+++ b/crates/bevy_pbr/src/lib.rs
@@ -223,7 +223,6 @@ impl Plugin for PbrPlugin {
         load_shader_library!(app, "meshlet/dummy_visibility_buffer_resolve.wgsl");
 
         app.register_asset_reflect::<StandardMaterial>()
-            .register_type::<DefaultOpaqueRendererMethod>()
             .init_resource::<DefaultOpaqueRendererMethod>()
             .add_plugins((
                 MeshRenderPlugin {
diff --git a/crates/bevy_pbr/src/render/fog.rs b/crates/bevy_pbr/src/render/fog.rs
index fa091207258f2..29dfab349aa52 100644
--- a/crates/bevy_pbr/src/render/fog.rs
+++ b/crates/bevy_pbr/src/render/fog.rs
@@ -133,7 +133,6 @@ impl Plugin for FogPlugin {
     fn build(&self, app: &mut App) {
         load_shader_library!(app, "fog.wgsl");
 
-        app.register_type::<DistanceFog>();
         app.add_plugins(ExtractComponentPlugin::<DistanceFog>::default());
 
         if let Some(render_app) = app.get_sub_app_mut(RenderApp) {
diff --git a/crates/bevy_pbr/src/ssao/mod.rs b/crates/bevy_pbr/src/ssao/mod.rs
index a1170b9604dad..d90ed010698bc 100644
--- a/crates/bevy_pbr/src/ssao/mod.rs
+++ b/crates/bevy_pbr/src/ssao/mod.rs
@@ -53,8 +53,6 @@ impl Plugin for ScreenSpaceAmbientOcclusionPlugin {
         embedded_asset!(app, "ssao.wgsl");
         embedded_asset!(app, "spatial_denoise.wgsl");
 
-        app.register_type::<ScreenSpaceAmbientOcclusion>();
-
         app.add_plugins(SyncComponentPlugin::<ScreenSpaceAmbientOcclusion>::default());
     }
 
diff --git a/crates/bevy_pbr/src/ssr/mod.rs b/crates/bevy_pbr/src/ssr/mod.rs
index b245aaffb8da3..aea23f160861f 100644
--- a/crates/bevy_pbr/src/ssr/mod.rs
+++ b/crates/bevy_pbr/src/ssr/mod.rs
@@ -184,8 +184,7 @@ impl Plugin for ScreenSpaceReflectionsPlugin {
         load_shader_library!(app, "ssr.wgsl");
         load_shader_library!(app, "raymarch.wgsl");
 
-        app.register_type::<ScreenSpaceReflections>()
-            .add_plugins(ExtractComponentPlugin::<ScreenSpaceReflections>::default());
+        app.add_plugins(ExtractComponentPlugin::<ScreenSpaceReflections>::default());
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
             return;
diff --git a/crates/bevy_pbr/src/wireframe.rs b/crates/bevy_pbr/src/wireframe.rs
index 77257630b64b4..e8add9058d23f 100644
--- a/crates/bevy_pbr/src/wireframe.rs
+++ b/crates/bevy_pbr/src/wireframe.rs
@@ -89,9 +89,6 @@ impl Plugin for WireframePlugin {
         ))
         .init_asset::<WireframeMaterial>()
         .init_resource::<SpecializedMeshPipelines<Wireframe3dPipeline>>()
-        .register_type::<NoWireframe>()
-        .register_type::<WireframeConfig>()
-        .register_type::<WireframeColor>()
         .init_resource::<WireframeConfig>()
         .init_resource::<WireframeEntitiesNeedingSpecialization>()
         .add_systems(Startup, setup_global_wireframe_material)
diff --git a/crates/bevy_picking/src/input.rs b/crates/bevy_picking/src/input.rs
index 3050522ab5f4d..5108a849a1b79 100644
--- a/crates/bevy_picking/src/input.rs
+++ b/crates/bevy_picking/src/input.rs
@@ -95,7 +95,6 @@ pub struct PointerInputPlugin;
 impl Plugin for PointerInputPlugin {
     fn build(&self, app: &mut App) {
         app.init_resource::<PointerInputSettings>()
-            .register_type::<PointerInputSettings>()
             .add_systems(Startup, spawn_mouse_pointer)
             .add_systems(
                 First,
diff --git a/crates/bevy_picking/src/lib.rs b/crates/bevy_picking/src/lib.rs
index 05171914f9c6e..7a0e1dfb2b82d 100644
--- a/crates/bevy_picking/src/lib.rs
+++ b/crates/bevy_picking/src/lib.rs
@@ -409,16 +409,7 @@ impl Plugin for PickingPlugin {
                     PickingSystems::Last,
                 )
                     .chain(),
-            )
-            .register_type::<PickingSettings>()
-            .register_type::<Pickable>()
-            .register_type::<hover::PickingInteraction>()
-            .register_type::<hover::Hovered>()
-            .register_type::<pointer::PointerId>()
-            .register_type::<pointer::PointerLocation>()
-            .register_type::<pointer::PointerPress>()
-            .register_type::<pointer::PointerInteraction>()
-            .register_type::<backend::ray::RayId>();
+            );
     }
 }
 
diff --git a/crates/bevy_picking/src/mesh_picking/mod.rs b/crates/bevy_picking/src/mesh_picking/mod.rs
index 8e6a16690cfdb..41b981385b7fc 100644
--- a/crates/bevy_picking/src/mesh_picking/mod.rs
+++ b/crates/bevy_picking/src/mesh_picking/mod.rs
@@ -25,7 +25,7 @@ use bevy_app::prelude::*;
 use bevy_ecs::prelude::*;
 use bevy_reflect::prelude::*;
 use bevy_render::{prelude::*, view::RenderLayers};
-use ray_cast::{MeshRayCast, MeshRayCastSettings, RayCastVisibility, SimplifiedMesh};
+use ray_cast::{MeshRayCast, MeshRayCastSettings, RayCastVisibility};
 
 /// An optional component that marks cameras that should be used in the [`MeshPickingPlugin`].
 ///
@@ -69,8 +69,6 @@ pub struct MeshPickingPlugin;
 impl Plugin for MeshPickingPlugin {
     fn build(&self, app: &mut App) {
         app.init_resource::<MeshPickingSettings>()
-            .register_type::<MeshPickingSettings>()
-            .register_type::<SimplifiedMesh>()
             .add_systems(PreUpdate, update_hits.in_set(PickingSystems::Backend));
     }
 }
diff --git a/crates/bevy_render/src/camera.rs b/crates/bevy_render/src/camera.rs
index 03564a80fe24c..c3f720b619fca 100644
--- a/crates/bevy_render/src/camera.rs
+++ b/crates/bevy_render/src/camera.rs
@@ -54,10 +54,7 @@ pub struct CameraPlugin;
 
 impl Plugin for CameraPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<CameraRenderGraph>()
-            .register_type::<TemporalJitter>()
-            .register_type::<MipBias>()
-            .register_required_components::<Camera, Msaa>()
+        app.register_required_components::<Camera, Msaa>()
             .register_required_components::<Camera, SyncToRenderWorld>()
             .register_required_components::<Camera3d, ColorGrading>()
             .register_required_components::<Camera3d, Exposure>()
diff --git a/crates/bevy_render/src/globals.rs b/crates/bevy_render/src/globals.rs
index 04e4109f098c9..b8d6810a8bb43 100644
--- a/crates/bevy_render/src/globals.rs
+++ b/crates/bevy_render/src/globals.rs
@@ -16,8 +16,6 @@ pub struct GlobalsPlugin;
 impl Plugin for GlobalsPlugin {
     fn build(&self, app: &mut App) {
         load_shader_library!(app, "globals.wgsl");
-        app.register_type::<GlobalsUniform>();
-
         if let Some(render_app) = app.get_sub_app_mut(RenderApp) {
             render_app
                 .init_resource::<GlobalsBuffer>()
diff --git a/crates/bevy_render/src/lib.rs b/crates/bevy_render/src/lib.rs
index 0d37e99e053e9..79a769effe737 100644
--- a/crates/bevy_render/src/lib.rs
+++ b/crates/bevy_render/src/lib.rs
@@ -78,51 +78,48 @@ pub mod prelude {
         Projection,
     };
 }
-use batching::gpu_preprocessing::BatchingPlugin;
 
 #[doc(hidden)]
 pub mod _macro {
     pub use bevy_asset;
 }
 
-use bevy_ecs::schedule::ScheduleBuildSettings;
-use bevy_image::{CompressedImageFormatSupport, CompressedImageFormats};
-use bevy_utils::prelude::default;
 pub use extract_param::Extract;
 
-use bevy_window::{PrimaryWindow, RawHandleWrapperHolder};
-use experimental::occlusion_culling::OcclusionCullingPlugin;
-use globals::GlobalsPlugin;
-use render_asset::{
-    extract_render_asset_bytes_per_frame, reset_render_asset_bytes_per_frame,
-    RenderAssetBytesPerFrame, RenderAssetBytesPerFrameLimiter,
-};
-use render_resource::init_empty_bind_group_layout;
-use renderer::{RenderAdapter, RenderDevice, RenderQueue};
-use settings::RenderResources;
-use sync_world::{
-    despawn_temporary_render_entities, entity_sync_system, MainEntity, RenderEntity,
-    SyncToRenderWorld, SyncWorldPlugin, TemporaryRenderEntity,
-};
-
-use crate::gpu_readback::GpuReadbackPlugin;
 use crate::{
     camera::CameraPlugin,
+    gpu_readback::GpuReadbackPlugin,
     mesh::{MeshPlugin, MorphPlugin, RenderMesh},
     render_asset::prepare_assets,
-    render_resource::{PipelineCache, Shader, ShaderLoader},
+    render_resource::{init_empty_bind_group_layout, PipelineCache, Shader, ShaderLoader},
     renderer::{render_system, RenderInstance},
     settings::RenderCreation,
     storage::StoragePlugin,
     view::{ViewPlugin, WindowRenderPlugin},
 };
 use alloc::sync::Arc;
+use batching::gpu_preprocessing::BatchingPlugin;
 use bevy_app::{App, AppLabel, Plugin, SubApp};
 use bevy_asset::{AssetApp, AssetServer};
-use bevy_ecs::{prelude::*, schedule::ScheduleLabel};
+use bevy_ecs::{
+    prelude::*,
+    schedule::{ScheduleBuildSettings, ScheduleLabel},
+};
+use bevy_image::{CompressedImageFormatSupport, CompressedImageFormats};
+use bevy_utils::prelude::default;
+use bevy_window::{PrimaryWindow, RawHandleWrapperHolder};
 use bitflags::bitflags;
 use core::ops::{Deref, DerefMut};
+use experimental::occlusion_culling::OcclusionCullingPlugin;
+use globals::GlobalsPlugin;
+use render_asset::{
+    extract_render_asset_bytes_per_frame, reset_render_asset_bytes_per_frame,
+    RenderAssetBytesPerFrame, RenderAssetBytesPerFrameLimiter,
+};
+use renderer::{RenderAdapter, RenderDevice, RenderQueue};
+use settings::RenderResources;
 use std::sync::Mutex;
+use sync_world::{despawn_temporary_render_entities, entity_sync_system, SyncWorldPlugin};
 use tracing::debug;
 pub use wgpu_wrapper::WgpuWrapper;
 
@@ -471,14 +468,6 @@ impl Plugin for RenderPlugin {
 
             render_app.add_systems(RenderStartup, init_empty_bind_group_layout);
         }
-
-        app.register_type::<alpha::AlphaMode>()
-            // These types cannot be registered in bevy_color, as it does not depend on the rest of Bevy
-            .register_type::<bevy_color::Color>()
-            .register_type::<RenderEntity>()
-            .register_type::<TemporaryRenderEntity>()
-            .register_type::<MainEntity>()
-            .register_type::<SyncToRenderWorld>();
     }
 
     fn ready(&self, app: &App) -> bool {
diff --git a/crates/bevy_render/src/mesh/mod.rs b/crates/bevy_render/src/mesh/mod.rs
index f7aa593a3a8f2..2f998fbe2fd91 100644
--- a/crates/bevy_render/src/mesh/mod.rs
+++ b/crates/bevy_render/src/mesh/mod.rs
@@ -21,36 +21,6 @@ use bevy_ecs::{
 pub use bevy_mesh::{mark_3d_meshes_as_changed_if_their_assets_changed, Mesh2d, Mesh3d, MeshTag};
 use wgpu::IndexFormat;
 
-/// Registers all [`MeshBuilder`] types.
-pub struct MeshBuildersPlugin;
-
-impl Plugin for MeshBuildersPlugin {
-    fn build(&self, app: &mut App) {
-        // 2D Mesh builders
-        app.register_type::<CircleMeshBuilder>()
-            .register_type::<CircularSectorMeshBuilder>()
-            .register_type::<CircularSegmentMeshBuilder>()
-            .register_type::<RegularPolygonMeshBuilder>()
-            .register_type::<EllipseMeshBuilder>()
-            .register_type::<AnnulusMeshBuilder>()
-            .register_type::<RhombusMeshBuilder>()
-            .register_type::<Triangle2dMeshBuilder>()
-            .register_type::<RectangleMeshBuilder>()
-            .register_type::<Capsule2dMeshBuilder>()
-            // 3D Mesh builders
-            .register_type::<Capsule3dMeshBuilder>()
-            .register_type::<ConeMeshBuilder>()
-            .register_type::<ConicalFrustumMeshBuilder>()
-            .register_type::<CuboidMeshBuilder>()
-            .register_type::<CylinderMeshBuilder>()
-            .register_type::<PlaneMeshBuilder>()
-            .register_type::<SphereMeshBuilder>()
-            .register_type::<TetrahedronMeshBuilder>()
-            .register_type::<TorusMeshBuilder>()
-            .register_type::<Triangle3dMeshBuilder>();
-    }
-}
-
 /// Adds the [`Mesh`] as an asset and makes sure that they are extracted and prepared for the GPU.
 pub struct MeshPlugin;
 
@@ -59,10 +29,6 @@ impl Plugin for MeshPlugin {
         app.init_asset::<Mesh>()
             .init_asset::<skinning::SkinnedMeshInverseBindposes>()
             .register_asset_reflect::<Mesh>()
-            .register_type::<Mesh3d>()
-            .register_type::<skinning::SkinnedMesh>()
-            .register_type::<Vec<Entity>>()
-            .add_plugins(MeshBuildersPlugin)
             // 'Mesh' must be prepared after 'Image' as meshes rely on the morph target image being ready
             .add_plugins(RenderAssetPlugin::<RenderMesh, GpuImage>::default())
             .add_plugins(MeshAllocatorPlugin)
@@ -86,9 +52,7 @@ impl Plugin for MeshPlugin {
 pub struct MorphPlugin;
 impl Plugin for MorphPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<MorphWeights>()
-            .register_type::<MeshMorphWeights>()
-            .add_systems(PostUpdate, inherit_weights);
+        app.add_systems(PostUpdate, inherit_weights);
     }
 }
 
diff --git a/crates/bevy_render/src/storage.rs b/crates/bevy_render/src/storage.rs
index 6084271fee27c..a07e7d845414c 100644
--- a/crates/bevy_render/src/storage.rs
+++ b/crates/bevy_render/src/storage.rs
@@ -18,7 +18,6 @@ pub struct StoragePlugin;
 impl Plugin for StoragePlugin {
     fn build(&self, app: &mut App) {
         app.add_plugins(RenderAssetPlugin::<GpuShaderStorageBuffer>::default())
-            .register_type::<ShaderStorageBuffer>()
             .init_asset::<ShaderStorageBuffer>()
             .register_asset_reflect::<ShaderStorageBuffer>();
     }
diff --git a/crates/bevy_render/src/texture/mod.rs b/crates/bevy_render/src/texture/mod.rs
index 78cc78a9a132f..f9e7532b7a1ac 100644
--- a/crates/bevy_render/src/texture/mod.rs
+++ b/crates/bevy_render/src/texture/mod.rs
@@ -82,7 +82,6 @@ impl Plugin for ImagePlugin {
             ExtractResourcePlugin::<ManualTextureViews>::default(),
         ))
         .init_resource::<ManualTextureViews>()
-        .register_type::<Image>()
         .init_asset::<Image>()
         .register_asset_reflect::<Image>();
 
diff --git a/crates/bevy_render/src/view/mod.rs b/crates/bevy_render/src/view/mod.rs
index 6688a00f5e124..cb46c9215a085 100644
--- a/crates/bevy_render/src/view/mod.rs
+++ b/crates/bevy_render/src/view/mod.rs
@@ -100,9 +100,7 @@ impl Plugin for ViewPlugin {
     fn build(&self, app: &mut App) {
         load_shader_library!(app, "view.wgsl");
 
-        app.register_type::<Msaa>()
-            .register_type::<ColorGrading>()
-            .register_type::<OcclusionCulling>()
+        app
             // NOTE: windows.is_changed() handles cases where a window was resized
             .add_plugins((
                 ExtractComponentPlugin::<Hdr>::default(),
diff --git a/crates/bevy_render/src/view/window/screenshot.rs b/crates/bevy_render/src/view/window/screenshot.rs
index a3ac1d47e0dea..789e284c66d77 100644
--- a/crates/bevy_render/src/view/window/screenshot.rs
+++ b/crates/bevy_render/src/view/window/screenshot.rs
@@ -401,9 +401,7 @@ impl Plugin for ScreenshotPlugin {
                     .after(event_update_system)
                     .before(ApplyDeferred),
             )
-            .add_systems(Update, trigger_screenshots)
-            .register_type::<Screenshot>()
-            .register_type::<ScreenshotCaptured>();
+            .add_systems(Update, trigger_screenshots);
 
         let Some(render_app) = app.get_sub_app_mut(RenderApp) else {
             return;
diff --git a/crates/bevy_scene/src/lib.rs b/crates/bevy_scene/src/lib.rs
index b088fb9871055..4c464fc473f91 100644
--- a/crates/bevy_scene/src/lib.rs
+++ b/crates/bevy_scene/src/lib.rs
@@ -62,8 +62,6 @@ impl Plugin for ScenePlugin {
             .init_asset::<Scene>()
             .init_asset_loader::<SceneLoader>()
             .init_resource::<SceneSpawner>()
-            .register_type::<SceneRoot>()
-            .register_type::<DynamicSceneRoot>()
             .add_systems(SpawnScene, (scene_spawner, scene_spawner_system).chain());
 
         // Register component hooks for DynamicSceneRoot
diff --git a/crates/bevy_scene/src/scene_spawner.rs b/crates/bevy_scene/src/scene_spawner.rs
index 5243df357a401..afd8958149e05 100644
--- a/crates/bevy_scene/src/scene_spawner.rs
+++ b/crates/bevy_scene/src/scene_spawner.rs
@@ -661,8 +661,7 @@ mod tests {
 
         app.add_plugins(ScheduleRunnerPlugin::default())
             .add_plugins(AssetPlugin::default())
-            .add_plugins(ScenePlugin)
-            .register_type::<ComponentA>();
+            .add_plugins(ScenePlugin);
         app.update();
 
         let mut scene_world = World::new();
diff --git a/crates/bevy_solari/src/pathtracer/mod.rs b/crates/bevy_solari/src/pathtracer/mod.rs
index 72affe4b048a8..3f20119761290 100644
--- a/crates/bevy_solari/src/pathtracer/mod.rs
+++ b/crates/bevy_solari/src/pathtracer/mod.rs
@@ -28,8 +28,6 @@ pub struct PathtracingPlugin;
 impl Plugin for PathtracingPlugin {
     fn build(&self, app: &mut App) {
         embedded_asset!(app, "pathtracer.wgsl");
-
-        app.register_type::<Pathtracer>();
     }
 
     fn finish(&self, app: &mut App) {
diff --git a/crates/bevy_solari/src/realtime/mod.rs b/crates/bevy_solari/src/realtime/mod.rs
index 472bce67d8ead..d8993840d1e4c 100644
--- a/crates/bevy_solari/src/realtime/mod.rs
+++ b/crates/bevy_solari/src/realtime/mod.rs
@@ -35,8 +35,7 @@ impl Plugin for SolariLightingPlugin {
         embedded_asset!(app, "restir_di.wgsl");
         embedded_asset!(app, "restir_gi.wgsl");
 
-        app.register_type::<SolariLighting>()
-            .insert_resource(DefaultOpaqueRendererMethod::deferred());
+        app.insert_resource(DefaultOpaqueRendererMethod::deferred());
     }
 
     fn finish(&self, app: &mut App) {
diff --git a/crates/bevy_solari/src/scene/mod.rs b/crates/bevy_solari/src/scene/mod.rs
index b0aa7e512bf71..16352879a8d3a 100644
--- a/crates/bevy_solari/src/scene/mod.rs
+++ b/crates/bevy_solari/src/scene/mod.rs
@@ -34,8 +34,6 @@ impl Plugin for RaytracingScenePlugin {
         load_shader_library!(app, "brdf.wgsl");
         load_shader_library!(app, "raytracing_scene_bindings.wgsl");
         load_shader_library!(app, "sampling.wgsl");
-
-        app.register_type::<RaytracingMesh3d>();
     }
 
     fn finish(&self, app: &mut App) {
diff --git a/crates/bevy_sprite/src/lib.rs b/crates/bevy_sprite/src/lib.rs
index 91982938949ea..01a259cf8f27d 100644
--- a/crates/bevy_sprite/src/lib.rs
+++ b/crates/bevy_sprite/src/lib.rs
@@ -84,28 +84,23 @@ impl Plugin for SpritePlugin {
             app.add_plugins(TextureAtlasPlugin);
         }
 
-        app.register_type::<Sprite>()
-            .register_type::<SpriteImageMode>()
-            .register_type::<TextureSlicer>()
-            .register_type::<Anchor>()
-            .register_type::<Mesh2d>()
-            .add_plugins((
-                Mesh2dRenderPlugin,
-                ColorMaterialPlugin,
-                TilemapChunkPlugin,
-                TilemapChunkMaterialPlugin,
-            ))
-            .add_systems(
-                PostUpdate,
+        app.add_plugins((
+            Mesh2dRenderPlugin,
+            ColorMaterialPlugin,
+            TilemapChunkPlugin,
+            TilemapChunkMaterialPlugin,
+        ))
+        .add_systems(
+            PostUpdate,
+            (
+                calculate_bounds_2d.in_set(VisibilitySystems::CalculateBounds),
                 (
-                    calculate_bounds_2d.in_set(VisibilitySystems::CalculateBounds),
-                    (
-                        compute_slices_on_asset_event.before(AssetEventSystems),
-                        compute_slices_on_sprite_change,
-                    )
-                        .in_set(SpriteSystems::ComputeSlices),
-                ),
-            );
+                    compute_slices_on_asset_event.before(AssetEventSystems),
+                    compute_slices_on_sprite_change,
+                )
+                    .in_set(SpriteSystems::ComputeSlices),
+            ),
+        );
 
         #[cfg(feature = "bevy_sprite_picking_backend")]
         app.add_plugins(SpritePickingPlugin);
diff --git a/crates/bevy_sprite/src/mesh2d/wireframe2d.rs b/crates/bevy_sprite/src/mesh2d/wireframe2d.rs
index 95a7473fec3f5..bd31b7b6d647a 100644
--- a/crates/bevy_sprite/src/mesh2d/wireframe2d.rs
+++ b/crates/bevy_sprite/src/mesh2d/wireframe2d.rs
@@ -87,9 +87,6 @@ impl Plugin for Wireframe2dPlugin {
         ))
         .init_asset::<Wireframe2dMaterial>()
         .init_resource::<SpecializedMeshPipelines<Wireframe2dPipeline>>()
-        .register_type::<NoWireframe2d>()
-        .register_type::<Wireframe2dConfig>()
-        .register_type::<Wireframe2dColor>()
         .init_resource::<Wireframe2dConfig>()
         .init_resource::<WireframeEntitiesNeedingSpecialization>()
         .add_systems(Startup, setup_global_wireframe_material)
diff --git a/crates/bevy_sprite/src/picking_backend.rs b/crates/bevy_sprite/src/picking_backend.rs
index cda9955b95282..3bc021b21db24 100644
--- a/crates/bevy_sprite/src/picking_backend.rs
+++ b/crates/bevy_sprite/src/picking_backend.rs
@@ -76,9 +76,6 @@ pub struct SpritePickingPlugin;
 impl Plugin for SpritePickingPlugin {
     fn build(&self, app: &mut App) {
         app.init_resource::<SpritePickingSettings>()
-            .register_type::<SpritePickingCamera>()
-            .register_type::<SpritePickingMode>()
-            .register_type::<SpritePickingSettings>()
             .add_systems(PreUpdate, sprite_picking.in_set(PickingSystems::Backend));
     }
 }
diff --git a/crates/bevy_sprite/src/tilemap_chunk/mod.rs b/crates/bevy_sprite/src/tilemap_chunk/mod.rs
index a7a0f7d419099..005e61e6a75c4 100644
--- a/crates/bevy_sprite/src/tilemap_chunk/mod.rs
+++ b/crates/bevy_sprite/src/tilemap_chunk/mod.rs
@@ -31,10 +31,7 @@ pub struct TilemapChunkPlugin;
 
 impl Plugin for TilemapChunkPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<TilemapChunkMeshCache>()
-            .register_type::<TilemapChunk>()
-            .register_type::<TilemapChunkTileData>()
-            .init_resource::<TilemapChunkMeshCache>()
+        app.init_resource::<TilemapChunkMeshCache>()
             .add_systems(Update, update_tilemap_chunk_indices);
     }
 }
diff --git a/crates/bevy_text/src/lib.rs b/crates/bevy_text/src/lib.rs
index 71b82a03f4741..46af2b04242c5 100644
--- a/crates/bevy_text/src/lib.rs
+++ b/crates/bevy_text/src/lib.rs
@@ -96,16 +96,6 @@ pub type Update2dText = Text2dUpdateSystems;
 impl Plugin for TextPlugin {
     fn build(&self, app: &mut App) {
         app.init_asset::<Font>()
-            .register_type::<Text2d>()
-            .register_type::<TextFont>()
-            .register_type::<LineHeight>()
-            .register_type::<TextColor>()
-            .register_type::<TextBackgroundColor>()
-            .register_type::<TextSpan>()
-            .register_type::<TextBounds>()
-            .register_type::<TextLayout>()
-            .register_type::<ComputedTextBlock>()
-            .register_type::<TextEntity>()
             .init_asset_loader::<FontLoader>()
             .init_resource::<FontAtlasSets>()
             .init_resource::<TextPipeline>()
diff --git a/crates/bevy_time/src/lib.rs b/crates/bevy_time/src/lib.rs
index 8173b7c91b8e2..792f9f03b284a 100644
--- a/crates/bevy_time/src/lib.rs
+++ b/crates/bevy_time/src/lib.rs
@@ -76,8 +76,7 @@ impl Plugin for TimePlugin {
             app.register_type::<Time>()
                 .register_type::<Time<Real>>()
                 .register_type::<Time<Virtual>>()
-                .register_type::<Time<Fixed>>()
-                .register_type::<Timer>();
+                .register_type::<Time<Fixed>>();
         }
 
         app.add_systems(
diff --git a/crates/bevy_transform/src/plugins.rs b/crates/bevy_transform/src/plugins.rs
index f70e7e1f1d0f3..fd7a4f7ea535c 100644
--- a/crates/bevy_transform/src/plugins.rs
+++ b/crates/bevy_transform/src/plugins.rs
@@ -19,11 +19,6 @@ pub struct TransformPlugin;
 
 impl Plugin for TransformPlugin {
     fn build(&self, app: &mut App) {
-        #[cfg(feature = "bevy_reflect")]
-        app.register_type::<crate::components::Transform>()
-            .register_type::<crate::components::TransformTreeChanged>()
-            .register_type::<crate::components::GlobalTransform>();
-
         app
             // add transform systems to startup so the first update is "correct"
             .add_systems(
diff --git a/crates/bevy_ui/src/lib.rs b/crates/bevy_ui/src/lib.rs
index df44595ce6e9f..ddee3a8d9e7f0 100644
--- a/crates/bevy_ui/src/lib.rs
+++ b/crates/bevy_ui/src/lib.rs
@@ -7,7 +7,7 @@
 
 //! This crate contains Bevy's UI system, which can be used to create UI for both 2D and 3D games
 //! # Basic usage
-//! Spawn UI elements with [`widget::Button`], [`ImageNode`], [`Text`](prelude::Text) and [`Node`]
+//! Spawn UI elements with [`widget::Button`], [`ImageNode`](widget::ImageNode), [`Text`](prelude::Text) and [`Node`]
 //! This UI is laid out with the Flexbox and CSS Grid layout models (see <https://cssreference.io/flexbox/>)
 
 pub mod interaction_states;
@@ -43,8 +43,6 @@ pub use measurement::*;
 pub use ui_node::*;
 pub use ui_transform::*;
 
-use widget::{ImageNode, ImageNodeSize, ViewportNode};
-
 /// The UI prelude.
 ///
 /// This includes the most common types in this crate, re-exported for your convenience.
@@ -142,37 +140,6 @@ impl Plugin for UiPlugin {
         app.init_resource::<UiSurface>()
             .init_resource::<UiScale>()
             .init_resource::<UiStack>()
-            .register_type::<BackgroundColor>()
-            .register_type::<CalculatedClip>()
-            .register_type::<ComputedNode>()
-            .register_type::<ContentSize>()
-            .register_type::<FocusPolicy>()
-            .register_type::<Interaction>()
-            .register_type::<Node>()
-            .register_type::<RelativeCursorPosition>()
-            .register_type::<ScrollPosition>()
-            .register_type::<UiTargetCamera>()
-            .register_type::<ImageNode>()
-            .register_type::<ImageNodeSize>()
-            .register_type::<ViewportNode>()
-            .register_type::<UiRect>()
-            .register_type::<UiScale>()
-            .register_type::<BorderColor>()
-            .register_type::<BorderRadius>()
-            .register_type::<BoxShadow>()
-            .register_type::<widget::Button>()
-            .register_type::<widget::Label>()
-            .register_type::<ZIndex>()
-            .register_type::<GlobalZIndex>()
-            .register_type::<Outline>()
-            .register_type::<ColorStop>()
-            .register_type::<AngularColorStop>()
-            .register_type::<UiPosition>()
-            .register_type::<RadialGradientShape>()
-            .register_type::<Gradient>()
-            .register_type::<BackgroundGradient>()
-            .register_type::<BorderGradient>()
-            .register_type::<ComputedNodeTarget>()
             .configure_sets(
                 PostUpdate,
                 (
@@ -249,14 +216,7 @@ impl Plugin for UiPlugin {
 }
 
 fn build_text_interop(app: &mut App) {
-    use crate::widget::TextNodeFlags;
-    use bevy_text::TextLayoutInfo;
-    use widget::{Text, TextShadow};
-
-    app.register_type::<TextLayoutInfo>()
-        .register_type::<TextNodeFlags>()
-        .register_type::<Text>()
-        .register_type::<TextShadow>();
+    use widget::Text;
 
     app.add_systems(
         PostUpdate,
diff --git a/crates/bevy_ui/src/picking_backend.rs b/crates/bevy_ui/src/picking_backend.rs
index 891aea7d35aca..6a393744ee0ab 100644
--- a/crates/bevy_ui/src/picking_backend.rs
+++ b/crates/bevy_ui/src/picking_backend.rs
@@ -79,7 +79,6 @@ pub struct UiPickingPlugin;
 impl Plugin for UiPickingPlugin {
     fn build(&self, app: &mut App) {
         app.init_resource::<UiPickingSettings>()
-            .register_type::<(UiPickingCamera, UiPickingSettings)>()
             .add_systems(PreUpdate, ui_picking.in_set(PickingSystems::Backend));
     }
 }
diff --git a/crates/bevy_ui_render/src/lib.rs b/crates/bevy_ui_render/src/lib.rs
index f2d03b6f8b7da..0fb10b19e5352 100644
--- a/crates/bevy_ui_render/src/lib.rs
+++ b/crates/bevy_ui_render/src/lib.rs
@@ -208,8 +208,6 @@ pub struct UiRenderPlugin;
 impl Plugin for UiRenderPlugin {
     fn build(&self, app: &mut App) {
         load_shader_library!(app, "ui.wgsl");
-        app.register_type::<BoxShadowSamples>()
-            .register_type::<UiAntiAlias>();
 
         #[cfg(feature = "bevy_ui_debug")]
         app.init_resource::<UiDebugOptions>();
diff --git a/crates/bevy_window/src/lib.rs b/crates/bevy_window/src/lib.rs
index 18c95cba3f65e..59bebf29b70d5 100644
--- a/crates/bevy_window/src/lib.rs
+++ b/crates/bevy_window/src/lib.rs
@@ -149,34 +149,6 @@ impl Plugin for WindowPlugin {
             // Need to run before `exit_on_*` systems
             app.add_systems(Update, close_when_requested);
         }
-
-        // Register event types
-        #[cfg(feature = "bevy_reflect")]
-        app.register_type::<WindowEvent>()
-            .register_type::<WindowResized>()
-            .register_type::<RequestRedraw>()
-            .register_type::<WindowCreated>()
-            .register_type::<WindowCloseRequested>()
-            .register_type::<WindowClosing>()
-            .register_type::<WindowClosed>()
-            .register_type::<CursorMoved>()
-            .register_type::<CursorEntered>()
-            .register_type::<CursorLeft>()
-            .register_type::<WindowFocused>()
-            .register_type::<WindowOccluded>()
-            .register_type::<WindowScaleFactorChanged>()
-            .register_type::<WindowBackendScaleFactorChanged>()
-            .register_type::<FileDragAndDrop>()
-            .register_type::<WindowMoved>()
-            .register_type::<WindowThemeChanged>()
-            .register_type::<AppLifecycle>()
-            .register_type::<Monitor>();
-
-        // Register window descriptor and related types
-        #[cfg(feature = "bevy_reflect")]
-        app.register_type::<Window>()
-            .register_type::<PrimaryWindow>()
-            .register_type::<CursorOptions>();
     }
 }
 
diff --git a/examples/no_std/library/src/lib.rs b/examples/no_std/library/src/lib.rs
index 5e8bac145cd5b..07633a27693b0 100644
--- a/examples/no_std/library/src/lib.rs
+++ b/examples/no_std/library/src/lib.rs
@@ -67,8 +67,7 @@ pub struct DelayedComponentPlugin;
 
 impl Plugin for DelayedComponentPlugin {
     fn build(&self, app: &mut App) {
-        app.register_type::<DelayedComponentTimer>()
-            .add_systems(Update, tick_timers);
+        app.add_systems(Update, tick_timers);
     }
 }
 
diff --git a/examples/reflection/reflection.rs b/examples/reflection/reflection.rs
index f2130c35de37f..9c7350cb5835d 100644
--- a/examples/reflection/reflection.rs
+++ b/examples/reflection/reflection.rs
@@ -16,8 +16,6 @@ use serde::de::DeserializeSeed;
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Bar will be automatically registered as it's a dependency of Foo
-        .register_type::<Foo>()
         .add_systems(Startup, setup)
         .run();
 }
diff --git a/examples/remote/server.rs b/examples/remote/server.rs
index 057565e2e8825..0acf76dba7cfa 100644
--- a/examples/remote/server.rs
+++ b/examples/remote/server.rs
@@ -20,9 +20,6 @@ fn main() {
         .add_systems(Startup, setup)
         .add_systems(Update, remove.run_if(input_just_pressed(KeyCode::Space)))
         .add_systems(Update, move_cube)
-        // New types must be registered in order to be usable with reflection.
-        .register_type::<Cube>()
-        .register_type::<TestResource>()
         .run();
 }
 
diff --git a/examples/scene/scene.rs b/examples/scene/scene.rs
index de1601ba8d88f..1895702cdc44f 100644
--- a/examples/scene/scene.rs
+++ b/examples/scene/scene.rs
@@ -35,9 +35,6 @@ use std::{fs::File, io::Write};
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        .register_type::<ComponentA>()
-        .register_type::<ComponentB>()
-        .register_type::<ResourceA>()
         .add_systems(
             Startup,
             (save_scene_system, load_scene_system, infotext_system),

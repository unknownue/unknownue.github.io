diff --git a/crates/bevy_ecs/src/entity/clone_entities.rs b/crates/bevy_ecs/src/entity/clone_entities.rs
index c8171a251735d..2f7000357f08f 100644
--- a/crates/bevy_ecs/src/entity/clone_entities.rs
+++ b/crates/bevy_ecs/src/entity/clone_entities.rs
@@ -426,7 +426,7 @@ impl<'a> BundleScratch<'a> {
         relationship_hook_insert_mode: RelationshipHookMode,
     ) {
         // SAFETY:
-        // - All `component_ids` are from the same world as `target` entity
+        // - All `component_ids` are from the same world as `entity`
         // - All `component_data_ptrs` are valid types represented by `component_ids`
         unsafe {
             world.entity_mut(entity).insert_by_ids_internal(
diff --git a/crates/bevy_picking/src/events.rs b/crates/bevy_picking/src/events.rs
index f74ea32e7dcc7..97e6bfad3b56d 100644
--- a/crates/bevy_picking/src/events.rs
+++ b/crates/bevy_picking/src/events.rs
@@ -141,7 +141,7 @@ pub struct Cancel {
     pub hit: HitData,
 }
 
-/// Fires when a pointer crosses into the bounds of the `target` entity.
+/// Fires when a pointer crosses into the bounds of the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Over {
@@ -149,7 +149,7 @@ pub struct Over {
     pub hit: HitData,
 }
 
-/// Fires when a pointer crosses out of the bounds of the `target` entity.
+/// Fires when a pointer crosses out of the bounds of the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Out {
@@ -157,7 +157,7 @@ pub struct Out {
     pub hit: HitData,
 }
 
-/// Fires when a pointer button is pressed over the `target` entity.
+/// Fires when a pointer button is pressed over the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Press {
@@ -167,7 +167,7 @@ pub struct Press {
     pub hit: HitData,
 }
 
-/// Fires when a pointer button is released over the `target` entity.
+/// Fires when a pointer button is released over the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Release {
@@ -178,7 +178,7 @@ pub struct Release {
 }
 
 /// Fires when a pointer sends a pointer pressed event followed by a pointer released event, with the same
-/// `target` entity for both events.
+/// [target entity](On::entity) for both events.
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Click {
@@ -190,7 +190,7 @@ pub struct Click {
     pub duration: Duration,
 }
 
-/// Fires while a pointer is moving over the `target` entity.
+/// Fires while a pointer is moving over the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Move {
@@ -205,7 +205,7 @@ pub struct Move {
     pub delta: Vec2,
 }
 
-/// Fires when the `target` entity receives a pointer pressed event followed by a pointer move event.
+/// Fires when the [target entity](On::entity) receives a pointer pressed event followed by a pointer move event.
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct DragStart {
@@ -215,7 +215,7 @@ pub struct DragStart {
     pub hit: HitData,
 }
 
-/// Fires while the `target` entity is being dragged.
+/// Fires while the [target entity](On::entity) is being dragged.
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Drag {
@@ -237,7 +237,7 @@ pub struct Drag {
     pub delta: Vec2,
 }
 
-/// Fires when a pointer is dragging the `target` entity and a pointer released event is received.
+/// Fires when a pointer is dragging the [target entity](On::entity) and a pointer released event is received.
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct DragEnd {
@@ -252,49 +252,49 @@ pub struct DragEnd {
     pub distance: Vec2,
 }
 
-/// Fires when a pointer dragging the `dragged` entity enters the `target` entity.
+/// Fires when a pointer dragging the `dragged` entity enters the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct DragEnter {
     /// Pointer button pressed to enter drag.
     pub button: PointerButton,
-    /// The entity that was being dragged when the pointer entered the `target` entity.
+    /// The entity that was being dragged when the pointer entered the [target entity](On::entity).
     pub dragged: Entity,
     /// Information about the picking intersection.
     pub hit: HitData,
 }
 
-/// Fires while the `dragged` entity is being dragged over the `target` entity.
+/// Fires while the `dragged` entity is being dragged over the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct DragOver {
     /// Pointer button pressed while dragging over.
     pub button: PointerButton,
-    /// The entity that was being dragged when the pointer was over the `target` entity.
+    /// The entity that was being dragged when the pointer was over the [target entity](On::entity).
     pub dragged: Entity,
     /// Information about the picking intersection.
     pub hit: HitData,
 }
 
-/// Fires when a pointer dragging the `dragged` entity leaves the `target` entity.
+/// Fires when a pointer dragging the `dragged` entity leaves the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct DragLeave {
     /// Pointer button pressed while leaving drag.
     pub button: PointerButton,
-    /// The entity that was being dragged when the pointer left the `target` entity.
+    /// The entity that was being dragged when the pointer left the [target entity](On::entity).
     pub dragged: Entity,
     /// Information about the latest prior picking intersection.
     pub hit: HitData,
 }
 
-/// Fires when a pointer drops the `dropped` entity onto the `target` entity.
+/// Fires when a pointer drops the `dropped` entity onto the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct DragDrop {
     /// Pointer button released to drop.
     pub button: PointerButton,
-    /// The entity that was dropped onto the `target` entity.
+    /// The entity that was dropped onto the [target entity](On::entity).
     pub dropped: Entity,
     /// Information about the picking intersection.
     pub hit: HitData,
@@ -322,7 +322,7 @@ pub struct DragEntry {
     pub latest_pos: Vec2,
 }
 
-/// Fires while a pointer is scrolling over the `target` entity.
+/// Fires while a pointer is scrolling over the [target entity](On::entity).
 #[derive(Clone, PartialEq, Debug, Reflect)]
 #[reflect(Clone, PartialEq)]
 pub struct Scroll {
diff --git a/examples/ecs/observers.rs b/examples/ecs/observers.rs
index 4c9fbea4a3f92..d1055cd3b938c 100644
--- a/examples/ecs/observers.rs
+++ b/examples/ecs/observers.rs
@@ -132,7 +132,7 @@ fn on_remove_mine(event: On<Remove, Mine>, query: Query<&Mine>, mut index: ResMu
 }
 
 fn explode_mine(event: On<Explode>, query: Query<&Mine>, mut commands: Commands) {
-    // If a triggered event is targeting a specific entity you can access it with `.target()`
+    // If a triggered event is targeting a specific entity you can access it with `.entity()`
     let id = event.entity();
     let Ok(mut entity) = commands.get_entity(id) else {
         return;

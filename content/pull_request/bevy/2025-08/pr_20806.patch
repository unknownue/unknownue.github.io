diff --git a/crates/bevy_pbr/src/atmosphere/environment.rs b/crates/bevy_pbr/src/atmosphere/environment.rs
index e4e3ef8cbed82..af41fb11494ea 100644
--- a/crates/bevy_pbr/src/atmosphere/environment.rs
+++ b/crates/bevy_pbr/src/atmosphere/environment.rs
@@ -58,7 +58,7 @@ pub struct AtmosphereProbeLayouts {
 }
 
 #[derive(Resource)]
-pub struct AtmosphereProbePipelines {
+pub struct AtmosphereProbePipeline {
     pub environment: CachedComputePipelineId,
 }
 
@@ -165,7 +165,7 @@ pub(super) fn prepare_probe_textures(
     }
 }
 
-pub fn queue_atmosphere_probe_pipelines(
+pub fn init_atmosphere_probe_pipeline(
     pipeline_cache: Res<PipelineCache>,
     layouts: Res<AtmosphereProbeLayouts>,
     asset_server: Res<AssetServer>,
@@ -177,7 +177,7 @@ pub fn queue_atmosphere_probe_pipelines(
         shader: load_embedded_asset!(asset_server.as_ref(), "environment.wgsl"),
         ..default()
     });
-    commands.insert_resource(AtmosphereProbePipelines { environment });
+    commands.insert_resource(AtmosphereProbePipeline { environment });
 }
 
 // Ensure power-of-two dimensions to avoid edge update issues on cubemap faces
@@ -279,7 +279,7 @@ impl Node for EnvironmentNode {
         world: &World,
     ) -> Result<(), NodeRunError> {
         let pipeline_cache = world.resource::<PipelineCache>();
-        let pipelines = world.resource::<AtmosphereProbePipelines>();
+        let pipelines = world.resource::<AtmosphereProbePipeline>();
         let view_entity = graph.view_entity();
 
         let Some(environment_pipeline) = pipeline_cache.get_compute_pipeline(pipelines.environment)
diff --git a/crates/bevy_pbr/src/atmosphere/mod.rs b/crates/bevy_pbr/src/atmosphere/mod.rs
index 12aceab2feef1..dfc26c5ecb564 100644
--- a/crates/bevy_pbr/src/atmosphere/mod.rs
+++ b/crates/bevy_pbr/src/atmosphere/mod.rs
@@ -66,9 +66,9 @@ use bevy_render::{
 use bevy_core_pipeline::core_3d::graph::Core3d;
 use bevy_shader::load_shader_library;
 use environment::{
-    init_atmosphere_probe_layout, prepare_atmosphere_probe_bind_groups,
-    prepare_atmosphere_probe_components, prepare_probe_textures, queue_atmosphere_probe_pipelines,
-    AtmosphereEnvironmentMap, EnvironmentNode,
+    init_atmosphere_probe_layout, init_atmosphere_probe_pipeline,
+    prepare_atmosphere_probe_bind_groups, prepare_atmosphere_probe_components,
+    prepare_probe_textures, AtmosphereEnvironmentMap, EnvironmentNode,
 };
 use resources::{
     prepare_atmosphere_transforms, queue_render_sky_pipelines, AtmosphereTransforms,
@@ -143,7 +143,10 @@ impl Plugin for AtmospherePlugin {
             .init_resource::<AtmosphereLutPipelines>()
             .init_resource::<AtmosphereTransforms>()
             .init_resource::<SpecializedRenderPipelines<RenderSkyBindGroupLayouts>>()
-            .add_systems(RenderStartup, init_atmosphere_probe_layout)
+            .add_systems(
+                RenderStartup,
+                (init_atmosphere_probe_layout, init_atmosphere_probe_pipeline).chain(),
+            )
             .add_systems(
                 Render,
                 (
@@ -154,9 +157,6 @@ impl Plugin for AtmospherePlugin {
                         .in_set(RenderSystems::PrepareResources)
                         .after(prepare_atmosphere_textures),
                     prepare_atmosphere_probe_bind_groups.in_set(RenderSystems::PrepareBindGroups),
-                    queue_atmosphere_probe_pipelines
-                        .in_set(RenderSystems::Queue)
-                        .after(init_atmosphere_probe_layout),
                     prepare_atmosphere_transforms.in_set(RenderSystems::PrepareResources),
                     prepare_atmosphere_bind_groups.in_set(RenderSystems::PrepareBindGroups),
                 ),

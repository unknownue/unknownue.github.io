diff --git a/release-content/migration-guides/Newtype_ScrollPosition.md b/release-content/migration-guides/Newtype_ScrollPosition.md
index 5aa3196646a33..a65094d53941a 100644
--- a/release-content/migration-guides/Newtype_ScrollPosition.md
+++ b/release-content/migration-guides/Newtype_ScrollPosition.md
@@ -3,4 +3,4 @@ title: Make `ScrollPosition` newtype `Vec2`
 pull_requests: [19881]
 ---
 
-`ScrollPosition` now newtypes `Vec2`, its `offset_x` and `offset_y` fields have been removed.
+`ScrollPosition` now newtypes `Vec2`; its `offset_x` and `offset_y` fields have been removed.
diff --git a/release-content/migration-guides/animation_graph_no_more_asset_ids.md b/release-content/migration-guides/animation_graph_no_more_asset_ids.md
index 1200e1022f0bf..257b3bc1d4c49 100644
--- a/release-content/migration-guides/animation_graph_no_more_asset_ids.md
+++ b/release-content/migration-guides/animation_graph_no_more_asset_ids.md
@@ -1,6 +1,6 @@
 ---
 title: "`AnimationGraph` no longer supports raw AssetIds"
-pull_requests: []
+pull_requests: [19615]
 ---
 
 In previous versions of Bevy, `AnimationGraph` would serialize `Handle<AnimationClip>` as an asset
diff --git a/release-content/migration-guides/components-registrator-derefmut.md b/release-content/migration-guides/components-registrator-derefmut.md
index 4298302b346c7..1760aad8f9464 100644
--- a/release-content/migration-guides/components-registrator-derefmut.md
+++ b/release-content/migration-guides/components-registrator-derefmut.md
@@ -1,5 +1,5 @@
 ---
-title: ComponentsRegistrator no longer implements DerefMut
+title: "`ComponentsRegistrator` no longer implements `DerefMut`"
 pull_requests: [14791, 15458, 15269]
 ---
 
diff --git a/release-content/migration-guides/deprecate_iter_entities.md b/release-content/migration-guides/deprecate_iter_entities.md
index ffdf7c43aa1d1..e69d8777e0b49 100644
--- a/release-content/migration-guides/deprecate_iter_entities.md
+++ b/release-content/migration-guides/deprecate_iter_entities.md
@@ -6,4 +6,4 @@ pull_requests: [20260]
 In Bevy 0.17.0 we deprecate `world.iter_entities()` and `world.iter_entities_mut()`.
 Use `world.query::<EntityMut>().iter(&world)` and `world.query::<EntityRef>().iter(&mut world)` instead.
 
-This may not return every single entity, because of [default filter queries](https://docs.rs/bevy/latest/bevy/ecs/entity_disabling/index.html). If you really intend to query disabled entities too, consider removing the `DefaultQueryFilters` resource from the world before querying the elements. You can also add an `Allow<Component>` filter to allow a specific disabled `Component`, to show up in the query.
+This may not return every single entity, because of [default filter queries](https://docs.rs/bevy/latest/bevy/ecs/entity_disabling/index.html). If you really intend to query disabled entities too, consider removing the `DefaultQueryFilters` resource from the world before querying the elements. You can also add an `Allow<Component>` filter to allow a specific disabled `Component` to show up in the query.
diff --git a/release-content/migration-guides/dragenter_includes_dragged_entity.md b/release-content/migration-guides/dragenter_includes_dragged_entity.md
index 319275d359ba0..aae51504af7cc 100644
--- a/release-content/migration-guides/dragenter_includes_dragged_entity.md
+++ b/release-content/migration-guides/dragenter_includes_dragged_entity.md
@@ -1,8 +1,8 @@
 ---
-title: DragEnter now includes the dragged entity
+title: "`DragEnter` now includes the dragged entity"
 pull_requests: [19179]
 ---
 
-DragEnter events are now triggered when entering any entity, even the originally dragged one. This makes the behavior more consistent.
+`DragEnter` events are now triggered when entering any entity, even the originally dragged one. This makes the behavior more consistent.
 
 The old behavior can be achieved by checking if trigger.entity != trigger.dragged
diff --git a/release-content/migration-guides/entities_apis.md b/release-content/migration-guides/entities_apis.md
index d6e7aa12dfbad..4e6ba1068a949 100644
--- a/release-content/migration-guides/entities_apis.md
+++ b/release-content/migration-guides/entities_apis.md
@@ -1,5 +1,5 @@
 ---
-title: Entities APIs
+title: "`Entities` API changes"
 pull_requests: [19350, 19433]
 ---
 
diff --git a/release-content/migration-guides/event_split.md b/release-content/migration-guides/event_split.md
index 41742ef7f83ca..d30119f75a7db 100644
--- a/release-content/migration-guides/event_split.md
+++ b/release-content/migration-guides/event_split.md
@@ -1,5 +1,5 @@
 ---
-title: Event Split
+title: "`Event` trait split"
 pull_requests: [19647]
 ---
 
diff --git a/release-content/migration-guides/internal_entities.md b/release-content/migration-guides/internal_entities.md
index 3ede75f09a3f6..2302810183b0d 100644
--- a/release-content/migration-guides/internal_entities.md
+++ b/release-content/migration-guides/internal_entities.md
@@ -1,5 +1,5 @@
 ---
-title: Internal Entities
+title: Observers and one-shot systems are now marked as `Internal`
 pull_requests: [20204]
 ---
 
diff --git a/release-content/migration-guides/interned-labels-cleanup.md b/release-content/migration-guides/interned-labels-cleanup.md
index 281787d2fcb81..63944ee375054 100644
--- a/release-content/migration-guides/interned-labels-cleanup.md
+++ b/release-content/migration-guides/interned-labels-cleanup.md
@@ -1,5 +1,5 @@
 ---
-title: Interned labels cleanup
+title: Interned labels and `DynEq`
 pull_requests: [18984]
 ---
 
diff --git a/release-content/migration-guides/log-diagnostics-hash-set.md b/release-content/migration-guides/log-diagnostics-hash-set.md
index 2d05f8ce3c827..b5d0a3d184577 100644
--- a/release-content/migration-guides/log-diagnostics-hash-set.md
+++ b/release-content/migration-guides/log-diagnostics-hash-set.md
@@ -4,5 +4,5 @@ authors: ["@hukasu"]
 pull_requests: [19323]
 ---
 
-Make `LogDiagnosticsState`'s filter container and argument of
-`LogDiagnosticPlugin::filtered` into `HashSet`.
+`LogDiagnosticsState`'s filter container and the argument of
+`LogDiagnosticPlugin::filtered` is now a `HashSet` rather than a `Vec`.
diff --git a/release-content/migration-guides/map_set_apply.md b/release-content/migration-guides/map_set_apply.md
index adcb9a4ee48ff..3af74dbc650c0 100644
--- a/release-content/migration-guides/map_set_apply.md
+++ b/release-content/migration-guides/map_set_apply.md
@@ -1,5 +1,5 @@
 ---
-title: "`DynamicMap` is now unordered, `Map::get_at` and `Map::get_at_mut` are now removed, and `apply` removes excess entries from reflected maps"
+title: "Reflection-based maps are now unordered"
 pull_requests: [19802]
 ---
 
diff --git a/release-content/migration-guides/merge_observerState_observer_single_component.md b/release-content/migration-guides/merge_observerState_observer_single_component.md
index f55962619ade9..c0365001bab02 100644
--- a/release-content/migration-guides/merge_observerState_observer_single_component.md
+++ b/release-content/migration-guides/merge_observerState_observer_single_component.md
@@ -1,5 +1,5 @@
 ---
-title: Integrate `ObserverState` component into `Observer`.
+title: Unify `ObserverState` and `Observer` components
 pull_requests: [18728]
 ---
 
diff --git a/release-content/migration-guides/overflowclipbox_default_is_now_paddingbox.md b/release-content/migration-guides/overflowclipbox_default_is_now_paddingbox.md
index a733f7f775a30..8f81f5068e7eb 100644
--- a/release-content/migration-guides/overflowclipbox_default_is_now_paddingbox.md
+++ b/release-content/migration-guides/overflowclipbox_default_is_now_paddingbox.md
@@ -1,5 +1,5 @@
 ---
-title: OverflowClipBox's default is now Paddingbox
+title: "`OverflowClipBox`'s default is now `PaddingBox`"
 pull_requests: [18935]
 ---
 
diff --git a/release-content/migration-guides/parallelism_strategy_changes.md b/release-content/migration-guides/parallelism_strategy_changes.md
new file mode 100644
index 0000000000000..68461236106ea
--- /dev/null
+++ b/release-content/migration-guides/parallelism_strategy_changes.md
@@ -0,0 +1,30 @@
+---
+title: Changes to Bevy's system parallelism strategy
+pull_requests: [16885]
+---
+
+The scheduler will now prevent systems from running in parallel if there *could* be an archetype that they conflict on, even if there aren't actually any.
+To expand on this, previously, the scheduler would look at the entities that exist to determine if there's any overlap.
+Now, it determines it solely on the basis of the function signatures of the systems that are run.
+This was done as a performance optimization: while in theory this throws away potential parallelism,
+in practice, tests on engine and user code found that scheduling overhead dominates parallelism gains with the current multithreaded executor.
+Swapping to this simpler, more conservative test allows us to speed up these checks and improve resource utilization.
+There are more improvements planned here, so stay tuned!
+
+To understand what this means, consider the following example. These systems will now conflict even if no entity has both `Player` and `Enemy` components:
+
+```rust
+fn player_system(query: Query<(&mut Transform, &Player)>) {}
+fn enemy_system(query: Query<(&mut Transform, &Enemy)>) {}
+```
+
+To allow them to run in parallel, use `Without` filters, just as you would to allow both queries in a single system:
+
+```rust
+// Either one of these changes alone would be enough
+fn player_system(query: Query<(&mut Transform, &Player), Without<Enemy>>) {}
+fn enemy_system(query: Query<(&mut Transform, &Enemy), Without<Player>>) {}
+```
+
+If you encounter a performance regression in your application due to this change, *please* open an issue.
+We would be very interested to understand your use case, see your benchmarking results, and help you mitigate any issues.
diff --git a/release-content/migration-guides/per-world-error-handler.md b/release-content/migration-guides/per-world-error-handler.md
index 1a963d13c63ec..c9a1f1dd8ee77 100644
--- a/release-content/migration-guides/per-world-error-handler.md
+++ b/release-content/migration-guides/per-world-error-handler.md
@@ -1,5 +1,5 @@
 ---
-title: Global default error handler
+title: Changes to the default error handler mechanism
 pull_requests: [18810]
 ---
 
diff --git a/release-content/migration-guides/picking_location_not_component.md b/release-content/migration-guides/picking_location_not_component.md
index e70d7058aa8eb..0e6b83682d502 100644
--- a/release-content/migration-guides/picking_location_not_component.md
+++ b/release-content/migration-guides/picking_location_not_component.md
@@ -1,6 +1,6 @@
 ---
-title: Location is not a Component anymore
+title: "`Location` is no longer a `Component`"
 pull_requests: [19306]
 ---
 
-`bevy_picking::Location` was erroneously made a `Component`. It is no longer one, `bevy_picking::PointerLocation` wraps a `Location` and is the intended usage pattern.
+`bevy_picking::Location` was erroneously made a `Component`. It is no longer one. `bevy_picking::PointerLocation` wraps a `Location` and is the component you should be using instead.
diff --git a/release-content/migration-guides/primitives_non_const_generic_meshable.md b/release-content/migration-guides/primitives_non_const_generic_meshable.md
index 378bf86f95c93..de7ded2d74a42 100644
--- a/release-content/migration-guides/primitives_non_const_generic_meshable.md
+++ b/release-content/migration-guides/primitives_non_const_generic_meshable.md
@@ -6,3 +6,6 @@ pull_requests: [ 20250 ]
 `Polyline2d`, `Polyline3d`, `Polygon`, and `ConvexPolygon` are no longer const-generic and now implement `Meshable` for
 direct mesh generation. These types now use `Vec` instead of arrays internally and will therefore allocate and are no
 longer `no_std` compatible.
+
+If you need these types to be `no_std` and/or const-generic, please file an issue explaining your use case
+and we can consider creating fixed side-count polygon/polyline variants.
diff --git a/release-content/migration-guides/relative_cursor_position_is_object_centered.md b/release-content/migration-guides/relative_cursor_position_is_object_centered.md
index eac785e4b49b7..e35022a9a416f 100644
--- a/release-content/migration-guides/relative_cursor_position_is_object_centered.md
+++ b/release-content/migration-guides/relative_cursor_position_is_object_centered.md
@@ -1,6 +1,6 @@
 ---
-title: RelativeCursorPosition is object-centered
+title: "`RelativeCursorPosition` is now object-centered"
 pull_requests: [16615]
 ---
 
-`RelativeCursorPosition`'s coordinates are now object-centered with (0,0) at the center of the node and the corners at (±0.5, ±0.5). Its `normalized_visible_node_rect` field has been removed and replaced with a new `cursor_over: bool` field which is set to true when the cursor is hovering a visible section of the UI node.
+When picking objects, `RelativeCursorPosition`'s coordinates are now object-centered with (0,0) at the center of the node and the corners at (±0.5, ±0.5). Its `normalized_visible_node_rect` field has been removed and replaced with a new `cursor_over: bool` field which is set to true when the cursor is hovering a visible section of the UI node.
diff --git a/release-content/migration-guides/remove_archetypecomponentid.md b/release-content/migration-guides/remove_archetypecomponentid.md
deleted file mode 100644
index 5d5f66f02cab2..0000000000000
--- a/release-content/migration-guides/remove_archetypecomponentid.md
+++ /dev/null
@@ -1,19 +0,0 @@
----
-title: Remove `ArchetypeComponentId`
-pull_requests: [16885]
----
-
-The schedule will now prevent systems from running in parallel if there *could* be an archetype that they conflict on, even if there aren't actually any.  For example, these systems will now conflict even if no entity has both `Player` and `Enemy` components:
-
-```rust
-fn player_system(query: Query<(&mut Transform, &Player)>) {}
-fn enemy_system(query: Query<(&mut Transform, &Enemy)>) {}
-```
-
-To allow them to run in parallel, use `Without` filters, just as you would to allow both queries in a single system:
-
-```rust
-// Either one of these changes alone would be enough
-fn player_system(query: Query<(&mut Transform, &Player), Without<Enemy>>) {}
-fn enemy_system(query: Query<(&mut Transform, &Enemy), Without<Player>>) {}
-```
diff --git a/release-content/migration-guides/remove_bundle_register_required_components.md b/release-content/migration-guides/remove_bundle_register_required_components.md
index 87b65d7a911c8..3901b9922c049 100644
--- a/release-content/migration-guides/remove_bundle_register_required_components.md
+++ b/release-content/migration-guides/remove_bundle_register_required_components.md
@@ -1,5 +1,5 @@
 ---
-title: Remove Bundle::register_required_components
+title: Remove `Bundle::register_required_components`
 pull_requests: [19967]
 ---
 
diff --git a/release-content/migration-guides/remove_default_extend_from_iter.md b/release-content/migration-guides/remove_default_extend_from_iter.md
index 9d7e721e32ecc..f84f877f8455b 100644
--- a/release-content/migration-guides/remove_default_extend_from_iter.md
+++ b/release-content/migration-guides/remove_default_extend_from_iter.md
@@ -1,5 +1,5 @@
 ---
-title: Remove default implementation of extend_from_iter from RelationshipSourceCollection
+title: Remove default implementation of `extend_from_iter` from `RelationshipSourceCollection`
 pull_requests: [20255]
 ---
 
diff --git a/release-content/migration-guides/remove_deprecated_batch_spawning.md b/release-content/migration-guides/remove_deprecated_batch_spawning.md
index 1b17eba5637b0..255eda853f1bc 100644
--- a/release-content/migration-guides/remove_deprecated_batch_spawning.md
+++ b/release-content/migration-guides/remove_deprecated_batch_spawning.md
@@ -9,11 +9,14 @@ The following deprecated functions have been removed:
 - `World::insert_or_spawn_batch`
 - `World::insert_or_spawn_batch_with_caller`
 
-These functions, when used incorrectly, could cause major performance problems and were generally viewed as anti-patterns and foot guns.
-They were deprecated in 0.16 for being unnecessary with the retained render world and easily misused.
+These functions, when used incorrectly, could cause major performance problems and generally violated the privacy of the ECS internals in ways
+that the Bevy maintainers were not prepared to support long-term.
+They were deprecated in 0.16 due to their potential for misuse, as the retained render world removed Bevy's own uses of these methods.
 
-Instead of these functions consider doing one of the following:
+Instead of allocating entities with specific identifiers, consider one of the following:
 
-Option A) Instead of despawning entities, insert the `Disabled` component, and instead of respawning them at particular ids, use `try_insert_batch` or `insert_batch` and remove `Disabled`.
+1. Instead of despawning entities, insert the `Disabled` component, and instead of respawning them at particular ids, use `try_insert_batch` or `insert_batch` and remove `Disabled`.
 
-Option B) Instead of giving special meaning to an entity id, simply use `spawn_batch` and ensure entity references are valid when despawning.
+2. Instead of giving special meaning to an entity id, simply use `spawn_batch` and ensure entity references are valid when despawning.
+
+3. Use your own stable identifier and a map to `Entity` identifiers, with the help of the `EntityMapper` trait.
diff --git a/release-content/migration-guides/remove_the_add_sub_impls_on_volume.md b/release-content/migration-guides/remove_the_add_sub_impls_on_volume.md
index 859fe2384f77a..008d482ea2f7a 100644
--- a/release-content/migration-guides/remove_the_add_sub_impls_on_volume.md
+++ b/release-content/migration-guides/remove_the_add_sub_impls_on_volume.md
@@ -1,5 +1,5 @@
 ---
-title: remove the Add/Sub impls on Volume
+title: Remove the `Add`/`Sub` impls on `Volume`
 pull_requests: [ 19423 ]
 ---
 
diff --git a/release-content/migration-guides/rename_condition.md b/release-content/migration-guides/rename_condition.md
index 8bfe179133627..5dd5c38c3a22a 100644
--- a/release-content/migration-guides/rename_condition.md
+++ b/release-content/migration-guides/rename_condition.md
@@ -3,6 +3,6 @@ title: Renamed `Condition` to `SystemCondition`
 pull_requests: [19328]
 ---
 
-`Condition` is now `SystemCondition`. Replace all references and imports.
+The `Condition` trait is now called `SystemCondition`. Replace all references and imports.
 
 This change was made because `Condition` is an overly generic name that collides too often and is rarely used directly, despite appearing in the prelude.
diff --git a/release-content/migration-guides/rename_spawn_gltf_material_name.md b/release-content/migration-guides/rename_spawn_gltf_material_name.md
index 6e4922f68c3d9..fb8af6c9037b4 100644
--- a/release-content/migration-guides/rename_spawn_gltf_material_name.md
+++ b/release-content/migration-guides/rename_spawn_gltf_material_name.md
@@ -1,10 +1,10 @@
 ---
-title: Use Gltf material names for spawned primitive entities
+title: Use glTF material names for spawned primitive entities
 authors: ["@rendaoer"]
 pull_requests: [19287]
 ---
 
-When loading a Gltf scene in Bevy, each mesh primitive will generate an entity and store a `GltfMaterialName` component and `Name` component.
+When loading a glTF scene in Bevy, each mesh primitive will generate an entity and store a `GltfMaterialName` component and `Name` component.
 
 The `Name` components were previously stored as mesh name plus primitive index - for example, `MeshName.0` and `MeshName.1`. To make it easier to view these entities in Inspector-style tools, they are now stored as mesh name plus material name - for example, `MeshName.Material1Name` and `MeshName.Material2Name`.
 
diff --git a/release-content/migration-guides/replace_non_send_resources.md b/release-content/migration-guides/replace_non_send_resources.md
index e26a24b19ac45..695b6106f8b75 100644
--- a/release-content/migration-guides/replace_non_send_resources.md
+++ b/release-content/migration-guides/replace_non_send_resources.md
@@ -1,11 +1,17 @@
 ---
-title: Replace `Gilrs`, `AccessKitAdapters`, and `WinitWindows` resources
+title: Replace `Gilrs`, `AccessKitAdapters`, and `WinitWindows` non-send resources
 pull_requests: [18386, 17730, 19575]
 ---
 
-## NonSend Resources Replaced
+We are [working](https://discord.com/channels/691052431525675048/1332109626962874468) to move `!Send` data out of the ECS, in order to simplify internal implementation,
+reduce the risk of soundness problems and unblock features such as resources-as-entities and improved scheduling.
 
-As an effort to remove `!Send` resources in Bevy, we replaced the following resources:
+For now, the API for user-provided `NonSend` types is unchanged, but we are considering forcing
+all users to migrate to a solution similar to the one discussed below.
+
+## First-party `NonSend` Resources Replaced
+
+Internally, we have replaced the following resources:
 
 * `Gilrs` - _For wasm32 only, other platforms are unchanged -_ Replaced with `bevy_gilrs::GILRS`
 * `WinitWindows` - Replaced with `bevy_winit::WINIT_WINDOWS`
@@ -43,7 +49,9 @@ If a borrow is attempted while the data is borrowed elsewhere, the method will p
 
 ## NonSend Systems
 
-Previously, the use of a `!Send` resource in a system would force the system to execute on the main thread. Since `!Send` resources are removed in Bevy, we needed to create a new way to prevent systems from running on non-main threads. To do this, you can now use `bevy_ecs::system::NonSendMarker` as a system parameter:
+The use of a `NonSend` or `NonSendMut` resource in a system would force the system to execute on the main thread.
+However, when using the new `thread_local` pattern, we still need to prevent systems from running on non-main threads.
+To do this, you can now use `bevy_ecs::system::NonSendMarker` as a system parameter:
 
 ```rust
 use bevy_ecs::system::NonSendMarker;
diff --git a/release-content/migration-guides/sync_cell_utils.md b/release-content/migration-guides/sync_cell_utils.md
index 7ecc706cc92fa..e2e329faf5801 100644
--- a/release-content/migration-guides/sync_cell_utils.md
+++ b/release-content/migration-guides/sync_cell_utils.md
@@ -1,5 +1,5 @@
 ---
-title: SyncCell and SyncUnsafeCell moved to bevy_platform
+title: "`SyncCell` and `SyncUnsafeCell` moved to bevy_platform"
 pull_requests: [19305]
 ---
 
diff --git a/release-content/migration-guides/taa_non_experimental.md b/release-content/migration-guides/taa_non_experimental.md
index 5c65cd295b9eb..b3d4c23aa9ac1 100644
--- a/release-content/migration-guides/taa_non_experimental.md
+++ b/release-content/migration-guides/taa_non_experimental.md
@@ -5,6 +5,6 @@ pull_requests: [18349]
 
 TAA is no longer experimental.
 
-`TemporalAntiAliasPlugin` no longer needs to be added to your app to use TAA. It is now part of DefaultPlugins/AntiAliasingPlugin.
+`TemporalAntiAliasPlugin` no longer needs to be added to your app to use TAA. It is now part of `DefaultPlugins`, via `AntiAliasingPlugin`.
 
 `TemporalAntiAliasing` now uses `MipBias` as a required component in the main world, instead of overriding it manually in the render world.
diff --git a/release-content/migration-guides/zstd.md b/release-content/migration-guides/zstd.md
index 013aa7ef54081..139f29441b0b5 100644
--- a/release-content/migration-guides/zstd.md
+++ b/release-content/migration-guides/zstd.md
@@ -1,5 +1,5 @@
 ---
-title: New zstd backend
+title: New `zstd` backend
 pull_requests: [19793]
 ---
 

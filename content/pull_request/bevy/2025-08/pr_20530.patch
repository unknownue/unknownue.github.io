diff --git a/crates/bevy_asset/src/io/file/mod.rs b/crates/bevy_asset/src/io/file/mod.rs
index 0ab9267fff679..0ab590cd797fc 100644
--- a/crates/bevy_asset/src/io/file/mod.rs
+++ b/crates/bevy_asset/src/io/file/mod.rs
@@ -52,7 +52,7 @@ impl FileAssetReader {
     /// Returns the base path of the assets directory, which is normally the executable's parent
     /// directory.
     ///
-    /// To change this, set [`AssetPlugin.file_path`].
+    /// To change this, set [`AssetPlugin::file_path`][crate::AssetPlugin::file_path].
     pub fn get_base_path() -> PathBuf {
         get_base_path()
     }
diff --git a/crates/bevy_ecs/src/schedule/stepping.rs b/crates/bevy_ecs/src/schedule/stepping.rs
index 72bdd752a9a32..23c373490138e 100644
--- a/crates/bevy_ecs/src/schedule/stepping.rs
+++ b/crates/bevy_ecs/src/schedule/stepping.rs
@@ -70,7 +70,7 @@ enum SystemIdentifier {
     Node(NodeId),
 }
 
-/// Updates to [`Stepping.schedule_states`] that will be applied at the start
+/// Updates to [`Stepping::schedule_states`] that will be applied at the start
 /// of the next render frame
 enum Update {
     /// Set the action stepping will perform for this render frame
diff --git a/crates/bevy_reflect/src/lib.rs b/crates/bevy_reflect/src/lib.rs
index 4e2592daaeb69..0358310067fb4 100644
--- a/crates/bevy_reflect/src/lib.rs
+++ b/crates/bevy_reflect/src/lib.rs
@@ -516,8 +516,8 @@
 //!
 //! | Default | Dependencies                      |
 //! | :-----: | :-------------------------------: |
-//! | ✅      | [`bevy_reflect_derive/auto_register_inventory`] |
-//! | ❌      | [`bevy_reflect_derive/auto_register_static`] |
+//! | ✅      | `bevy_reflect_derive/auto_register_inventory` |
+//! | ❌      | `bevy_reflect_derive/auto_register_static` |
 //!
 //! These features enable automatic registration of types that derive [`Reflect`].
 //!
diff --git a/crates/bevy_render/src/mesh/allocator.rs b/crates/bevy_render/src/mesh/allocator.rs
index d18c3c77cf2a3..f9a834add2649 100644
--- a/crates/bevy_render/src/mesh/allocator.rs
+++ b/crates/bevy_render/src/mesh/allocator.rs
@@ -44,7 +44,7 @@ pub struct MeshAllocatorPlugin;
 /// rebinding. This resource manages these buffers.
 ///
 /// Within each slab, or hardware buffer, the underlying allocation algorithm is
-/// [`offset-allocator`], a Rust port of Sebastian Aaltonen's hard-real-time C++
+/// [`offset_allocator`], a Rust port of Sebastian Aaltonen's hard-real-time C++
 /// `OffsetAllocator`. Slabs start small and then grow as their contents fill
 /// up, up to a maximum size limit. To reduce fragmentation, vertex and index
 /// buffers that are too large bypass this system and receive their own buffers.
diff --git a/crates/bevy_ui/src/ui_node.rs b/crates/bevy_ui/src/ui_node.rs
index 7c55265691233..18db2cc523e3a 100644
--- a/crates/bevy_ui/src/ui_node.rs
+++ b/crates/bevy_ui/src/ui_node.rs
@@ -2251,6 +2251,11 @@ pub struct CalculatedClip {
 #[derive(Component)]
 pub struct OverrideClip;
 
+#[expect(
+    rustdoc::redundant_explicit_links,
+    reason = "To go around the `<code>` limitations, we put the link twice so we're \
+sure it's recognized as a markdown link."
+)]
 /// Indicates that this [`Node`] entity's front-to-back ordering is not controlled solely
 /// by its location in the UI hierarchy. A node with a higher z-index will appear on top
 /// of sibling nodes with a lower z-index.
@@ -2259,7 +2264,8 @@ pub struct OverrideClip;
 /// appear in the UI hierarchy. In such a case, the last node to be added to its parent
 /// will appear in front of its siblings.
 ///
-/// Nodes without this component will be treated as if they had a value of [`ZIndex(0)`].
+/// Nodes without this component will be treated as if they had a value of
+/// <code>[ZIndex][ZIndex]\(0\)</code>.
 ///
 /// Use [`GlobalZIndex`] if you need to order separate UI hierarchies or nodes that are
 /// not siblings in a given UI hierarchy.
diff --git a/examples/2d/cpu_draw.rs b/examples/2d/cpu_draw.rs
index 6834bf3024f52..2baf7d05b91a6 100644
--- a/examples/2d/cpu_draw.rs
+++ b/examples/2d/cpu_draw.rs
@@ -1,7 +1,7 @@
 //! Example of how to draw to a texture from the CPU.
 //!
 //! You can set the values of individual pixels to whatever you want.
-//! Bevy provides user-friendly APIs that work with [`Color`](bevy::color::Color)
+//! Bevy provides user-friendly APIs that work with [`Color`]
 //! values and automatically perform any necessary conversions and encoding
 //! into the texture's native pixel format.
 
diff --git a/examples/3d/order_independent_transparency.rs b/examples/3d/order_independent_transparency.rs
index 5849bbb5d5119..c5d5f69cf2928 100644
--- a/examples/3d/order_independent_transparency.rs
+++ b/examples/3d/order_independent_transparency.rs
@@ -2,7 +2,7 @@
 //!
 //! See [`OrderIndependentTransparencyPlugin`] for the trade-offs of using OIT.
 //!
-//! [`OrderIndependentTransparencyPlugin`]: bevy::render::pipeline::OrderIndependentTransparencyPlugin
+//! [`OrderIndependentTransparencyPlugin`]: bevy::core_pipeline::oit::OrderIndependentTransparencyPlugin
 use bevy::{
     camera::visibility::RenderLayers,
     color::palettes::css::{BLUE, GREEN, RED},
diff --git a/examples/ecs/entity_disabling.rs b/examples/ecs/entity_disabling.rs
index 3fc895cd09aac..338029b3fab78 100644
--- a/examples/ecs/entity_disabling.rs
+++ b/examples/ecs/entity_disabling.rs
@@ -5,7 +5,7 @@
 //!
 //! While disabling entities *will* make them invisible,
 //! that's not its primary purpose!
-//! [`Visibility`](bevy::prelude::Visibility) should be used to hide entities;
+//! [`Visibility`] should be used to hide entities;
 //! disabled entities are skipped entirely, which can lead to subtle bugs.
 //!
 //! # Default query filters
diff --git a/examples/ecs/fallible_params.rs b/examples/ecs/fallible_params.rs
index 3825c16e658c2..d772668f63772 100644
--- a/examples/ecs/fallible_params.rs
+++ b/examples/ecs/fallible_params.rs
@@ -2,7 +2,7 @@
 //! from running if their acquiry conditions aren't met.
 //!
 //! Fallible system parameters include:
-//! - [`Res<R>`], [`ResMut<R>`] - Resource has to exist, and the [`World::get_default_error_handler`] will be called if it doesn't.
+//! - [`Res<R>`], [`ResMut<R>`] - Resource has to exist, and the [`World::default_error_handler`] will be called if it doesn't.
 //! - [`Single<D, F>`] - There must be exactly one matching entity, but the system will be silently skipped otherwise.
 //! - [`Option<Single<D, F>>`] - There must be zero or one matching entity. The system will be silently skipped if there are more.
 //! - [`Populated<D, F>`] - There must be at least one matching entity, but the system will be silently skipped otherwise.
@@ -18,7 +18,6 @@
 //!
 //! [`SystemParamValidationError`]: bevy::ecs::system::SystemParamValidationError
 //! [`SystemParam::validate_param`]: bevy::ecs::system::SystemParam::validate_param
-//! [`default_error_handler`]: bevy::ecs::error::default_error_handler
 
 use bevy::ecs::error::warn;
 use bevy::prelude::*;

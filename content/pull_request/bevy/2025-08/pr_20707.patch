diff --git a/crates/bevy_render/src/render_phase/rangefinder.rs b/crates/bevy_render/src/render_phase/rangefinder.rs
index 4222ee134b02f..0a93651a41671 100644
--- a/crates/bevy_render/src/render_phase/rangefinder.rs
+++ b/crates/bevy_render/src/render_phase/rangefinder.rs
@@ -1,4 +1,4 @@
-use bevy_math::{Mat4, Vec3, Vec4};
+use bevy_math::{Affine3A, Mat4, Vec3, Vec4};
 
 /// A distance calculator for the draw order of [`PhaseItem`](crate::render_phase::PhaseItem)s.
 pub struct ViewRangefinder3d {
@@ -7,11 +7,11 @@ pub struct ViewRangefinder3d {
 
 impl ViewRangefinder3d {
     /// Creates a 3D rangefinder for a view matrix.
-    pub fn from_world_from_view(world_from_view: &Mat4) -> ViewRangefinder3d {
+    pub fn from_world_from_view(world_from_view: &Affine3A) -> ViewRangefinder3d {
         let view_from_world = world_from_view.inverse();
 
         ViewRangefinder3d {
-            view_from_world_row_2: view_from_world.row(2),
+            view_from_world_row_2: Mat4::from(view_from_world).row(2),
         }
     }
 
@@ -35,11 +35,11 @@ impl ViewRangefinder3d {
 #[cfg(test)]
 mod tests {
     use super::ViewRangefinder3d;
-    use bevy_math::{Mat4, Vec3};
+    use bevy_math::{Affine3A, Mat4, Vec3};
 
     #[test]
     fn distance() {
-        let view_matrix = Mat4::from_translation(Vec3::new(0.0, 0.0, -1.0));
+        let view_matrix = Affine3A::from_translation(Vec3::new(0.0, 0.0, -1.0));
         let rangefinder = ViewRangefinder3d::from_world_from_view(&view_matrix);
         assert_eq!(rangefinder.distance(&Mat4::IDENTITY), 1.0);
         assert_eq!(
diff --git a/crates/bevy_render/src/view/mod.rs b/crates/bevy_render/src/view/mod.rs
index 04482066f6d4b..ea95b7fad725b 100644
--- a/crates/bevy_render/src/view/mod.rs
+++ b/crates/bevy_render/src/view/mod.rs
@@ -307,7 +307,7 @@ pub struct ExtractedView {
 impl ExtractedView {
     /// Creates a 3D rangefinder for a view
     pub fn rangefinder3d(&self) -> ViewRangefinder3d {
-        ViewRangefinder3d::from_world_from_view(&self.world_from_view.to_matrix())
+        ViewRangefinder3d::from_world_from_view(&self.world_from_view.affine())
     }
 }
 
diff --git a/release-content/migration-guides/rangefinder.md b/release-content/migration-guides/rangefinder.md
new file mode 100644
index 0000000000000..800d75f6bfcea
--- /dev/null
+++ b/release-content/migration-guides/rangefinder.md
@@ -0,0 +1,6 @@
+---
+title: "`ViewRangefinder3d::from_world_from_view` now takes `Affine3A` instead of `Mat4`"
+pull_requests: [20707]
+---
+
+`ViewRangefinder3d::from_world_from_view` now takes `Affine3A` instead of `Mat4`. If you were supplying a `GlobalTransform::to_matrix()`, simply use `GlobalTransform::affine()` now. Performance will be better.

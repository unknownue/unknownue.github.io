name: bevy-prototype-codex build and deployment

# Add permissions for GitHub Actions
permissions:
  contents: write

on:
  # Trigger when specific files in the source repository change
  repository_dispatch:
    types: [wasm-build-trigger]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Source repository (owner/repo format)'
        required: false
        default: 'unknownue/bevy_prototype_codex'
      source_ref:
        description: 'Source repository branch/tag'
        required: false
        default: 'main'
      binary_name:
        description: 'Specific binary to build (leave empty for all)'
        required: false
        default: ''
  
  # Schedule trigger (weekly)
  schedule:
    - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        submodules: true
    
    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.source_repo || 'unknownue/bevy_prototype_codex' }}
        ref: ${{ github.event.inputs.source_ref || 'main' }}
        path: 'source-repo'
        token: ${{ secrets.DISPATCH_TOKEN }}
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        
    - name: Install wasm-bindgen-cli
      run: cargo install wasm-bindgen-cli
      
    - name: Install wasm-opt
      run: |
        # Get the latest release version
        LATEST_VERSION=$(curl -s https://api.github.com/repos/WebAssembly/binaryen/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "Installing binaryen version: $LATEST_VERSION"
        
        # Download and extract the latest version
        curl -L "https://github.com/WebAssembly/binaryen/releases/latest/download/binaryen-${LATEST_VERSION}-x86_64-linux.tar.gz" | tar xz
        sudo cp binaryen-*/bin/wasm-opt /usr/local/bin/
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        pip install toml configparser
        
    - name: Create build configuration
      run: |
        cat > build_config.ini << EOF
        [PATHS]
        source_repo = source-repo
        target_repo = .
        
        [BUILD]
        profile = wasm-release
        features = webgpu
        optimize = true
        EOF
        
    - name: Run build process
      run: |
        python3 scripts/github_auto_publisher.py ${{ github.event.inputs.binary_name }}
        
    - name: Check for generated files
      id: verify-build-output
      run: |
        if [ -d "content/projects" ] && [ "$(find content/projects -name "*.wasm" -o -name "*.js" | wc -l)" -gt 0 ]; then
          echo "files_generated=true" >> $GITHUB_OUTPUT
          echo "Found generated WASM files:"
          find content/projects -name "*.wasm" -o -name "*.js" | head -10
        else
          echo "files_generated=false" >> $GITHUB_OUTPUT
          echo "No WASM files generated"
        fi
        
    - name: Clean up build artifacts
      if: steps.verify-build-output.outputs.files_generated == 'true'
      run: |
        echo "Cleaning up build artifacts before deployment..."
        rm -rf ./source-repo/target/
        rm -rf ./source-repo/wasm/
        rm -rf ./source-repo/
        echo "Build artifacts cleaned up"
        

    - name: Build and Deploy with Zola
      if: steps.verify-build-output.outputs.files_generated == 'true'
      uses: shalzz/zola-deploy-action@v0.20.0
      env:
        PAGES_BRANCH: gh-pages
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        echo "## Build and Deploy Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Source Repository: ${{ github.event.inputs.source_repo || 'unknownue/bevy_prototype_codex' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Source Reference: ${{ github.event.inputs.source_ref || 'main' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Target Binary: ${{ github.event.inputs.binary_name || 'All binaries' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Files Generated: ${{ steps.verify-build-output.outputs.files_generated }}" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment Method: Zola to gh-pages branch" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment Status: ${{ steps.verify-build-output.outputs.files_generated == 'true' && 'Completed' || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date -u)" >> $GITHUB_STEP_SUMMARY 
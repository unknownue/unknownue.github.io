diff --git a/Cargo.toml b/Cargo.toml
index 97bbfdddb0152..e8ee1513118e6 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -73,8 +73,6 @@ allow_attributes = "warn"
 allow_attributes_without_reason = "warn"
 
 [workspace.lints.rust]
-# Strictly temporary until encase fixes dead code generation from ShaderType macros
-dead_code = "allow"
 missing_docs = "warn"
 unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docsrs_dep)'] }
 unsafe_code = "deny"
@@ -120,8 +118,6 @@ allow_attributes = "warn"
 allow_attributes_without_reason = "warn"
 
 [lints.rust]
-# Strictly temporary until encase fixes dead code generation from ShaderType macros
-dead_code = "allow"
 missing_docs = "warn"
 unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docsrs_dep)'] }
 unsafe_code = "deny"
diff --git a/crates/bevy_app/src/app.rs b/crates/bevy_app/src/app.rs
index bdb79cc495433..ea8fe373384f2 100644
--- a/crates/bevy_app/src/app.rs
+++ b/crates/bevy_app/src/app.rs
@@ -1684,9 +1684,17 @@ mod tests {
             b: u32,
         }
 
+        #[expect(
+            dead_code,
+            reason = "This struct is used as a compilation test to test the derive macros, and as such is intentionally never constructed."
+        )]
         #[derive(AppLabel, Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
         struct EmptyTupleLabel();
 
+        #[expect(
+            dead_code,
+            reason = "This struct is used as a compilation test to test the derive macros, and as such is intentionally never constructed."
+        )]
         #[derive(AppLabel, Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
         struct EmptyStructLabel {}
 
diff --git a/crates/bevy_asset/src/lib.rs b/crates/bevy_asset/src/lib.rs
index 97e601b56daf4..c36f5667361b4 100644
--- a/crates/bevy_asset/src/lib.rs
+++ b/crates/bevy_asset/src/lib.rs
@@ -1882,6 +1882,10 @@ mod tests {
         Empty,
     }
 
+    #[expect(
+        dead_code,
+        reason = "This struct is used as a compilation test to test the derive macros, and as such is intentionally never constructed."
+    )]
     #[derive(Asset, TypePath)]
     pub struct StructTestAsset {
         #[dependency]
@@ -1890,6 +1894,10 @@ mod tests {
         embedded: TestAsset,
     }
 
+    #[expect(
+        dead_code,
+        reason = "This struct is used as a compilation test to test the derive macros, and as such is intentionally never constructed."
+    )]
     #[derive(Asset, TypePath)]
     pub struct TupleTestAsset(#[dependency] Handle<TestAsset>);
 
diff --git a/crates/bevy_ecs/src/lib.rs b/crates/bevy_ecs/src/lib.rs
index 974c371bf31d0..cb0c40913c042 100644
--- a/crates/bevy_ecs/src/lib.rs
+++ b/crates/bevy_ecs/src/lib.rs
@@ -1946,15 +1946,27 @@ mod tests {
     #[derive(Bundle)]
     struct Simple(ComponentA);
 
+    #[expect(
+        dead_code,
+        reason = "This struct is used as a compilation test to test the derive macros, and as such is intentionally never constructed."
+    )]
     #[derive(Bundle)]
     struct Tuple(Simple, ComponentB);
 
+    #[expect(
+        dead_code,
+        reason = "This struct is used as a compilation test to test the derive macros, and as such is intentionally never constructed."
+    )]
     #[derive(Bundle)]
     struct Record {
         field0: Simple,
         field1: ComponentB,
     }
 
+    #[expect(
+        dead_code,
+        reason = "This struct is used as a compilation test to test the derive macros, and as such is intentionally never constructed."
+    )]
     #[derive(Component)]
     struct MyEntities {
         #[entities]
@@ -1963,10 +1975,6 @@ mod tests {
         another_one: Entity,
         #[entities]
         maybe_entity: Option<Entity>,
-        #[expect(
-            dead_code,
-            reason = "This struct is used as a compilation test to test the derive macros, and as such this field is intentionally never used."
-        )]
         something_else: String,
     }
 
@@ -1981,22 +1989,42 @@ mod tests {
     fn clone_entities() {
         use crate::entity::{ComponentCloneCtx, SourceComponent};
 
+        #[expect(
+            dead_code,
+            reason = "This struct is used as a compilation test to test the derive macros, and as such this field is intentionally never used."
+        )]
         #[derive(Component)]
         #[component(clone_behavior = Ignore)]
         struct IgnoreClone;
 
+        #[expect(
+            dead_code,
+            reason = "This struct is used as a compilation test to test the derive macros, and as such this field is intentionally never used."
+        )]
         #[derive(Component)]
         #[component(clone_behavior = Default)]
         struct DefaultClone;
 
+        #[expect(
+            dead_code,
+            reason = "This struct is used as a compilation test to test the derive macros, and as such this field is intentionally never used."
+        )]
         #[derive(Component)]
         #[component(clone_behavior = Custom(custom_clone))]
         struct CustomClone;
 
+        #[expect(
+            dead_code,
+            reason = "This struct is used as a compilation test to test the derive macros, and as such this field is intentionally never used."
+        )]
         #[derive(Component, Clone)]
         #[component(clone_behavior = clone::<Self>())]
         struct CloneFunction;
 
+        #[expect(
+            dead_code,
+            reason = "This struct is used as a compilation test to test the derive macros, and as such this field is intentionally never used."
+        )]
         fn custom_clone(_source: &SourceComponent, _ctx: &mut ComponentCloneCtx) {}
     }
 
diff --git a/crates/bevy_ecs/src/schedule/set.rs b/crates/bevy_ecs/src/schedule/set.rs
index b0a3e95cb7044..7c2d718ed6be8 100644
--- a/crates/bevy_ecs/src/schedule/set.rs
+++ b/crates/bevy_ecs/src/schedule/set.rs
@@ -373,9 +373,17 @@ mod tests {
             b: u32,
         }
 
+        #[expect(
+            dead_code,
+            reason = "This is a derive macro compilation test. It won't be constructed."
+        )]
         #[derive(ScheduleLabel, Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
         struct EmptyTupleLabel();
 
+        #[expect(
+            dead_code,
+            reason = "This is a derive macro compilation test. It won't be constructed."
+        )]
         #[derive(ScheduleLabel, Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
         struct EmptyStructLabel {}
 
@@ -473,9 +481,17 @@ mod tests {
             b: u32,
         }
 
+        #[expect(
+            dead_code,
+            reason = "This is a derive macro compilation test. It won't be constructed."
+        )]
         #[derive(SystemSet, Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
         struct EmptyTupleSet();
 
+        #[expect(
+            dead_code,
+            reason = "This is a derive macro compilation test. It won't be constructed."
+        )]
         #[derive(SystemSet, Debug, Default, Clone, Copy, PartialEq, Eq, Hash)]
         struct EmptyStructSet {}
 
diff --git a/crates/bevy_ecs/src/world/entity_ref.rs b/crates/bevy_ecs/src/world/entity_ref.rs
index 643c4f1a029c1..0186334eb2a34 100644
--- a/crates/bevy_ecs/src/world/entity_ref.rs
+++ b/crates/bevy_ecs/src/world/entity_ref.rs
@@ -6312,9 +6312,6 @@ mod tests {
         #[derive(Component, Clone, PartialEq, Debug)]
         struct C(u32);
 
-        #[derive(Component, Clone, PartialEq, Debug, Default)]
-        struct D;
-
         let mut world = World::new();
         let entity_a = world.spawn((A, B, C(5))).id();
         let entity_b = world.spawn((A, C(4))).id();
diff --git a/crates/bevy_render/src/render_resource/bind_group.rs b/crates/bevy_render/src/render_resource/bind_group.rs
index 9cf6fb9c67d9a..de129ff880d4c 100644
--- a/crates/bevy_render/src/render_resource/bind_group.rs
+++ b/crates/bevy_render/src/render_resource/bind_group.rs
@@ -697,6 +697,10 @@ mod test {
 
     #[test]
     fn texture_visibility() {
+        #[expect(
+            dead_code,
+            reason = "This is a derive macro compilation test. It will not be constructed."
+        )]
         #[derive(AsBindGroup)]
         pub struct TextureVisibilityTest {
             #[texture(0, visibility(all))]
diff --git a/crates/bevy_render/src/renderer/raw_vulkan_init.rs b/crates/bevy_render/src/renderer/raw_vulkan_init.rs
index f9d1ded7a303c..973056956cb09 100644
--- a/crates/bevy_render/src/renderer/raw_vulkan_init.rs
+++ b/crates/bevy_render/src/renderer/raw_vulkan_init.rs
@@ -122,8 +122,6 @@ pub(crate) async fn create_raw_device(
 
 #[derive(Error, Debug)]
 pub(crate) enum CreateRawVulkanDeviceError {
-    #[error("Could not create a raw Vulkan device because the Vulkan backend is not supported")]
-    UnsupportedBackend,
     #[error(transparent)]
     RequestDeviceError(#[from] wgpu::RequestDeviceError),
     #[error(transparent)]
diff --git a/crates/bevy_state/src/lib.rs b/crates/bevy_state/src/lib.rs
index 8b3046060674a..8ab673dd0a4a3 100644
--- a/crates/bevy_state/src/lib.rs
+++ b/crates/bevy_state/src/lib.rs
@@ -122,6 +122,10 @@ mod tests {
         enum TestState {
             #[default]
             A,
+            #[expect(
+                dead_code,
+                reason = "This struct is used as a compilation test to test the derive macros, and as such is intentionally never constructed."
+            )]
             B,
         }
 
diff --git a/examples/ui/drag_to_scroll.rs b/examples/ui/drag_to_scroll.rs
index b66d85c80056c..3b62f27480727 100644
--- a/examples/ui/drag_to_scroll.rs
+++ b/examples/ui/drag_to_scroll.rs
@@ -3,9 +3,6 @@
 use bevy::color::palettes::css::RED;
 use bevy::prelude::*;
 
-#[derive(Component)]
-struct DragNode;
-
 #[derive(Component)]
 struct ScrollableNode;
 

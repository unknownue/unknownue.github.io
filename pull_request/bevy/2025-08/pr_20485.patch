diff --git a/crates/bevy_core_pipeline/src/core_2d/mod.rs b/crates/bevy_core_pipeline/src/core_2d/mod.rs
index 70146efd7a253..a32adbe57bd81 100644
--- a/crates/bevy_core_pipeline/src/core_2d/mod.rs
+++ b/crates/bevy_core_pipeline/src/core_2d/mod.rs
@@ -33,7 +33,7 @@ pub mod graph {
 use core::ops::Range;
 
 use bevy_asset::UntypedAssetId;
-pub use bevy_camera::Camera2d;
+use bevy_camera::{Camera, Camera2d};
 use bevy_image::ToExtents;
 use bevy_platform::collections::{HashMap, HashSet};
 use bevy_render::{
@@ -53,7 +53,7 @@ use bevy_app::{App, Plugin};
 use bevy_ecs::prelude::*;
 use bevy_math::FloatOrd;
 use bevy_render::{
-    camera::{Camera, ExtractedCamera},
+    camera::ExtractedCamera,
     extract_component::ExtractComponentPlugin,
     render_graph::{EmptyNode, RenderGraphExt, ViewNodeRunner},
     render_phase::{
diff --git a/crates/bevy_core_pipeline/src/core_3d/mod.rs b/crates/bevy_core_pipeline/src/core_3d/mod.rs
index ad058f8579072..5351c08726f9f 100644
--- a/crates/bevy_core_pipeline/src/core_3d/mod.rs
+++ b/crates/bevy_core_pipeline/src/core_3d/mod.rs
@@ -69,9 +69,7 @@ pub const DEPTH_TEXTURE_SAMPLING_SUPPORTED: bool = true;
 
 use core::ops::Range;
 
-pub use bevy_camera::{
-    Camera3d, Camera3dDepthLoadOp, Camera3dDepthTextureUsage, ScreenSpaceTransmissionQuality,
-};
+use bevy_camera::{Camera, Camera3d, Camera3dDepthLoadOp};
 use bevy_render::{
     batching::gpu_preprocessing::{GpuPreprocessingMode, GpuPreprocessingSupport},
     camera::CameraRenderGraph,
@@ -91,7 +89,7 @@ use bevy_image::{BevyDefault, ToExtents};
 use bevy_math::FloatOrd;
 use bevy_platform::collections::{HashMap, HashSet};
 use bevy_render::{
-    camera::{Camera, ExtractedCamera},
+    camera::ExtractedCamera,
     extract_component::ExtractComponentPlugin,
     prelude::Msaa,
     render_graph::{EmptyNode, RenderGraphExt, ViewNodeRunner},
diff --git a/crates/bevy_core_pipeline/src/lib.rs b/crates/bevy_core_pipeline/src/lib.rs
index 1b5f022428a3c..80cb8cdb0dbad 100644
--- a/crates/bevy_core_pipeline/src/lib.rs
+++ b/crates/bevy_core_pipeline/src/lib.rs
@@ -28,14 +28,6 @@ pub use skybox::Skybox;
 mod fullscreen_vertex_shader;
 mod skybox;
 
-/// The core pipeline prelude.
-///
-/// This includes the most common types in this crate, re-exported for your convenience.
-pub mod prelude {
-    #[doc(hidden)]
-    pub use crate::{core_2d::Camera2d, core_3d::Camera3d};
-}
-
 use crate::{
     blit::BlitPlugin, bloom::BloomPlugin, core_2d::Core2dPlugin, core_3d::Core3dPlugin,
     deferred::copy_lighting_id::CopyDeferredLightingIdPlugin, dof::DepthOfFieldPlugin,
diff --git a/crates/bevy_light/src/cascade.rs b/crates/bevy_light/src/cascade.rs
index adebf86241a56..a6ef7d4945e53 100644
--- a/crates/bevy_light/src/cascade.rs
+++ b/crates/bevy_light/src/cascade.rs
@@ -1,4 +1,3 @@
-pub use bevy_camera::primitives::{face_index_to_name, CubeMapFace, CUBE_MAP_FACES};
 use bevy_camera::{Camera, Projection};
 use bevy_ecs::{entity::EntityHashMap, prelude::*};
 use bevy_math::{ops, Mat4, Vec3A, Vec4};
diff --git a/crates/bevy_light/src/probe.rs b/crates/bevy_light/src/probe.rs
index 29963e11f863f..11d316c8751c1 100644
--- a/crates/bevy_light/src/probe.rs
+++ b/crates/bevy_light/src/probe.rs
@@ -11,7 +11,7 @@ use bevy_transform::components::Transform;
 ///
 /// Note that a light probe will have no effect unless the entity contains some
 /// kind of illumination, which can either be an [`EnvironmentMapLight`] or an
-/// `IrradianceVolume`.
+/// [`IrradianceVolume`].
 ///
 /// The light probe range is conceptually a unit cube (1×1×1) centered on the
 /// origin. The [`Transform`] applied to this entity can scale, rotate, or translate
diff --git a/crates/bevy_pbr/src/components.rs b/crates/bevy_pbr/src/components.rs
index 4c451e53f55c9..bdb5a36d010d4 100644
--- a/crates/bevy_pbr/src/components.rs
+++ b/crates/bevy_pbr/src/components.rs
@@ -1,6 +1,3 @@
-pub use bevy_camera::visibility::{
-    CascadesVisibleEntities, CubemapVisibleEntities, VisibleMeshEntities,
-};
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::component::Component;
 use bevy_ecs::entity::{Entity, EntityHashMap};
diff --git a/crates/bevy_pbr/src/decal/clustered.rs b/crates/bevy_pbr/src/decal/clustered.rs
index 7ca76e3db8508..27e8c2d5ec8da 100644
--- a/crates/bevy_pbr/src/decal/clustered.rs
+++ b/crates/bevy_pbr/src/decal/clustered.rs
@@ -28,11 +28,9 @@ use bevy_ecs::{
     system::{Query, Res, ResMut},
 };
 use bevy_image::Image;
-pub use bevy_light::cluster::ClusteredDecal;
-use bevy_light::{DirectionalLightTexture, PointLightTexture, SpotLightTexture};
+use bevy_light::{ClusteredDecal, DirectionalLightTexture, PointLightTexture, SpotLightTexture};
 use bevy_math::Mat4;
 use bevy_platform::collections::HashMap;
-pub use bevy_render::primitives::CubemapLayout;
 use bevy_render::{
     extract_component::ExtractComponentPlugin,
     render_asset::RenderAssets,
diff --git a/crates/bevy_pbr/src/lib.rs b/crates/bevy_pbr/src/lib.rs
index 046c287e7d92e..3cad4b859d546 100644
--- a/crates/bevy_pbr/src/lib.rs
+++ b/crates/bevy_pbr/src/lib.rs
@@ -47,13 +47,9 @@ mod volumetric_fog;
 use bevy_color::{Color, LinearRgba};
 
 pub use atmosphere::*;
-use bevy_light::SimulationLightSystems;
-pub use bevy_light::{
-    light_consts, AmbientLight, CascadeShadowConfig, CascadeShadowConfigBuilder, Cascades,
-    ClusteredDecal, DirectionalLight, DirectionalLightShadowMap, DirectionalLightTexture,
-    FogVolume, IrradianceVolume, LightPlugin, LightProbe, NotShadowCaster, NotShadowReceiver,
-    PointLight, PointLightShadowMap, PointLightTexture, ShadowFilteringMethod, SpotLight,
-    SpotLightTexture, TransmittedShadowReceiver, VolumetricFog, VolumetricLight,
+use bevy_light::{
+    AmbientLight, DirectionalLight, LightPlugin, PointLight, ShadowFilteringMethod,
+    SimulationLightSystems, SpotLight,
 };
 use bevy_shader::{load_shader_library, ShaderRef};
 pub use cluster::*;
@@ -87,11 +83,6 @@ pub mod prelude {
         pbr_material::StandardMaterial,
         ssao::ScreenSpaceAmbientOcclusionPlugin,
     };
-    #[doc(hidden)]
-    pub use bevy_light::{
-        light_consts, AmbientLight, DirectionalLight, EnvironmentMapLight,
-        GeneratedEnvironmentMapLight, LightProbe, PointLight, SpotLight,
-    };
 }
 
 pub mod graph {
diff --git a/crates/bevy_pbr/src/light_probe/irradiance_volume.rs b/crates/bevy_pbr/src/light_probe/irradiance_volume.rs
index a7320792b2ef4..417f22083ead6 100644
--- a/crates/bevy_pbr/src/light_probe/irradiance_volume.rs
+++ b/crates/bevy_pbr/src/light_probe/irradiance_volume.rs
@@ -134,7 +134,7 @@
 //! [Why ambient cubes?]: #why-ambient-cubes
 
 use bevy_image::Image;
-pub use bevy_light::IrradianceVolume;
+use bevy_light::IrradianceVolume;
 use bevy_render::{
     render_asset::RenderAssets,
     render_resource::{
diff --git a/crates/bevy_pbr/src/pbr_material.rs b/crates/bevy_pbr/src/pbr_material.rs
index 9c988bf1ed0fe..dd664c1a2da4f 100644
--- a/crates/bevy_pbr/src/pbr_material.rs
+++ b/crates/bevy_pbr/src/pbr_material.rs
@@ -213,7 +213,7 @@ pub struct StandardMaterial {
     ///
     /// - The material's [`StandardMaterial::base_color`] also modulates the transmitted light;
     /// - To receive transmitted shadows on the diffuse transmission lobe (i.e. the “backside”) of the material,
-    ///   use the [`TransmittedShadowReceiver`] component.
+    ///   use the [`TransmittedShadowReceiver`](bevy_light::TransmittedShadowReceiver) component.
     #[doc(alias = "translucency")]
     pub diffuse_transmission: f32,
 
diff --git a/crates/bevy_pbr/src/render/light.rs b/crates/bevy_pbr/src/render/light.rs
index deb2c4cd27b50..41792b38a62a1 100644
--- a/crates/bevy_pbr/src/render/light.rs
+++ b/crates/bevy_pbr/src/render/light.rs
@@ -1,7 +1,9 @@
 use crate::*;
 use bevy_asset::UntypedAssetId;
-pub use bevy_camera::primitives::{face_index_to_name, CubeMapFace, CUBE_MAP_FACES};
-use bevy_camera::primitives::{CascadesFrusta, CubemapFrusta, Frustum, HalfSpace};
+use bevy_camera::primitives::{
+    face_index_to_name, CascadesFrusta, CubeMapFace, CubemapFrusta, Frustum, HalfSpace,
+    CUBE_MAP_FACES,
+};
 use bevy_camera::visibility::{
     CascadesVisibleEntities, CubemapVisibleEntities, RenderLayers, ViewVisibility,
     VisibleMeshEntities,
diff --git a/crates/bevy_render/src/camera.rs b/crates/bevy_render/src/camera.rs
index 05633ab48c833..8fb0dc452bf74 100644
--- a/crates/bevy_render/src/camera.rs
+++ b/crates/bevy_render/src/camera.rs
@@ -16,10 +16,12 @@ use crate::{
 
 use bevy_app::{App, Plugin, PostStartup, PostUpdate};
 use bevy_asset::{AssetEvent, AssetEventSystems, AssetId, Assets};
-pub use bevy_camera::*;
 use bevy_camera::{
     primitives::Frustum,
-    visibility::{RenderLayers, VisibleEntities},
+    visibility::{self, RenderLayers, VisibleEntities},
+    Camera, Camera2d, Camera3d, CameraMainTextureUsages, CameraOutputMode, CameraUpdateSystems,
+    ClearColor, ClearColorConfig, Exposure, NormalizedRenderTarget, Projection, RenderTargetInfo,
+    Viewport,
 };
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::{
diff --git a/crates/bevy_render/src/lib.rs b/crates/bevy_render/src/lib.rs
index d3c8d0235e2be..9d4d95706c661 100644
--- a/crates/bevy_render/src/lib.rs
+++ b/crates/bevy_render/src/lib.rs
@@ -42,6 +42,8 @@ pub mod diagnostic;
 pub mod erased_render_asset;
 pub mod experimental;
 pub mod extract_component;
+#[cfg(feature = "bevy_light")]
+mod extract_impls;
 pub mod extract_instances;
 mod extract_param;
 pub mod extract_resource;
@@ -63,9 +65,6 @@ pub mod sync_world;
 pub mod texture;
 pub mod view;
 mod wgpu_wrapper;
-pub use bevy_camera::primitives;
-#[cfg(feature = "bevy_light")]
-mod extract_impls;
 
 /// The render prelude.
 ///
@@ -75,24 +74,12 @@ pub mod prelude {
     pub use crate::{
         alpha::AlphaMode,
         camera::NormalizedRenderTargetExt as _,
-        mesh::{
-            morph::MorphWeights, primitives::MeshBuilder, primitives::Meshable, Mesh, Mesh2d,
-            Mesh3d,
-        },
-        render_resource::Shader,
         texture::{ImagePlugin, ManualTextureViews},
-        view::{InheritedVisibility, Msaa, ViewVisibility, Visibility},
+        view::Msaa,
         ExtractSchedule,
     };
-    // TODO: Remove this in a follow-up
-    #[doc(hidden)]
-    pub use bevy_camera::{
-        Camera, ClearColor, ClearColorConfig, OrthographicProjection, PerspectiveProjection,
-        Projection,
-    };
 }
 
-pub use bevy_shader::load_shader_library;
 pub use extract_param::Extract;
 
 use crate::{
@@ -115,7 +102,7 @@ use bevy_ecs::{
     schedule::{ScheduleBuildSettings, ScheduleLabel},
 };
 use bevy_image::{CompressedImageFormatSupport, CompressedImageFormats};
-use bevy_shader::{Shader, ShaderLoader};
+use bevy_shader::{load_shader_library, Shader, ShaderLoader};
 use bevy_utils::prelude::default;
 use bevy_window::{PrimaryWindow, RawHandleWrapperHolder};
 use bitflags::bitflags;
diff --git a/crates/bevy_render/src/mesh/mod.rs b/crates/bevy_render/src/mesh/mod.rs
index 43cf2dedf4a9b..a2bbfec58c3c1 100644
--- a/crates/bevy_render/src/mesh/mod.rs
+++ b/crates/bevy_render/src/mesh/mod.rs
@@ -17,7 +17,7 @@ use bevy_ecs::{
     },
 };
 use bevy_mesh::morph::{MeshMorphWeights, MorphWeights};
-pub use bevy_mesh::*;
+use bevy_mesh::*;
 use wgpu::IndexFormat;
 
 /// Adds the [`Mesh`] as an asset and makes sure that they are extracted and prepared for the GPU.
diff --git a/crates/bevy_render/src/render_resource/mod.rs b/crates/bevy_render/src/render_resource/mod.rs
index efac4c4bb4cba..0a41dfdd17ad9 100644
--- a/crates/bevy_render/src/render_resource/mod.rs
+++ b/crates/bevy_render/src/render_resource/mod.rs
@@ -16,7 +16,6 @@ mod storage_buffer;
 mod texture;
 mod uniform_buffer;
 
-pub use bevy_shader::*;
 pub use bind_group::*;
 pub use bind_group_entries::*;
 pub use bind_group_layout::*;
diff --git a/crates/bevy_render/src/view/visibility/mod.rs b/crates/bevy_render/src/view/visibility/mod.rs
index 281b6967da4b6..3994827f7538a 100644
--- a/crates/bevy_render/src/view/visibility/mod.rs
+++ b/crates/bevy_render/src/view/visibility/mod.rs
@@ -7,7 +7,7 @@ use bevy_utils::TypeIdMap;
 use crate::sync_world::MainEntity;
 
 mod range;
-pub use bevy_camera::visibility::*;
+use bevy_camera::visibility::*;
 pub use range::*;
 
 /// Collection of entities visible from the current view.
diff --git a/release-content/migration-guides/bevy_render_reorganization.md b/release-content/migration-guides/bevy_render_reorganization.md
index a0ece49407186..67d394ae44911 100644
--- a/release-content/migration-guides/bevy_render_reorganization.md
+++ b/release-content/migration-guides/bevy_render_reorganization.md
@@ -1,24 +1,27 @@
 ---
 title: `bevy_render` reorganization
-pull_requests: [19997, 19991, 20000, 19949, 19943, 19953]
+pull_requests: [20485, 20496, 20493, 20492, 20491, 20488, 20487, 20486, 20483, 20480, 20479, 20478, 20477, 20473, 20472, 20471, 20470, 20392, 20390, 20388, 20345, 20344, 20330, 20051, 20000, 19997, 19991, 19985, 19973, 19965, 19963, 19962, 19960, 19959, 19958, 19957, 19956, 19955, 19954, 19953, 19949, 19943, 16620, 16619, 15700, 15666, 15650]
 ---
 
-You must now import `bevy_render::NormalizedRenderTargetExt` to use methods on NormalizedRenderTarget
+You must now import `bevy_render::NormalizedRenderTargetExt` to use methods on `NormalizedRenderTarget`
 `ManualTextureViews` is now in `bevy_render::texture`
 
-Camera and visibility types have been moved to a new crate, `bevy_camera`, but continue to be re-exported by `bevy_render` for now.
-Import them directly or from `bevy::camera` now, as the re-exports will be removed.
+Camera types such as `Camera`, `Camera3d`, `Camera2d`, `ClearColor`, `ClearColorConfig`, `Projection`, `PerspectiveProjection`, and `OrthographicProjection` have been moved to a new crate, `bevy_camera`.
+Visibility types such as `Visibility`, `InheritedVisibility`, `ViewVisibility`, `VisibleEntities`, and `RenderLayers` have been moved to `bevy_camera::visibility`.
+Culling primitives such as `Frustum`, `HalfSpace`, `Aabb`, and `Sphere` have been moved to `bevy_camera::primitives`.
+Import them directly or from `bevy::camera` now.
 
-Shader types have been moved to a new crate, `bevy_shader`, but continue to be re-exported by `bevy_render` for now.
-Import them directly or from `bevy::shader` now, as the re-exports will be removed.
+Shader types such as `Shader`, `ShaderRef`, `ShaderDef`, `ShaderCache`, and `PipelineCompilationError` have been moved to a new crate, `bevy_shader`.
+Import them directly or from `bevy::shader` now.
 
-Light types have been moved to a new crate, `bevy_light`, but continue to be re-exported by `bevy_render` for now.
-Import them directly or from `bevy::light` now, as the re-exports will be removed.
+Light types such `AmbientLight`, `PointLight`, `SpotLight`, `DirectionalLight`, `EnvironmentMapLight`, `GeneratedEnvironmentMapLight`, `LightProbe`, `IrradianceVolume`, `VolumetricFog`, `FogVolume`, and `light_consts` have been moved to a new crate, `bevy_light`.
+Import them directly or from `bevy::light` now.
 
-Mesh types have been moved to a new crate, `bevy_mesh`, but continue to be re-exported by `bevy_render` for now.
-Import them directly or from `bevy::mesh` now, as the re-exports will be removed.
+Mesh types such as `Mesh`, `Mesh3d`, `Mesh2d`, `MorphWeights`, `MeshBuilder`, and `Meshable` have been moved to a new crate, `bevy_mesh`.
+Import them directly or from `bevy::mesh` now.
 
-Image types have been moved to a new crate, `bevy_image`, but continue to be re-exported by `bevy_render` for now.
-Import them directly or from `bevy::image` now, as the re-exports will be removed.
+Image types such as `Image`, `ImageFormat`, `ImageSampler`, `ImageAddressMode`, `ImageSamplerDescriptor`, `ImageCompareFunction`, and `ImageSamplerBorderColor` have been moved to a new crate, `bevy_image`.
+Import them directly or from `bevy::image` now.
 
-RenderAssetUsages is no longer re-exported by `bevy_render`. Import it from `bevy_asset` instead.
+`RenderAssetUsages` is no longer re-exported by `bevy_render`.
+Import it from `bevy_asset` or `bevy::asset` instead.
diff --git a/release-content/release-notes/scene-type-crates.md b/release-content/release-notes/scene-type-crates.md
index 2ebbf26aaef2e..b0ba5a70408e9 100644
--- a/release-content/release-notes/scene-type-crates.md
+++ b/release-content/release-notes/scene-type-crates.md
@@ -1,7 +1,7 @@
 ---
 title: Define scenes without depending on bevy_render
 authors: ["@atlv24"]
-pull_requests: [19997, 19991, 20000, 19949, 19943, 19953, 20330]
+pull_requests: [20485, 20496, 20493, 20492, 20491, 20488, 20487, 20486, 20483, 20480, 20479, 20478, 20477, 20473, 20472, 20471, 20470, 20392, 20390, 20388, 20345, 20344, 20330, 20051, 20000, 19997, 19991, 19985, 19973, 19965, 19963, 19962, 19960, 19959, 19958, 19957, 19956, 19955, 19954, 19953, 19949, 19943, 16620, 16619, 15700, 15666, 15650]
 ---
 
 It is now possible to use cameras, lights, shaders, images, and meshes without depending on the Bevy renderer. This makes it possible for 3rd party custom renderers to be drop-in replacements for rendering existing scenes.

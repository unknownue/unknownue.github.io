diff --git a/crates/bevy_core_pipeline/src/auto_exposure/compensation_curve.rs b/crates/bevy_core_pipeline/src/auto_exposure/compensation_curve.rs
index 8b6d2593c95f4..7c2036fa72153 100644
--- a/crates/bevy_core_pipeline/src/auto_exposure/compensation_curve.rs
+++ b/crates/bevy_core_pipeline/src/auto_exposure/compensation_curve.rs
@@ -1,9 +1,9 @@
-use bevy_asset::prelude::*;
+use bevy_asset::{prelude::*, RenderAssetUsages};
 use bevy_ecs::system::{lifetimeless::SRes, SystemParamItem};
 use bevy_math::{cubic_splines::CubicGenerator, FloatExt, Vec2};
 use bevy_reflect::prelude::*;
 use bevy_render::{
-    render_asset::{RenderAsset, RenderAssetUsages},
+    render_asset::RenderAsset,
     render_resource::{
         Extent3d, ShaderType, TextureDescriptor, TextureDimension, TextureFormat, TextureUsages,
         TextureView, UniformBuffer,
diff --git a/crates/bevy_core_pipeline/src/post_process/mod.rs b/crates/bevy_core_pipeline/src/post_process/mod.rs
index 7d48a5b68b426..337e9ad7802d5 100644
--- a/crates/bevy_core_pipeline/src/post_process/mod.rs
+++ b/crates/bevy_core_pipeline/src/post_process/mod.rs
@@ -3,7 +3,9 @@
 //! Currently, this consists only of chromatic aberration.
 
 use bevy_app::{App, Plugin};
-use bevy_asset::{embedded_asset, load_embedded_asset, AssetServer, Assets, Handle};
+use bevy_asset::{
+    embedded_asset, load_embedded_asset, AssetServer, Assets, Handle, RenderAssetUsages,
+};
 use bevy_camera::Camera;
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::{
@@ -21,7 +23,7 @@ use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render::{
     diagnostic::RecordDiagnostics,
     extract_component::{ExtractComponent, ExtractComponentPlugin},
-    render_asset::{RenderAssetUsages, RenderAssets},
+    render_asset::RenderAssets,
     render_graph::{
         NodeRunError, RenderGraphContext, RenderGraphExt as _, ViewNode, ViewNodeRunner,
     },
diff --git a/crates/bevy_core_pipeline/src/tonemapping/mod.rs b/crates/bevy_core_pipeline/src/tonemapping/mod.rs
index 87433099d2132..8b1379f6b19b2 100644
--- a/crates/bevy_core_pipeline/src/tonemapping/mod.rs
+++ b/crates/bevy_core_pipeline/src/tonemapping/mod.rs
@@ -1,5 +1,7 @@
 use bevy_app::prelude::*;
-use bevy_asset::{embedded_asset, load_embedded_asset, AssetServer, Assets, Handle};
+use bevy_asset::{
+    embedded_asset, load_embedded_asset, AssetServer, Assets, Handle, RenderAssetUsages,
+};
 use bevy_camera::Camera;
 use bevy_ecs::prelude::*;
 use bevy_image::{CompressedImageFormats, Image, ImageSampler, ImageType};
@@ -7,7 +9,7 @@ use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_render::{
     extract_component::{ExtractComponent, ExtractComponentPlugin},
     extract_resource::{ExtractResource, ExtractResourcePlugin},
-    render_asset::{RenderAssetUsages, RenderAssets},
+    render_asset::RenderAssets,
     render_resource::{
         binding_types::{sampler, texture_2d, texture_3d, uniform_buffer},
         *,
diff --git a/crates/bevy_pbr/src/light_probe/generate.rs b/crates/bevy_pbr/src/light_probe/generate.rs
index a93d631dfba37..8e87b2916372d 100644
--- a/crates/bevy_pbr/src/light_probe/generate.rs
+++ b/crates/bevy_pbr/src/light_probe/generate.rs
@@ -12,7 +12,7 @@
 //! For prefiltered environment maps, see [`bevy_light::EnvironmentMapLight`].
 //! These components are intended to be added to a camera.
 use bevy_app::{App, Plugin, Update};
-use bevy_asset::{embedded_asset, load_embedded_asset, AssetServer, Assets};
+use bevy_asset::{embedded_asset, load_embedded_asset, AssetServer, Assets, RenderAssetUsages};
 use bevy_core_pipeline::core_3d::graph::{Core3d, Node3d};
 use bevy_ecs::{
     component::Component,
@@ -27,7 +27,7 @@ use bevy_image::Image;
 use bevy_math::{Quat, UVec2, Vec2};
 use bevy_render::{
     diagnostic::RecordDiagnostics,
-    render_asset::{RenderAssetUsages, RenderAssets},
+    render_asset::RenderAssets,
     render_graph::{Node, NodeRunError, RenderGraphContext, RenderGraphExt, RenderLabel},
     render_resource::{
         binding_types::*, AddressMode, BindGroup, BindGroupEntries, BindGroupLayout,
diff --git a/crates/bevy_render/src/render_asset.rs b/crates/bevy_render/src/render_asset.rs
index c35062eb85c40..3126ab8292696 100644
--- a/crates/bevy_render/src/render_asset.rs
+++ b/crates/bevy_render/src/render_asset.rs
@@ -3,8 +3,7 @@ use crate::{
     RenderSystems, Res,
 };
 use bevy_app::{App, Plugin, SubApp};
-pub use bevy_asset::RenderAssetUsages;
-use bevy_asset::{Asset, AssetEvent, AssetId, Assets};
+use bevy_asset::{Asset, AssetEvent, AssetId, Assets, RenderAssetUsages};
 use bevy_ecs::{
     prelude::{Commands, EventReader, IntoScheduleConfigs, ResMut, Resource},
     schedule::{ScheduleConfigs, SystemSet},
diff --git a/crates/bevy_render/src/storage.rs b/crates/bevy_render/src/storage.rs
index a07e7d845414c..d7c208f001bf3 100644
--- a/crates/bevy_render/src/storage.rs
+++ b/crates/bevy_render/src/storage.rs
@@ -1,10 +1,10 @@
 use crate::{
-    render_asset::{PrepareAssetError, RenderAsset, RenderAssetPlugin, RenderAssetUsages},
+    render_asset::{PrepareAssetError, RenderAsset, RenderAssetPlugin},
     render_resource::{Buffer, BufferUsages},
     renderer::RenderDevice,
 };
 use bevy_app::{App, Plugin};
-use bevy_asset::{Asset, AssetApp, AssetId};
+use bevy_asset::{Asset, AssetApp, AssetId, RenderAssetUsages};
 use bevy_ecs::system::{lifetimeless::SRes, SystemParamItem};
 use bevy_reflect::{prelude::ReflectDefault, Reflect};
 use bevy_utils::default;
diff --git a/crates/bevy_render/src/texture/fallback_image.rs b/crates/bevy_render/src/texture/fallback_image.rs
index 18c83414bd7d6..8a3ff801ecf1d 100644
--- a/crates/bevy_render/src/texture/fallback_image.rs
+++ b/crates/bevy_render/src/texture/fallback_image.rs
@@ -1,9 +1,9 @@
 use crate::{
-    render_asset::RenderAssetUsages,
     render_resource::*,
     renderer::{RenderDevice, RenderQueue},
     texture::{DefaultImageSampler, GpuImage},
 };
+use bevy_asset::RenderAssetUsages;
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::{
     prelude::{FromWorld, Res, ResMut},
diff --git a/crates/bevy_render/src/texture/gpu_image.rs b/crates/bevy_render/src/texture/gpu_image.rs
index 6fbc9dfea769d..622ffd16fb156 100644
--- a/crates/bevy_render/src/texture/gpu_image.rs
+++ b/crates/bevy_render/src/texture/gpu_image.rs
@@ -1,9 +1,9 @@
 use crate::{
-    render_asset::{PrepareAssetError, RenderAsset, RenderAssetUsages},
+    render_asset::{PrepareAssetError, RenderAsset},
     render_resource::{DefaultImageSampler, Sampler, Texture, TextureView},
     renderer::{RenderDevice, RenderQueue},
 };
-use bevy_asset::AssetId;
+use bevy_asset::{AssetId, RenderAssetUsages};
 use bevy_ecs::system::{lifetimeless::SRes, SystemParamItem};
 use bevy_image::{Image, ImageSampler};
 use bevy_math::{AspectRatio, UVec2};
diff --git a/crates/bevy_render/src/view/window/screenshot.rs b/crates/bevy_render/src/view/window/screenshot.rs
index d80057aad69e5..b87d76252c557 100644
--- a/crates/bevy_render/src/view/window/screenshot.rs
+++ b/crates/bevy_render/src/view/window/screenshot.rs
@@ -1,7 +1,7 @@
 use super::ExtractedWindows;
 use crate::{
     gpu_readback,
-    render_asset::{RenderAssetUsages, RenderAssets},
+    render_asset::RenderAssets,
     render_resource::{
         binding_types::texture_2d, BindGroup, BindGroupEntries, BindGroupLayout,
         BindGroupLayoutEntries, Buffer, BufferUsages, CachedRenderPipelineId, FragmentState,
@@ -15,7 +15,7 @@ use crate::{
 };
 use alloc::{borrow::Cow, sync::Arc};
 use bevy_app::{First, Plugin, Update};
-use bevy_asset::{embedded_asset, load_embedded_asset, AssetServer, Handle};
+use bevy_asset::{embedded_asset, load_embedded_asset, AssetServer, Handle, RenderAssetUsages};
 use bevy_camera::{ManualTextureViewHandle, NormalizedRenderTarget, RenderTarget};
 use bevy_derive::{Deref, DerefMut};
 use bevy_ecs::{
diff --git a/crates/bevy_text/src/font_atlas.rs b/crates/bevy_text/src/font_atlas.rs
index 5407d25f8471d..67a4703a59e2e 100644
--- a/crates/bevy_text/src/font_atlas.rs
+++ b/crates/bevy_text/src/font_atlas.rs
@@ -1,11 +1,8 @@
-use bevy_asset::{Assets, Handle};
+use bevy_asset::{Assets, Handle, RenderAssetUsages};
 use bevy_image::{prelude::*, ImageSampler, ToExtents};
 use bevy_math::{IVec2, UVec2};
 use bevy_platform::collections::HashMap;
-use bevy_render::{
-    render_asset::RenderAssetUsages,
-    render_resource::{TextureDimension, TextureFormat},
-};
+use bevy_render::render_resource::{TextureDimension, TextureFormat};
 
 use crate::{FontSmoothing, GlyphAtlasLocation, TextError};
 
diff --git a/crates/bevy_text/src/font_atlas_set.rs b/crates/bevy_text/src/font_atlas_set.rs
index 8f0dd9116858c..7b3167cdc0abe 100644
--- a/crates/bevy_text/src/font_atlas_set.rs
+++ b/crates/bevy_text/src/font_atlas_set.rs
@@ -1,13 +1,10 @@
-use bevy_asset::{AssetEvent, AssetId, Assets};
+use bevy_asset::{AssetEvent, AssetId, Assets, RenderAssetUsages};
 use bevy_ecs::{event::EventReader, resource::Resource, system::ResMut};
 use bevy_image::prelude::*;
 use bevy_math::{IVec2, UVec2};
 use bevy_platform::collections::HashMap;
 use bevy_reflect::TypePath;
-use bevy_render::{
-    render_asset::RenderAssetUsages,
-    render_resource::{Extent3d, TextureDimension, TextureFormat},
-};
+use bevy_render::render_resource::{Extent3d, TextureDimension, TextureFormat};
 
 use crate::{error::TextError, Font, FontAtlas, FontSmoothing, GlyphAtlasInfo};
 
diff --git a/examples/2d/cpu_draw.rs b/examples/2d/cpu_draw.rs
index c8498c60941d3..6834bf3024f52 100644
--- a/examples/2d/cpu_draw.rs
+++ b/examples/2d/cpu_draw.rs
@@ -5,12 +5,10 @@
 //! values and automatically perform any necessary conversions and encoding
 //! into the texture's native pixel format.
 
+use bevy::asset::RenderAssetUsages;
 use bevy::color::{color_difference::EuclideanDistance, palettes::css};
 use bevy::prelude::*;
-use bevy::render::{
-    render_asset::RenderAssetUsages,
-    render_resource::{Extent3d, TextureDimension, TextureFormat},
-};
+use bevy::render::render_resource::{Extent3d, TextureDimension, TextureFormat};
 use rand::{Rng, SeedableRng};
 use rand_chacha::ChaCha8Rng;
 
diff --git a/examples/2d/mesh2d_manual.rs b/examples/2d/mesh2d_manual.rs
index b90218fb6058c..f6af8e994b01b 100644
--- a/examples/2d/mesh2d_manual.rs
+++ b/examples/2d/mesh2d_manual.rs
@@ -6,6 +6,7 @@
 //! [`Material2d`]: bevy::sprite::Material2d
 
 use bevy::{
+    asset::RenderAssetUsages,
     color::palettes::basic::YELLOW,
     core_pipeline::core_2d::{Transparent2d, CORE_2D_DEPTH_FORMAT},
     math::{ops, FloatOrd},
@@ -13,7 +14,7 @@ use bevy::{
     prelude::*,
     render::{
         mesh::RenderMesh,
-        render_asset::{RenderAssetUsages, RenderAssets},
+        render_asset::RenderAssets,
         render_phase::{
             AddRenderCommand, DrawFunctions, PhaseItemExtraIndex, SetItemPipeline,
             ViewSortedRenderPhases,
diff --git a/examples/3d/3d_shapes.rs b/examples/3d/3d_shapes.rs
index 3fab989a1bcf1..ef8fa16ddeb52 100644
--- a/examples/3d/3d_shapes.rs
+++ b/examples/3d/3d_shapes.rs
@@ -18,12 +18,10 @@ use std::f32::consts::PI;
 #[cfg(not(target_arch = "wasm32"))]
 use bevy::pbr::wireframe::{WireframeConfig, WireframePlugin};
 use bevy::{
+    asset::RenderAssetUsages,
     color::palettes::basic::SILVER,
     prelude::*,
-    render::{
-        render_asset::RenderAssetUsages,
-        render_resource::{Extent3d, TextureDimension, TextureFormat},
-    },
+    render::render_resource::{Extent3d, TextureDimension, TextureFormat},
 };
 
 fn main() {
diff --git a/examples/3d/anti_aliasing.rs b/examples/3d/anti_aliasing.rs
index ba8711c9b4e9e..74d03852bb96f 100644
--- a/examples/3d/anti_aliasing.rs
+++ b/examples/3d/anti_aliasing.rs
@@ -9,13 +9,13 @@ use bevy::{
         smaa::{Smaa, SmaaPreset},
         taa::TemporalAntiAliasing,
     },
+    asset::RenderAssetUsages,
     core_pipeline::prepass::{DepthPrepass, MotionVectorPrepass},
     image::{ImageSampler, ImageSamplerDescriptor},
     light::CascadeShadowConfigBuilder,
     prelude::*,
     render::{
         camera::{MipBias, TemporalJitter},
-        render_asset::RenderAssetUsages,
         render_resource::{Extent3d, TextureDimension, TextureFormat},
         view::Hdr,
     },
diff --git a/examples/3d/generate_custom_mesh.rs b/examples/3d/generate_custom_mesh.rs
index 575e54a7d3dbc..b94d0b2f73508 100644
--- a/examples/3d/generate_custom_mesh.rs
+++ b/examples/3d/generate_custom_mesh.rs
@@ -3,9 +3,10 @@
 //! and how to change the UV mapping at run-time.
 
 use bevy::{
+    asset::RenderAssetUsages,
     mesh::{Indices, VertexAttributeValues},
     prelude::*,
-    render::{render_asset::RenderAssetUsages, render_resource::PrimitiveTopology},
+    render::render_resource::PrimitiveTopology,
 };
 
 // Define a "marker" component to mark the custom mesh. Marker components are often used in Bevy for
diff --git a/examples/3d/lines.rs b/examples/3d/lines.rs
index 64d09b710e17d..c29e9fb45c0a8 100644
--- a/examples/3d/lines.rs
+++ b/examples/3d/lines.rs
@@ -1,15 +1,13 @@
 //! Create a custom material to draw basic lines in 3D
 
 use bevy::{
+    asset::RenderAssetUsages,
     mesh::{MeshVertexBufferLayoutRef, PrimitiveTopology},
     pbr::{MaterialPipeline, MaterialPipelineKey},
     prelude::*,
     reflect::TypePath,
-    render::{
-        render_asset::RenderAssetUsages,
-        render_resource::{
-            AsBindGroup, PolygonMode, RenderPipelineDescriptor, SpecializedMeshPipelineError,
-        },
+    render::render_resource::{
+        AsBindGroup, PolygonMode, RenderPipelineDescriptor, SpecializedMeshPipelineError,
     },
     shader::ShaderRef,
 };
diff --git a/examples/3d/motion_blur.rs b/examples/3d/motion_blur.rs
index 529ae85499f11..308b2042161f3 100644
--- a/examples/3d/motion_blur.rs
+++ b/examples/3d/motion_blur.rs
@@ -353,7 +353,7 @@ fn move_camera(
 }
 
 fn uv_debug_texture() -> Image {
-    use bevy::render::{render_asset::RenderAssetUsages, render_resource::*};
+    use bevy::{asset::RenderAssetUsages, render::render_resource::*};
     const TEXTURE_SIZE: usize = 7;
 
     let mut palette = [
diff --git a/examples/animation/custom_skinned_mesh.rs b/examples/animation/custom_skinned_mesh.rs
index 0385713fa9fcb..c706e07be9b64 100644
--- a/examples/animation/custom_skinned_mesh.rs
+++ b/examples/animation/custom_skinned_mesh.rs
@@ -4,13 +4,13 @@
 use std::f32::consts::*;
 
 use bevy::{
+    asset::RenderAssetUsages,
     math::ops,
     mesh::{
         skinning::{SkinnedMesh, SkinnedMeshInverseBindposes},
         Indices, PrimitiveTopology, VertexAttributeValues,
     },
     prelude::*,
-    render::render_asset::RenderAssetUsages,
 };
 use rand::{Rng, SeedableRng};
 use rand_chacha::ChaCha8Rng;
diff --git a/examples/asset/alter_mesh.rs b/examples/asset/alter_mesh.rs
index 02c7536a831e4..f5447eb0930a8 100644
--- a/examples/asset/alter_mesh.rs
+++ b/examples/asset/alter_mesh.rs
@@ -1,8 +1,8 @@
 //! Shows how to modify mesh assets after spawning.
 
 use bevy::{
-    gltf::GltfLoaderSettings, input::common_conditions::input_just_pressed,
-    mesh::VertexAttributeValues, prelude::*, render::render_asset::RenderAssetUsages,
+    asset::RenderAssetUsages, gltf::GltfLoaderSettings,
+    input::common_conditions::input_just_pressed, mesh::VertexAttributeValues, prelude::*,
 };
 
 fn main() {
diff --git a/examples/asset/alter_sprite.rs b/examples/asset/alter_sprite.rs
index d47c303921521..1863b2006cb1d 100644
--- a/examples/asset/alter_sprite.rs
+++ b/examples/asset/alter_sprite.rs
@@ -1,8 +1,8 @@
 //! Shows how to modify texture assets after spawning.
 
 use bevy::{
-    image::ImageLoaderSettings, input::common_conditions::input_just_pressed, prelude::*,
-    render::render_asset::RenderAssetUsages,
+    asset::RenderAssetUsages, image::ImageLoaderSettings,
+    input::common_conditions::input_just_pressed, prelude::*,
 };
 
 fn main() {
diff --git a/examples/math/custom_primitives.rs b/examples/math/custom_primitives.rs
index 69e7d8318b372..f9121a4aa7a05 100644
--- a/examples/math/custom_primitives.rs
+++ b/examples/math/custom_primitives.rs
@@ -4,6 +4,7 @@
 use std::f32::consts::{PI, SQRT_2};
 
 use bevy::{
+    asset::RenderAssetUsages,
     camera::ScalingMode,
     color::palettes::css::{RED, WHITE},
     input::common_conditions::input_just_pressed,
@@ -15,7 +16,6 @@ use bevy::{
     },
     mesh::{Extrudable, ExtrusionBuilder, PerimeterSegment},
     prelude::*,
-    render::render_asset::RenderAssetUsages,
 };
 
 const HEART: Heart = Heart::new(0.5);
diff --git a/examples/shader/compute_shader_game_of_life.rs b/examples/shader/compute_shader_game_of_life.rs
index b8a548d366497..6aac9d4cbdcce 100644
--- a/examples/shader/compute_shader_game_of_life.rs
+++ b/examples/shader/compute_shader_game_of_life.rs
@@ -4,10 +4,11 @@
 //! is rendered to the screen.
 
 use bevy::{
+    asset::RenderAssetUsages,
     prelude::*,
     render::{
         extract_resource::{ExtractResource, ExtractResourcePlugin},
-        render_asset::{RenderAssetUsages, RenderAssets},
+        render_asset::RenderAssets,
         render_graph::{self, RenderGraph, RenderLabel},
         render_resource::{binding_types::texture_storage_2d, *},
         renderer::{RenderContext, RenderDevice},
diff --git a/examples/shader/gpu_readback.rs b/examples/shader/gpu_readback.rs
index 44bb43d5d917c..7a2e6f373f868 100644
--- a/examples/shader/gpu_readback.rs
+++ b/examples/shader/gpu_readback.rs
@@ -2,11 +2,12 @@
 //! using both a storage buffer and texture.
 
 use bevy::{
+    asset::RenderAssetUsages,
     prelude::*,
     render::{
         extract_resource::{ExtractResource, ExtractResourcePlugin},
         gpu_readback::{Readback, ReadbackComplete},
-        render_asset::{RenderAssetUsages, RenderAssets},
+        render_asset::RenderAssets,
         render_graph::{self, RenderGraph, RenderLabel},
         render_resource::{
             binding_types::{storage_buffer, texture_storage_2d},
diff --git a/examples/shader_advanced/specialized_mesh_pipeline.rs b/examples/shader_advanced/specialized_mesh_pipeline.rs
index 050615bce421c..40602a8429274 100644
--- a/examples/shader_advanced/specialized_mesh_pipeline.rs
+++ b/examples/shader_advanced/specialized_mesh_pipeline.rs
@@ -7,6 +7,7 @@
 //! [`SpecializedMeshPipeline`] let's you customize the entire pipeline used when rendering a mesh.
 
 use bevy::{
+    asset::RenderAssetUsages,
     camera::visibility::{self, VisibilityClass},
     core_pipeline::core_3d::{Opaque3d, Opaque3dBatchSetKey, Opaque3dBinKey, CORE_3D_DEPTH_FORMAT},
     ecs::component::Tick,
@@ -21,7 +22,7 @@ use bevy::{
         batching::gpu_preprocessing::GpuPreprocessingSupport,
         extract_component::{ExtractComponent, ExtractComponentPlugin},
         mesh::{allocator::MeshAllocator, RenderMesh},
-        render_asset::{RenderAssetUsages, RenderAssets},
+        render_asset::RenderAssets,
         render_phase::{
             AddRenderCommand, BinnedRenderPhaseType, DrawFunctions, SetItemPipeline,
             ViewBinnedRenderPhases,
diff --git a/examples/stress_tests/bevymark.rs b/examples/stress_tests/bevymark.rs
index 2bb76a1cbde2d..a92a57ded5fa5 100644
--- a/examples/stress_tests/bevymark.rs
+++ b/examples/stress_tests/bevymark.rs
@@ -7,13 +7,11 @@ use std::str::FromStr;
 
 use argh::FromArgs;
 use bevy::{
+    asset::RenderAssetUsages,
     color::palettes::basic::*,
     diagnostic::{DiagnosticsStore, FrameTimeDiagnosticsPlugin, LogDiagnosticsPlugin},
     prelude::*,
-    render::{
-        render_asset::RenderAssetUsages,
-        render_resource::{Extent3d, TextureDimension, TextureFormat},
-    },
+    render::render_resource::{Extent3d, TextureDimension, TextureFormat},
     sprite::AlphaMode2d,
     window::{PresentMode, WindowResolution},
     winit::{UpdateMode, WinitSettings},
diff --git a/examples/stress_tests/many_cubes.rs b/examples/stress_tests/many_cubes.rs
index 5f27fd6e2ad38..e08eb8b88d843 100644
--- a/examples/stress_tests/many_cubes.rs
+++ b/examples/stress_tests/many_cubes.rs
@@ -12,6 +12,7 @@ use std::{f64::consts::PI, str::FromStr};
 
 use argh::FromArgs;
 use bevy::{
+    asset::RenderAssetUsages,
     camera::visibility::{NoCpuCulling, NoFrustumCulling},
     diagnostic::{FrameTimeDiagnosticsPlugin, LogDiagnosticsPlugin},
     light::NotShadowCaster,
@@ -19,7 +20,6 @@ use bevy::{
     prelude::*,
     render::{
         batching::NoAutomaticBatching,
-        render_asset::RenderAssetUsages,
         render_resource::{Extent3d, TextureDimension, TextureFormat},
         view::NoIndirectDrawing,
     },
diff --git a/examples/ui/render_ui_to_texture.rs b/examples/ui/render_ui_to_texture.rs
index 1cc52cef10cbb..9ebe8f979ef81 100644
--- a/examples/ui/render_ui_to_texture.rs
+++ b/examples/ui/render_ui_to_texture.rs
@@ -3,13 +3,11 @@
 use std::f32::consts::PI;
 
 use bevy::{
+    asset::RenderAssetUsages,
     camera::RenderTarget,
     color::palettes::css::GOLD,
     prelude::*,
-    render::{
-        render_asset::RenderAssetUsages,
-        render_resource::{Extent3d, TextureDimension, TextureFormat, TextureUsages},
-    },
+    render::render_resource::{Extent3d, TextureDimension, TextureFormat, TextureUsages},
 };
 
 fn main() {
diff --git a/tests/3d/test_invalid_skinned_mesh.rs b/tests/3d/test_invalid_skinned_mesh.rs
index e566e2aa80c46..8264beae10319 100644
--- a/tests/3d/test_invalid_skinned_mesh.rs
+++ b/tests/3d/test_invalid_skinned_mesh.rs
@@ -1,6 +1,7 @@
 //! Test that the renderer can handle various invalid skinned meshes
 
 use bevy::{
+    asset::RenderAssetUsages,
     camera::ScalingMode,
     core_pipeline::motion_blur::MotionBlur,
     math::ops,
@@ -9,7 +10,6 @@ use bevy::{
         Indices, PrimitiveTopology, VertexAttributeValues,
     },
     prelude::*,
-    render::render_asset::RenderAssetUsages,
 };
 use core::f32::consts::TAU;
 

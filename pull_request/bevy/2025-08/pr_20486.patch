diff --git a/crates/bevy_dev_tools/Cargo.toml b/crates/bevy_dev_tools/Cargo.toml
index d31fe7ef220d9..0ff4efe17128e 100644
--- a/crates/bevy_dev_tools/Cargo.toml
+++ b/crates/bevy_dev_tools/Cargo.toml
@@ -15,6 +15,7 @@ bevy_ci_testing = ["serde", "ron"]
 # bevy
 bevy_app = { path = "../bevy_app", version = "0.17.0-dev" }
 bevy_asset = { path = "../bevy_asset", version = "0.17.0-dev" }
+bevy_camera = { path = "../bevy_camera", version = "0.17.0-dev" }
 bevy_color = { path = "../bevy_color", version = "0.17.0-dev" }
 bevy_diagnostic = { path = "../bevy_diagnostic", version = "0.17.0-dev" }
 bevy_ecs = { path = "../bevy_ecs", version = "0.17.0-dev" }
diff --git a/crates/bevy_dev_tools/src/fps_overlay.rs b/crates/bevy_dev_tools/src/fps_overlay.rs
index aa66c97560632..0ababe975c64d 100644
--- a/crates/bevy_dev_tools/src/fps_overlay.rs
+++ b/crates/bevy_dev_tools/src/fps_overlay.rs
@@ -2,6 +2,7 @@
 
 use bevy_app::{Plugin, Startup, Update};
 use bevy_asset::{Assets, Handle};
+use bevy_camera::visibility::Visibility;
 use bevy_color::Color;
 use bevy_diagnostic::{DiagnosticsStore, FrameTimeDiagnosticsPlugin};
 use bevy_ecs::{
@@ -14,7 +15,7 @@ use bevy_ecs::{
     schedule::{common_conditions::resource_changed, IntoScheduleConfigs},
     system::{Commands, Query, Res, ResMut},
 };
-use bevy_render::{storage::ShaderStorageBuffer, view::Visibility};
+use bevy_render::storage::ShaderStorageBuffer;
 use bevy_text::{Font, TextColor, TextFont, TextSpan};
 use bevy_time::Time;
 use bevy_ui::{
diff --git a/crates/bevy_dev_tools/src/picking_debug.rs b/crates/bevy_dev_tools/src/picking_debug.rs
index 16233cd3dc8c7..4a29e5bcb4e7b 100644
--- a/crates/bevy_dev_tools/src/picking_debug.rs
+++ b/crates/bevy_dev_tools/src/picking_debug.rs
@@ -1,6 +1,8 @@
 //! Text and on-screen debugging tools
 
 use bevy_app::prelude::*;
+use bevy_camera::visibility::Visibility;
+use bevy_camera::Camera;
 use bevy_color::prelude::*;
 use bevy_ecs::prelude::*;
 use bevy_picking::backend::HitData;
@@ -9,7 +11,6 @@ use bevy_picking::pointer::{Location, PointerId, PointerInput, PointerLocation,
 use bevy_picking::prelude::*;
 use bevy_picking::PickingSystems;
 use bevy_reflect::prelude::*;
-use bevy_render::prelude::*;
 use bevy_text::prelude::*;
 use bevy_ui::prelude::*;
 use core::cmp::Ordering;
diff --git a/crates/bevy_pbr/src/meshlet/instance_manager.rs b/crates/bevy_pbr/src/meshlet/instance_manager.rs
index a210accea7ff9..c51596fa0d7ac 100644
--- a/crates/bevy_pbr/src/meshlet/instance_manager.rs
+++ b/crates/bevy_pbr/src/meshlet/instance_manager.rs
@@ -6,6 +6,7 @@ use crate::{
     RenderMaterialInstances,
 };
 use bevy_asset::{AssetEvent, AssetServer, Assets, UntypedAssetId};
+use bevy_camera::visibility::RenderLayers;
 use bevy_ecs::{
     entity::{Entities, Entity, EntityHashMap},
     event::EventReader,
@@ -14,9 +15,7 @@ use bevy_ecs::{
     system::{Local, Query, Res, ResMut, SystemState},
 };
 use bevy_platform::collections::{HashMap, HashSet};
-use bevy_render::{
-    render_resource::StorageBuffer, sync_world::MainEntity, view::RenderLayers, MainWorld,
-};
+use bevy_render::{render_resource::StorageBuffer, sync_world::MainEntity, MainWorld};
 use bevy_transform::components::GlobalTransform;
 use core::ops::DerefMut;
 
diff --git a/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs b/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
index 2fcc0b5cf5544..ea4e3c5ee8015 100644
--- a/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
+++ b/crates/bevy_pbr/src/meshlet/material_pipeline_prepare.rs
@@ -3,9 +3,8 @@ use super::{
     resource_manager::ResourceManager,
 };
 use crate::{irradiance_volume::IrradianceVolume, *};
-use bevy_camera::Projection;
+use bevy_camera::{Camera3d, Projection};
 use bevy_core_pipeline::{
-    core_3d::Camera3d,
     prepass::{DeferredPrepass, DepthPrepass, MotionVectorPrepass, NormalPrepass},
     tonemapping::{DebandDither, Tonemapping},
 };
diff --git a/crates/bevy_pbr/src/meshlet/material_shade_nodes.rs b/crates/bevy_pbr/src/meshlet/material_shade_nodes.rs
index 60be5117e8886..890df912f4e93 100644
--- a/crates/bevy_pbr/src/meshlet/material_shade_nodes.rs
+++ b/crates/bevy_pbr/src/meshlet/material_shade_nodes.rs
@@ -10,6 +10,7 @@ use crate::{
     MeshViewBindGroup, PrepassViewBindGroup, ViewEnvironmentMapUniformOffset, ViewFogUniformOffset,
     ViewLightProbesUniformOffset, ViewLightsUniformOffset, ViewScreenSpaceReflectionsUniformOffset,
 };
+use bevy_camera::MainPassResolutionOverride;
 use bevy_camera::Viewport;
 use bevy_core_pipeline::prepass::{
     MotionVectorPrepass, PreviousViewUniformOffset, ViewPrepassTextures,
@@ -19,7 +20,7 @@ use bevy_ecs::{
     world::World,
 };
 use bevy_render::{
-    camera::{ExtractedCamera, MainPassResolutionOverride},
+    camera::ExtractedCamera,
     diagnostic::RecordDiagnostics,
     render_graph::{NodeRunError, RenderGraphContext, ViewNode},
     render_resource::{
diff --git a/crates/bevy_pbr/src/meshlet/mod.rs b/crates/bevy_pbr/src/meshlet/mod.rs
index dd9b46669cfa2..35b825bef9a2f 100644
--- a/crates/bevy_pbr/src/meshlet/mod.rs
+++ b/crates/bevy_pbr/src/meshlet/mod.rs
@@ -62,6 +62,7 @@ use crate::{
 };
 use bevy_app::{App, Plugin};
 use bevy_asset::{embedded_asset, AssetApp, AssetId, Handle};
+use bevy_camera::visibility::{self, Visibility, VisibilityClass};
 use bevy_core_pipeline::{
     core_3d::graph::{Core3d, Node3d},
     prepass::{DeferredPrepass, MotionVectorPrepass, NormalPrepass},
@@ -81,7 +82,7 @@ use bevy_render::{
     render_graph::{RenderGraphExt, ViewNodeRunner},
     renderer::RenderDevice,
     settings::WgpuFeatures,
-    view::{self, prepare_view_targets, Msaa, Visibility, VisibilityClass},
+    view::{prepare_view_targets, Msaa},
     ExtractSchedule, Render, RenderApp, RenderStartup, RenderSystems,
 };
 use bevy_transform::components::Transform;
@@ -259,7 +260,7 @@ fn check_meshlet_features(render_device: Res<RenderDevice>) {
 #[derive(Component, Clone, Debug, Default, Deref, DerefMut, Reflect, PartialEq, Eq, From)]
 #[reflect(Component, Default, Clone, PartialEq)]
 #[require(Transform, PreviousGlobalTransform, Visibility, VisibilityClass)]
-#[component(on_add = view::add_visibility_class::<MeshletMesh3d>)]
+#[component(on_add = visibility::add_visibility_class::<MeshletMesh3d>)]
 pub struct MeshletMesh3d(pub Handle<MeshletMesh>);
 
 impl From<MeshletMesh3d> for AssetId<MeshletMesh> {
diff --git a/crates/bevy_pbr/src/meshlet/resource_manager.rs b/crates/bevy_pbr/src/meshlet/resource_manager.rs
index dacab4afc4ecd..35906ce666cf2 100644
--- a/crates/bevy_pbr/src/meshlet/resource_manager.rs
+++ b/crates/bevy_pbr/src/meshlet/resource_manager.rs
@@ -1,7 +1,7 @@
 use super::{instance_manager::InstanceManager, meshlet_mesh_manager::MeshletMeshManager};
 use crate::ShadowView;
+use bevy_camera::{visibility::RenderLayers, Camera3d};
 use bevy_core_pipeline::{
-    core_3d::Camera3d,
     experimental::mip_generation::{self, ViewDepthPyramid},
     prepass::{PreviousViewData, PreviousViewUniforms},
 };
@@ -18,7 +18,7 @@ use bevy_render::{
     render_resource::*,
     renderer::{RenderDevice, RenderQueue},
     texture::{CachedTexture, TextureCache},
-    view::{ExtractedView, RenderLayers, ViewUniform, ViewUniforms},
+    view::{ExtractedView, ViewUniform, ViewUniforms},
 };
 use binding_types::*;
 use core::iter;
diff --git a/crates/bevy_solari/Cargo.toml b/crates/bevy_solari/Cargo.toml
index 40eaab2aabb6d..124a0150cb45d 100644
--- a/crates/bevy_solari/Cargo.toml
+++ b/crates/bevy_solari/Cargo.toml
@@ -12,6 +12,7 @@ keywords = ["bevy"]
 # bevy
 bevy_app = { path = "../bevy_app", version = "0.17.0-dev" }
 bevy_asset = { path = "../bevy_asset", version = "0.17.0-dev" }
+bevy_camera = { path = "../bevy_camera", version = "0.17.0-dev" }
 bevy_color = { path = "../bevy_color", version = "0.17.0-dev" }
 bevy_core_pipeline = { path = "../bevy_core_pipeline", version = "0.17.0-dev" }
 bevy_derive = { path = "../bevy_derive", version = "0.17.0-dev" }
diff --git a/crates/bevy_solari/src/pathtracer/extract.rs b/crates/bevy_solari/src/pathtracer/extract.rs
index c90302dd11ec1..19db4f3331563 100644
--- a/crates/bevy_solari/src/pathtracer/extract.rs
+++ b/crates/bevy_solari/src/pathtracer/extract.rs
@@ -1,10 +1,11 @@
 use super::{prepare::PathtracerAccumulationTexture, Pathtracer};
+use bevy_camera::Camera;
 use bevy_ecs::{
     change_detection::DetectChanges,
     system::{Commands, Query},
     world::Ref,
 };
-use bevy_render::{camera::Camera, sync_world::RenderEntity, Extract};
+use bevy_render::{sync_world::RenderEntity, Extract};
 use bevy_transform::components::GlobalTransform;
 
 pub fn extract_pathtracer(
diff --git a/crates/bevy_solari/src/realtime/extract.rs b/crates/bevy_solari/src/realtime/extract.rs
index 28b7d36e6fa1b..d2c1212de6eaf 100644
--- a/crates/bevy_solari/src/realtime/extract.rs
+++ b/crates/bevy_solari/src/realtime/extract.rs
@@ -1,7 +1,8 @@
 use super::{prepare::SolariLightingResources, SolariLighting};
+use bevy_camera::Camera;
 use bevy_ecs::system::{Commands, ResMut};
 use bevy_pbr::deferred::SkipDeferredLighting;
-use bevy_render::{camera::Camera, sync_world::RenderEntity, MainWorld};
+use bevy_render::{sync_world::RenderEntity, MainWorld};
 
 pub fn extract_solari_lighting(mut main_world: ResMut<MainWorld>, mut commands: Commands) {
     let mut cameras_3d = main_world.query::<(RenderEntity, &Camera, Option<&mut SolariLighting>)>();
diff --git a/crates/bevy_solari/src/realtime/prepare.rs b/crates/bevy_solari/src/realtime/prepare.rs
index ef64017ae39d4..0b1606257da9a 100644
--- a/crates/bevy_solari/src/realtime/prepare.rs
+++ b/crates/bevy_solari/src/realtime/prepare.rs
@@ -1,4 +1,5 @@
 use super::SolariLighting;
+use bevy_camera::MainPassResolutionOverride;
 use bevy_core_pipeline::{core_3d::CORE_3D_DEPTH_FORMAT, deferred::DEFERRED_PREPASS_FORMAT};
 use bevy_ecs::{
     component::Component,
@@ -9,7 +10,7 @@ use bevy_ecs::{
 use bevy_image::ToExtents;
 use bevy_math::UVec2;
 use bevy_render::{
-    camera::{ExtractedCamera, MainPassResolutionOverride},
+    camera::ExtractedCamera,
     render_resource::{
         Buffer, BufferDescriptor, BufferUsages, Texture, TextureDescriptor, TextureDimension,
         TextureUsages, TextureView, TextureViewDescriptor,
diff --git a/crates/bevy_ui_render/src/debug_overlay.rs b/crates/bevy_ui_render/src/debug_overlay.rs
index fb06bb48a9b3f..6c277b55cd124 100644
--- a/crates/bevy_ui_render/src/debug_overlay.rs
+++ b/crates/bevy_ui_render/src/debug_overlay.rs
@@ -5,6 +5,7 @@ use super::NodeType;
 use super::UiCameraMap;
 use crate::shader_flags;
 use bevy_asset::AssetId;
+use bevy_camera::visibility::InheritedVisibility;
 use bevy_color::Hsla;
 use bevy_ecs::entity::Entity;
 use bevy_ecs::resource::Resource;
@@ -15,7 +16,6 @@ use bevy_ecs::system::ResMut;
 use bevy_math::Rect;
 use bevy_math::Vec2;
 use bevy_render::sync_world::TemporaryRenderEntity;
-use bevy_render::view::InheritedVisibility;
 use bevy_render::Extract;
 use bevy_sprite::BorderRect;
 use bevy_ui::ui_transform::UiGlobalTransform;
diff --git a/examples/3d/clustered_decals.rs b/examples/3d/clustered_decals.rs
index fc90086af0107..7408c017d1a67 100644
--- a/examples/3d/clustered_decals.rs
+++ b/examples/3d/clustered_decals.rs
@@ -6,10 +6,8 @@ use std::fmt::{self, Formatter};
 use bevy::{
     color::palettes::css::{LIME, ORANGE_RED, SILVER},
     input::mouse::AccumulatedMouseMotion,
-    pbr::{
-        decal::{self, clustered::ClusteredDecal},
-        ExtendedMaterial, MaterialExtension,
-    },
+    light::ClusteredDecal,
+    pbr::{decal, ExtendedMaterial, MaterialExtension},
     prelude::*,
     render::{
         render_resource::{AsBindGroup, ShaderRef},
diff --git a/examples/3d/light_textures.rs b/examples/3d/light_textures.rs
index 1a8b6e009b889..f035a72427eca 100644
--- a/examples/3d/light_textures.rs
+++ b/examples/3d/light_textures.rs
@@ -4,6 +4,7 @@ use std::f32::consts::{FRAC_PI_2, FRAC_PI_3, FRAC_PI_4, PI};
 use std::fmt::{self, Formatter};
 
 use bevy::{
+    camera::primitives::CubemapLayout,
     color::palettes::css::{SILVER, YELLOW},
     input::mouse::AccumulatedMouseMotion,
     pbr::{decal, DirectionalLightTexture, NotShadowCaster, PointLightTexture, SpotLightTexture},
@@ -275,7 +276,7 @@ fn spawn_light_textures(
                 },
                 PointLightTexture {
                     image: asset_server.load("lightmaps/faces_pointlight_texture_blurred.png"),
-                    cubemap_layout: decal::clustered::CubemapLayout::CrossVertical,
+                    cubemap_layout: CubemapLayout::CrossVertical,
                 },
             ));
         });
diff --git a/examples/3d/pcss.rs b/examples/3d/pcss.rs
index b2715f0b576ad..fabee57a49f76 100644
--- a/examples/3d/pcss.rs
+++ b/examples/3d/pcss.rs
@@ -4,17 +4,18 @@ use std::f32::consts::PI;
 
 use bevy::{
     anti_aliasing::taa::TemporalAntiAliasing,
+    camera::{
+        primitives::{CubemapFrusta, Frustum},
+        visibility::{CubemapVisibleEntities, VisibleMeshEntities},
+    },
     core_pipeline::{
         prepass::{DepthPrepass, MotionVectorPrepass},
         Skybox,
     },
     math::vec3,
-    pbr::{CubemapVisibleEntities, ShadowFilteringMethod, VisibleMeshEntities},
+    pbr::ShadowFilteringMethod,
     prelude::*,
-    render::{
-        camera::TemporalJitter,
-        primitives::{CubemapFrusta, Frustum},
-    },
+    render::camera::TemporalJitter,
 };
 
 use crate::widgets::{RadioButton, RadioButtonText, WidgetClickEvent, WidgetClickSender};
diff --git a/examples/3d/solari.rs b/examples/3d/solari.rs
index f904b702f6f90..e61c6e39e6dd9 100644
--- a/examples/3d/solari.rs
+++ b/examples/3d/solari.rs
@@ -5,8 +5,9 @@ mod camera_controller;
 
 use argh::FromArgs;
 use bevy::{
+    camera::CameraMainTextureUsages,
     prelude::*,
-    render::{camera::CameraMainTextureUsages, mesh::Indices, render_resource::TextureUsages},
+    render::{mesh::Indices, render_resource::TextureUsages},
     scene::SceneInstanceReady,
     solari::{
         pathtracer::{Pathtracer, PathtracingPlugin},

diff --git a/examples/stress_tests/many_buttons.rs b/examples/stress_tests/many_buttons.rs
index 1f1a9acf3e676..973cbe35f1e9b 100644
--- a/examples/stress_tests/many_buttons.rs
+++ b/examples/stress_tests/many_buttons.rs
@@ -15,9 +15,9 @@ const FONT_SIZE: f32 = 7.0;
 #[derive(FromArgs, Resource)]
 /// `many_buttons` general UI benchmark that stress tests layouting, text, interaction and rendering
 struct Args {
-    /// whether to add text to each button
+    /// whether to add labels to each button
     #[argh(switch)]
-    no_text: bool,
+    text: bool,
 
     /// whether to add borders to each button
     #[argh(switch)]
@@ -27,7 +27,7 @@ struct Args {
     #[argh(switch)]
     relayout: bool,
 
-    /// whether to recompute all text each frame
+    /// whether to recompute all text each frame (if text enabled)
     #[argh(switch)]
     recompute_text: bool,
 
@@ -35,7 +35,7 @@ struct Args {
     #[argh(option, default = "110")]
     buttons: usize,
 
-    /// give every nth button an image
+    /// change the button icon every nth button, if `0` no icons are added.
     #[argh(option, default = "4")]
     image_freq: usize,
 
@@ -153,8 +153,11 @@ fn button_system(
 }
 
 fn setup_flex(mut commands: Commands, asset_server: Res<AssetServer>, args: Res<Args>) {
-    let image = if 0 < args.image_freq {
-        Some(asset_server.load("branding/icon.png"))
+    let images = if 0 < args.image_freq {
+        Some(vec![
+            asset_server.load("branding/icon.png"),
+            asset_server.load("textures/Game Icons/wrench.png"),
+        ])
     } else {
         None
     };
@@ -193,13 +196,12 @@ fn setup_flex(mut commands: Commands, asset_server: Res<AssetServer>, args: Res<
                             buttons_f,
                             column,
                             row,
-                            !args.no_text,
+                            args.text,
                             border,
                             border_color,
-                            image
-                                .as_ref()
-                                .filter(|_| (column + row) % args.image_freq == 0)
-                                .cloned(),
+                            images.as_ref().map(|images| {
+                                images[((column + row) / args.image_freq) % images.len()].clone()
+                            }),
                         );
                     }
                 });
@@ -208,8 +210,11 @@ fn setup_flex(mut commands: Commands, asset_server: Res<AssetServer>, args: Res<
 }
 
 fn setup_grid(mut commands: Commands, asset_server: Res<AssetServer>, args: Res<Args>) {
-    let image = if 0 < args.image_freq {
-        Some(asset_server.load("branding/icon.png"))
+    let images = if 0 < args.image_freq {
+        Some(vec![
+            asset_server.load("branding/icon.png"),
+            asset_server.load("textures/Game Icons/wrench.png"),
+        ])
     } else {
         None
     };
@@ -246,13 +251,12 @@ fn setup_grid(mut commands: Commands, asset_server: Res<AssetServer>, args: Res<
                         buttons_f,
                         column,
                         row,
-                        !args.no_text,
+                        args.text,
                         border,
                         border_color,
-                        image
-                            .as_ref()
-                            .filter(|_| (column + row) % args.image_freq == 0)
-                            .cloned(),
+                        images.as_ref().map(|images| {
+                            images[((column + row) / args.image_freq) % images.len()].clone()
+                        }),
                     );
                 }
             }
@@ -322,8 +326,11 @@ fn despawn_ui(mut commands: Commands, root_node: Single<Entity, (With<Node>, Wit
 }
 
 fn setup_many_cameras(mut commands: Commands, asset_server: Res<AssetServer>, args: Res<Args>) {
-    let image = if 0 < args.image_freq {
-        Some(asset_server.load("branding/icon.png"))
+    let images = if 0 < args.image_freq {
+        Some(vec![
+            asset_server.load("branding/icon.png"),
+            asset_server.load("textures/Game Icons/wrench.png"),
+        ])
     } else {
         None
     };
@@ -381,13 +388,13 @@ fn setup_many_cameras(mut commands: Commands, asset_server: Res<AssetServer>, ar
                                 buttons_f,
                                 column,
                                 row,
-                                !args.no_text,
+                                args.text,
                                 border,
                                 border_color,
-                                image
-                                    .as_ref()
-                                    .filter(|_| (column + row) % args.image_freq == 0)
-                                    .cloned(),
+                                images.as_ref().map(|images| {
+                                    images[((column + row) / args.image_freq) % images.len()]
+                                        .clone()
+                                }),
                             );
                         });
                 });

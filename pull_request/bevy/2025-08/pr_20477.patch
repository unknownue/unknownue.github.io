diff --git a/examples/2d/2d_viewport_to_world.rs b/examples/2d/2d_viewport_to_world.rs
index 3227244713a6a..f2a52acc87f3d 100644
--- a/examples/2d/2d_viewport_to_world.rs
+++ b/examples/2d/2d_viewport_to_world.rs
@@ -1,13 +1,13 @@
 //! This example demonstrates how to use the `Camera::viewport_to_world_2d` method with a dynamic viewport and camera.
 
 use bevy::{
+    camera::Viewport,
     color::palettes::{
         basic::WHITE,
         css::{GREEN, RED},
     },
     math::ops::powf,
     prelude::*,
-    render::camera::Viewport,
 };
 
 fn main() {
diff --git a/examples/2d/pixel_grid_snap.rs b/examples/2d/pixel_grid_snap.rs
index 4f946f9f941b4..8bc7014b9ffee 100644
--- a/examples/2d/pixel_grid_snap.rs
+++ b/examples/2d/pixel_grid_snap.rs
@@ -1,14 +1,12 @@
 //! Shows how to create graphics that snap to the pixel grid by rendering to a texture in 2D
 
 use bevy::{
+    camera::visibility::RenderLayers,
+    camera::RenderTarget,
     color::palettes::css::GRAY,
     prelude::*,
-    render::{
-        camera::RenderTarget,
-        render_resource::{
-            Extent3d, TextureDescriptor, TextureDimension, TextureFormat, TextureUsages,
-        },
-        view::RenderLayers,
+    render::render_resource::{
+        Extent3d, TextureDescriptor, TextureDimension, TextureFormat, TextureUsages,
     },
     window::WindowResized,
 };
diff --git a/examples/3d/atmosphere.rs b/examples/3d/atmosphere.rs
index edc6d04dab7b0..f80baefc08356 100644
--- a/examples/3d/atmosphere.rs
+++ b/examples/3d/atmosphere.rs
@@ -3,10 +3,10 @@
 use std::f32::consts::PI;
 
 use bevy::{
+    camera::Exposure,
     core_pipeline::{bloom::Bloom, tonemapping::Tonemapping},
     pbr::{light_consts::lux, Atmosphere, AtmosphereSettings, CascadeShadowConfigBuilder},
     prelude::*,
-    render::camera::Exposure,
 };
 
 fn main() {
diff --git a/examples/3d/camera_sub_view.rs b/examples/3d/camera_sub_view.rs
index 0fea1633d0455..73cf870707b8c 100644
--- a/examples/3d/camera_sub_view.rs
+++ b/examples/3d/camera_sub_view.rs
@@ -7,8 +7,8 @@
 //!   camera
 //! - Rapidly change the sub view offset to get a screen shake effect
 use bevy::{
+    camera::{ScalingMode, SubCameraView, Viewport},
     prelude::*,
-    render::camera::{ScalingMode, SubCameraView, Viewport},
 };
 
 fn main() {
diff --git a/examples/3d/depth_of_field.rs b/examples/3d/depth_of_field.rs
index 7658fdea07303..d303ac1b90473 100644
--- a/examples/3d/depth_of_field.rs
+++ b/examples/3d/depth_of_field.rs
@@ -10,6 +10,7 @@
 //! [a blog post on depth of field in Unity]: https://catlikecoding.com/unity/tutorials/advanced-rendering/depth-of-field/
 
 use bevy::{
+    camera::PhysicalCameraParameters,
     core_pipeline::{
         bloom::Bloom,
         dof::{self, DepthOfField, DepthOfFieldMode},
@@ -18,7 +19,6 @@ use bevy::{
     gltf::GltfMeshName,
     pbr::Lightmap,
     prelude::*,
-    render::camera::PhysicalCameraParameters,
 };
 
 /// The increments in which the user can adjust the focal distance, in meters
diff --git a/examples/3d/lighting.rs b/examples/3d/lighting.rs
index dfe4815d64c6b..46e25ee24e337 100644
--- a/examples/3d/lighting.rs
+++ b/examples/3d/lighting.rs
@@ -4,10 +4,10 @@
 use std::f32::consts::PI;
 
 use bevy::{
+    camera::{Exposure, PhysicalCameraParameters},
     color::palettes::css::*,
     pbr::CascadeShadowConfigBuilder,
     prelude::*,
-    render::camera::{Exposure, PhysicalCameraParameters},
 };
 
 fn main() {
diff --git a/examples/3d/order_independent_transparency.rs b/examples/3d/order_independent_transparency.rs
index 62854957f2f3a..5849bbb5d5119 100644
--- a/examples/3d/order_independent_transparency.rs
+++ b/examples/3d/order_independent_transparency.rs
@@ -4,10 +4,10 @@
 //!
 //! [`OrderIndependentTransparencyPlugin`]: bevy::render::pipeline::OrderIndependentTransparencyPlugin
 use bevy::{
+    camera::visibility::RenderLayers,
     color::palettes::css::{BLUE, GREEN, RED},
     core_pipeline::oit::OrderIndependentTransparencySettings,
     prelude::*,
-    render::view::RenderLayers,
 };
 
 fn main() {
diff --git a/examples/3d/orthographic.rs b/examples/3d/orthographic.rs
index e6bb11d27455a..1349e49c394b9 100644
--- a/examples/3d/orthographic.rs
+++ b/examples/3d/orthographic.rs
@@ -1,6 +1,6 @@
 //! Shows how to create a 3D orthographic view (for isometric-look games or CAD applications).
 
-use bevy::{prelude::*, render::camera::ScalingMode};
+use bevy::{camera::ScalingMode, prelude::*};
 
 fn main() {
     App::new()
diff --git a/examples/3d/pbr.rs b/examples/3d/pbr.rs
index da654ce1f3114..846b70e92681c 100644
--- a/examples/3d/pbr.rs
+++ b/examples/3d/pbr.rs
@@ -1,7 +1,7 @@
 //! This example shows how to configure Physically Based Rendering (PBR) parameters.
 
+use bevy::camera::ScalingMode;
 use bevy::prelude::*;
-use bevy::render::camera::ScalingMode;
 
 fn main() {
     App::new()
diff --git a/examples/3d/render_to_texture.rs b/examples/3d/render_to_texture.rs
index 419c748881f2a..ba17819ffbca7 100644
--- a/examples/3d/render_to_texture.rs
+++ b/examples/3d/render_to_texture.rs
@@ -2,10 +2,7 @@
 
 use std::f32::consts::PI;
 
-use bevy::{
-    prelude::*,
-    render::{render_resource::TextureFormat, view::RenderLayers},
-};
+use bevy::{camera::visibility::RenderLayers, prelude::*, render::render_resource::TextureFormat};
 
 fn main() {
     App::new()
diff --git a/examples/3d/split_screen.rs b/examples/3d/split_screen.rs
index 8baaacd69ba93..456bb316ed4ec 100644
--- a/examples/3d/split_screen.rs
+++ b/examples/3d/split_screen.rs
@@ -2,9 +2,7 @@
 
 use std::f32::consts::PI;
 
-use bevy::{
-    pbr::CascadeShadowConfigBuilder, prelude::*, render::camera::Viewport, window::WindowResized,
-};
+use bevy::{camera::Viewport, pbr::CascadeShadowConfigBuilder, prelude::*, window::WindowResized};
 
 fn main() {
     App::new()
diff --git a/examples/3d/transmission.rs b/examples/3d/transmission.rs
index ee62654ea632e..65f37d93079aa 100644
--- a/examples/3d/transmission.rs
+++ b/examples/3d/transmission.rs
@@ -21,16 +21,14 @@
 use std::f32::consts::PI;
 
 use bevy::{
+    camera::{Exposure, ScreenSpaceTransmissionQuality},
     color::palettes::css::*,
-    core_pipeline::{
-        bloom::Bloom, core_3d::ScreenSpaceTransmissionQuality, prepass::DepthPrepass,
-        tonemapping::Tonemapping,
-    },
+    core_pipeline::{bloom::Bloom, prepass::DepthPrepass, tonemapping::Tonemapping},
     math::ops,
     pbr::{NotShadowCaster, PointLightShadowMap, TransmittedShadowReceiver},
     prelude::*,
     render::{
-        camera::{Exposure, TemporalJitter},
+        camera::TemporalJitter,
         view::{ColorGrading, ColorGradingGlobal, Hdr},
     },
 };
diff --git a/examples/3d/visibility_range.rs b/examples/3d/visibility_range.rs
index 18cdcda0f1356..829cccd769d64 100644
--- a/examples/3d/visibility_range.rs
+++ b/examples/3d/visibility_range.rs
@@ -3,12 +3,12 @@
 use std::f32::consts::PI;
 
 use bevy::{
+    camera::visibility::VisibilityRange,
     core_pipeline::prepass::{DepthPrepass, NormalPrepass},
     input::mouse::MouseWheel,
     math::vec3,
     pbr::{light_consts::lux::FULL_DAYLIGHT, CascadeShadowConfigBuilder},
     prelude::*,
-    render::view::VisibilityRange,
 };
 
 // Where the camera is focused.
diff --git a/examples/app/headless_renderer.rs b/examples/app/headless_renderer.rs
index a4c6ebb113065..822e57d47fa79 100644
--- a/examples/app/headless_renderer.rs
+++ b/examples/app/headless_renderer.rs
@@ -14,11 +14,11 @@
 
 use bevy::{
     app::{AppExit, ScheduleRunnerPlugin},
+    camera::RenderTarget,
     core_pipeline::tonemapping::Tonemapping,
     image::TextureFormatPixelInfo,
     prelude::*,
     render::{
-        camera::RenderTarget,
         render_asset::RenderAssets,
         render_graph::{self, NodeRunError, RenderGraph, RenderGraphContext, RenderLabel},
         render_resource::{
diff --git a/examples/camera/2d_on_ui.rs b/examples/camera/2d_on_ui.rs
index df54da98b981c..3a00f2a254a65 100644
--- a/examples/camera/2d_on_ui.rs
+++ b/examples/camera/2d_on_ui.rs
@@ -1,6 +1,6 @@
 //! This example shows how to render 2D objects on top of Bevy UI, by using a second camera with a higher `order` than the UI camera.
 
-use bevy::{color::palettes::tailwind, prelude::*, render::view::RenderLayers};
+use bevy::{camera::visibility::RenderLayers, color::palettes::tailwind, prelude::*};
 
 fn main() {
     App::new()
diff --git a/examples/camera/custom_projection.rs b/examples/camera/custom_projection.rs
index 9e20c48eeba3f..bdd5b71d5ca82 100644
--- a/examples/camera/custom_projection.rs
+++ b/examples/camera/custom_projection.rs
@@ -1,7 +1,7 @@
 //! Demonstrates how to define and use custom camera projections.
 
+use bevy::camera::CameraProjection;
 use bevy::prelude::*;
-use bevy::render::camera::CameraProjection;
 
 fn main() {
     App::new()
@@ -27,7 +27,7 @@ impl CameraProjection for ObliquePerspectiveProjection {
         mat
     }
 
-    fn get_clip_from_view_for_sub(&self, sub_view: &bevy::render::camera::SubCameraView) -> Mat4 {
+    fn get_clip_from_view_for_sub(&self, sub_view: &bevy::camera::SubCameraView) -> Mat4 {
         let mut mat = self.perspective.get_clip_from_view_for_sub(sub_view);
         mat.col_mut(2)[0] = self.horizontal_obliqueness;
         mat.col_mut(2)[1] = self.vertical_obliqueness;
diff --git a/examples/camera/first_person_view_model.rs b/examples/camera/first_person_view_model.rs
index 09ff0d17bf1a6..f0867808f0219 100644
--- a/examples/camera/first_person_view_model.rs
+++ b/examples/camera/first_person_view_model.rs
@@ -45,8 +45,8 @@
 use std::f32::consts::FRAC_PI_2;
 
 use bevy::{
-    color::palettes::tailwind, input::mouse::AccumulatedMouseMotion, pbr::NotShadowCaster,
-    prelude::*, render::view::RenderLayers,
+    camera::visibility::RenderLayers, color::palettes::tailwind,
+    input::mouse::AccumulatedMouseMotion, pbr::NotShadowCaster, prelude::*,
 };
 
 fn main() {
diff --git a/examples/camera/projection_zoom.rs b/examples/camera/projection_zoom.rs
index 54c12f34b2812..0b44f7010b678 100644
--- a/examples/camera/projection_zoom.rs
+++ b/examples/camera/projection_zoom.rs
@@ -2,7 +2,7 @@
 
 use std::{f32::consts::PI, ops::Range};
 
-use bevy::{input::mouse::AccumulatedMouseScroll, prelude::*, render::camera::ScalingMode};
+use bevy::{camera::ScalingMode, input::mouse::AccumulatedMouseScroll, prelude::*};
 
 #[derive(Debug, Resource)]
 struct CameraSettings {
diff --git a/examples/gizmos/axes.rs b/examples/gizmos/axes.rs
index 00488ce045d74..aaebac05fdb33 100644
--- a/examples/gizmos/axes.rs
+++ b/examples/gizmos/axes.rs
@@ -1,6 +1,6 @@
 //! This example demonstrates the implementation and behavior of the axes gizmo.
 
-use bevy::{prelude::*, render::primitives::Aabb};
+use bevy::{camera::primitives::Aabb, prelude::*};
 use rand::{Rng, SeedableRng};
 use rand_chacha::ChaCha8Rng;
 use std::f32::consts::PI;
diff --git a/examples/math/custom_primitives.rs b/examples/math/custom_primitives.rs
index ee26cdf723ffd..69e7d8318b372 100644
--- a/examples/math/custom_primitives.rs
+++ b/examples/math/custom_primitives.rs
@@ -4,6 +4,7 @@
 use std::f32::consts::{PI, SQRT_2};
 
 use bevy::{
+    camera::ScalingMode,
     color::palettes::css::{RED, WHITE},
     input::common_conditions::input_just_pressed,
     math::{
@@ -14,7 +15,7 @@ use bevy::{
     },
     mesh::{Extrudable, ExtrusionBuilder, PerimeterSegment},
     prelude::*,
-    render::{camera::ScalingMode, render_asset::RenderAssetUsages},
+    render::render_asset::RenderAssetUsages,
 };
 
 const HEART: Heart = Heart::new(0.5);
diff --git a/examples/shader_advanced/custom_phase_item.rs b/examples/shader_advanced/custom_phase_item.rs
index cb49d24bf01b2..067c04fc7a8c0 100644
--- a/examples/shader_advanced/custom_phase_item.rs
+++ b/examples/shader_advanced/custom_phase_item.rs
@@ -8,6 +8,10 @@
 //! for better reuse of parts of Bevy's built-in mesh rendering logic.
 
 use bevy::{
+    camera::{
+        primitives::Aabb,
+        visibility::{self, VisibilityClass},
+    },
     core_pipeline::core_3d::{Opaque3d, Opaque3dBatchSetKey, Opaque3dBinKey, CORE_3D_DEPTH_FORMAT},
     ecs::{
         component::Tick,
@@ -18,7 +22,6 @@ use bevy::{
     prelude::*,
     render::{
         extract_component::{ExtractComponent, ExtractComponentPlugin},
-        primitives::Aabb,
         render_phase::{
             AddRenderCommand, BinnedRenderPhaseType, DrawFunctions, InputUniformIndex, PhaseItem,
             RenderCommand, RenderCommandResult, SetItemPipeline, TrackedRenderPass,
@@ -31,7 +34,7 @@ use bevy::{
             Variants, VertexAttribute, VertexFormat, VertexState, VertexStepMode,
         },
         renderer::{RenderDevice, RenderQueue},
-        view::{self, ExtractedView, RenderVisibleEntities, VisibilityClass},
+        view::{ExtractedView, RenderVisibleEntities},
         Render, RenderApp, RenderSystems,
     },
 };
@@ -46,7 +49,7 @@ use bytemuck::{Pod, Zeroable};
 /// that entities with this component need to be examined for visibility.
 #[derive(Clone, Component, ExtractComponent)]
 #[require(VisibilityClass)]
-#[component(on_add = view::add_visibility_class::<CustomRenderedEntity>)]
+#[component(on_add = visibility::add_visibility_class::<CustomRenderedEntity>)]
 struct CustomRenderedEntity;
 
 /// A [`RenderCommand`] that binds the vertex and index buffers and issues the
diff --git a/examples/shader_advanced/custom_render_phase.rs b/examples/shader_advanced/custom_render_phase.rs
index 4f18287849a69..866e96adca9da 100644
--- a/examples/shader_advanced/custom_render_phase.rs
+++ b/examples/shader_advanced/custom_render_phase.rs
@@ -15,6 +15,7 @@ use std::ops::Range;
 use bevy::camera::Viewport;
 use bevy::pbr::SetMeshViewEmptyBindGroup;
 use bevy::{
+    camera::MainPassResolutionOverride,
     core_pipeline::core_3d::graph::{Core3d, Node3d},
     ecs::{
         query::QueryItem,
@@ -36,7 +37,7 @@ use bevy::{
             },
             GetBatchData, GetFullBatchData,
         },
-        camera::{ExtractedCamera, MainPassResolutionOverride},
+        camera::ExtractedCamera,
         extract_component::{ExtractComponent, ExtractComponentPlugin},
         mesh::{allocator::MeshAllocator, RenderMesh},
         render_asset::RenderAssets,
diff --git a/examples/shader_advanced/custom_shader_instancing.rs b/examples/shader_advanced/custom_shader_instancing.rs
index 7aa873adfdd98..ca4d1fdf986d7 100644
--- a/examples/shader_advanced/custom_shader_instancing.rs
+++ b/examples/shader_advanced/custom_shader_instancing.rs
@@ -9,6 +9,7 @@
 
 use bevy::pbr::SetMeshViewBindingArrayBindGroup;
 use bevy::{
+    camera::visibility::NoFrustumCulling,
     core_pipeline::core_3d::Transparent3d,
     ecs::{
         query::QueryItem,
@@ -30,7 +31,7 @@ use bevy::{
         render_resource::*,
         renderer::RenderDevice,
         sync_world::MainEntity,
-        view::{ExtractedView, NoFrustumCulling, NoIndirectDrawing},
+        view::{ExtractedView, NoIndirectDrawing},
         Render, RenderApp, RenderStartup, RenderSystems,
     },
 };
diff --git a/examples/shader_advanced/specialized_mesh_pipeline.rs b/examples/shader_advanced/specialized_mesh_pipeline.rs
index 836034e87a08e..050615bce421c 100644
--- a/examples/shader_advanced/specialized_mesh_pipeline.rs
+++ b/examples/shader_advanced/specialized_mesh_pipeline.rs
@@ -7,6 +7,7 @@
 //! [`SpecializedMeshPipeline`] let's you customize the entire pipeline used when rendering a mesh.
 
 use bevy::{
+    camera::visibility::{self, VisibilityClass},
     core_pipeline::core_3d::{Opaque3d, Opaque3dBatchSetKey, Opaque3dBinKey, CORE_3D_DEPTH_FORMAT},
     ecs::component::Tick,
     math::{vec3, vec4},
@@ -31,7 +32,7 @@ use bevy::{
             RenderPipelineDescriptor, SpecializedMeshPipeline, SpecializedMeshPipelineError,
             SpecializedMeshPipelines, TextureFormat, VertexState,
         },
-        view::{self, ExtractedView, RenderVisibleEntities, ViewTarget, VisibilityClass},
+        view::{ExtractedView, RenderVisibleEntities, ViewTarget},
         Render, RenderApp, RenderStartup, RenderSystems,
     },
 };
@@ -128,7 +129,7 @@ impl Plugin for CustomRenderedMeshPipelinePlugin {
 /// that entities with this component need to be examined for visibility.
 #[derive(Clone, Component, ExtractComponent)]
 #[require(VisibilityClass)]
-#[component(on_add = view::add_visibility_class::<CustomRenderedEntity>)]
+#[component(on_add = visibility::add_visibility_class::<CustomRenderedEntity>)]
 struct CustomRenderedEntity;
 
 /// The custom draw commands that Bevy executes for each entity we enqueue into
diff --git a/examples/stress_tests/many_cameras_lights.rs b/examples/stress_tests/many_cameras_lights.rs
index 3f9c4878e0229..9c61545910e71 100644
--- a/examples/stress_tests/many_cameras_lights.rs
+++ b/examples/stress_tests/many_cameras_lights.rs
@@ -3,9 +3,9 @@
 use std::f32::consts::PI;
 
 use bevy::{
+    camera::Viewport,
     math::ops::{cos, sin},
     prelude::*,
-    render::camera::Viewport,
     window::{PresentMode, WindowResolution},
 };
 
diff --git a/examples/stress_tests/many_cubes.rs b/examples/stress_tests/many_cubes.rs
index 664263684f923..899d99089daf0 100644
--- a/examples/stress_tests/many_cubes.rs
+++ b/examples/stress_tests/many_cubes.rs
@@ -12,6 +12,7 @@ use std::{f64::consts::PI, str::FromStr};
 
 use argh::FromArgs;
 use bevy::{
+    camera::visibility::{NoCpuCulling, NoFrustumCulling},
     diagnostic::{FrameTimeDiagnosticsPlugin, LogDiagnosticsPlugin},
     math::{DVec2, DVec3},
     pbr::NotShadowCaster,
@@ -20,7 +21,7 @@ use bevy::{
         batching::NoAutomaticBatching,
         render_asset::RenderAssetUsages,
         render_resource::{Extent3d, TextureDimension, TextureFormat},
-        view::{NoCpuCulling, NoFrustumCulling, NoIndirectDrawing},
+        view::NoIndirectDrawing,
     },
     window::{PresentMode, WindowResolution},
     winit::{UpdateMode, WinitSettings},
diff --git a/examples/stress_tests/many_lights.rs b/examples/stress_tests/many_lights.rs
index ffed89e4da2d7..46afaa19faa3b 100644
--- a/examples/stress_tests/many_lights.rs
+++ b/examples/stress_tests/many_lights.rs
@@ -4,12 +4,13 @@
 use std::f64::consts::PI;
 
 use bevy::{
+    camera::ScalingMode,
     color::palettes::css::DEEP_PINK,
     diagnostic::{FrameTimeDiagnosticsPlugin, LogDiagnosticsPlugin},
     math::{DVec2, DVec3},
     pbr::{ExtractedPointLight, GlobalClusterableObjectMeta},
     prelude::*,
-    render::{camera::ScalingMode, Render, RenderApp, RenderSystems},
+    render::{Render, RenderApp, RenderSystems},
     window::{PresentMode, WindowResolution},
     winit::{UpdateMode, WinitSettings},
 };
diff --git a/examples/stress_tests/many_text2d.rs b/examples/stress_tests/many_text2d.rs
index 8d5438f66c6b7..9eb716c91b1f8 100644
--- a/examples/stress_tests/many_text2d.rs
+++ b/examples/stress_tests/many_text2d.rs
@@ -3,9 +3,9 @@
 use std::ops::RangeInclusive;
 
 use bevy::{
+    camera::visibility::NoFrustumCulling,
     diagnostic::{FrameTimeDiagnosticsPlugin, LogDiagnosticsPlugin},
     prelude::*,
-    render::view::NoFrustumCulling,
     text::FontAtlasSets,
     window::{PresentMode, WindowResolution},
 };
diff --git a/examples/testbed/ui.rs b/examples/testbed/ui.rs
index 5961b67834b3a..18ed5aeaa0167 100644
--- a/examples/testbed/ui.rs
+++ b/examples/testbed/ui.rs
@@ -555,13 +555,13 @@ mod layout_rounding {
 }
 
 mod linear_gradient {
+    use bevy::camera::Camera2d;
     use bevy::color::palettes::css::BLUE;
     use bevy::color::palettes::css::LIME;
     use bevy::color::palettes::css::RED;
     use bevy::color::palettes::css::YELLOW;
     use bevy::color::Color;
     use bevy::ecs::prelude::*;
-    use bevy::render::camera::Camera2d;
     use bevy::state::state_scoped::DespawnOnExitState;
     use bevy::text::TextFont;
     use bevy::ui::AlignItems;
diff --git a/examples/tools/scene_viewer/main.rs b/examples/tools/scene_viewer/main.rs
index 7201996a3cd17..d58640bf4c0cc 100644
--- a/examples/tools/scene_viewer/main.rs
+++ b/examples/tools/scene_viewer/main.rs
@@ -11,13 +11,11 @@
 use argh::FromArgs;
 use bevy::{
     asset::UnapprovedPathMode,
+    camera::primitives::{Aabb, Sphere},
     core_pipeline::prepass::{DeferredPrepass, DepthPrepass},
     pbr::DefaultOpaqueRendererMethod,
     prelude::*,
-    render::{
-        experimental::occlusion_culling::OcclusionCulling,
-        primitives::{Aabb, Sphere},
-    },
+    render::experimental::occlusion_culling::OcclusionCulling,
 };
 
 #[path = "../../helpers/camera_controller.rs"]
diff --git a/examples/ui/directional_navigation.rs b/examples/ui/directional_navigation.rs
index 181ea3a0b865e..60cc8370ca89b 100644
--- a/examples/ui/directional_navigation.rs
+++ b/examples/ui/directional_navigation.rs
@@ -8,6 +8,7 @@
 use std::time::Duration;
 
 use bevy::{
+    camera::NormalizedRenderTarget,
     input_focus::{
         directional_navigation::{
             DirectionalNavigation, DirectionalNavigationMap, DirectionalNavigationPlugin,
@@ -21,7 +22,6 @@ use bevy::{
     },
     platform::collections::{HashMap, HashSet},
     prelude::*,
-    render::camera::NormalizedRenderTarget,
 };
 
 fn main() {
@@ -386,12 +386,10 @@ fn interact_with_focused_button(
                 pointer_id: PointerId::Mouse,
                 // This field isn't used, so we're just setting it to a placeholder value
                 pointer_location: Location {
-                    target: NormalizedRenderTarget::Image(
-                        bevy::render::camera::ImageRenderTarget {
-                            handle: Handle::default(),
-                            scale_factor: FloatOrd(1.0),
-                        },
-                    ),
+                    target: NormalizedRenderTarget::Image(bevy::camera::ImageRenderTarget {
+                        handle: Handle::default(),
+                        scale_factor: FloatOrd(1.0),
+                    }),
                     position: Vec2::ZERO,
                 },
                 event: Click {
diff --git a/examples/ui/relative_cursor_position.rs b/examples/ui/relative_cursor_position.rs
index 5346918257368..062d2b3139c38 100644
--- a/examples/ui/relative_cursor_position.rs
+++ b/examples/ui/relative_cursor_position.rs
@@ -1,8 +1,6 @@
 //! Showcases the [`RelativeCursorPosition`] component, used to check the position of the cursor relative to a UI node.
 
-use bevy::{
-    prelude::*, render::camera::Viewport, ui::RelativeCursorPosition, winit::WinitSettings,
-};
+use bevy::{camera::Viewport, prelude::*, ui::RelativeCursorPosition, winit::WinitSettings};
 
 fn main() {
     App::new()
diff --git a/examples/ui/render_ui_to_texture.rs b/examples/ui/render_ui_to_texture.rs
index 8bb6007330111..1cc52cef10cbb 100644
--- a/examples/ui/render_ui_to_texture.rs
+++ b/examples/ui/render_ui_to_texture.rs
@@ -3,10 +3,10 @@
 use std::f32::consts::PI;
 
 use bevy::{
+    camera::RenderTarget,
     color::palettes::css::GOLD,
     prelude::*,
     render::{
-        camera::RenderTarget,
         render_asset::RenderAssetUsages,
         render_resource::{Extent3d, TextureDimension, TextureFormat, TextureUsages},
     },
diff --git a/examples/ui/viewport_node.rs b/examples/ui/viewport_node.rs
index 0ebb639955bdf..4e10477817c7b 100644
--- a/examples/ui/viewport_node.rs
+++ b/examples/ui/viewport_node.rs
@@ -3,12 +3,10 @@
 
 use bevy::{
     asset::RenderAssetUsages,
+    camera::RenderTarget,
     picking::pointer::PointerInteraction,
     prelude::*,
-    render::{
-        camera::RenderTarget,
-        render_resource::{TextureDimension, TextureFormat, TextureUsages},
-    },
+    render::render_resource::{TextureDimension, TextureFormat, TextureUsages},
     ui::widget::ViewportNode,
 };
 
diff --git a/examples/window/monitor_info.rs b/examples/window/monitor_info.rs
index c4a26982f83bc..16e7aeda82d6b 100644
--- a/examples/window/monitor_info.rs
+++ b/examples/window/monitor_info.rs
@@ -1,8 +1,8 @@
 //! Displays information about available monitors (displays).
 
 use bevy::{
+    camera::RenderTarget,
     prelude::*,
-    render::camera::RenderTarget,
     window::{ExitCondition, Monitor, WindowMode, WindowRef},
 };
 
diff --git a/examples/window/multiple_windows.rs b/examples/window/multiple_windows.rs
index 431e1b5de2de1..61fd9f3b2ebf3 100644
--- a/examples/window/multiple_windows.rs
+++ b/examples/window/multiple_windows.rs
@@ -1,6 +1,6 @@
 //! Uses two windows to visualize a 3D model from different angles.
 
-use bevy::{prelude::*, render::camera::RenderTarget, window::WindowRef};
+use bevy::{camera::RenderTarget, prelude::*, window::WindowRef};
 
 fn main() {
     App::new()
diff --git a/tests/3d/test_invalid_skinned_mesh.rs b/tests/3d/test_invalid_skinned_mesh.rs
index 0215a9ea879b7..e566e2aa80c46 100644
--- a/tests/3d/test_invalid_skinned_mesh.rs
+++ b/tests/3d/test_invalid_skinned_mesh.rs
@@ -1,6 +1,7 @@
 //! Test that the renderer can handle various invalid skinned meshes
 
 use bevy::{
+    camera::ScalingMode,
     core_pipeline::motion_blur::MotionBlur,
     math::ops,
     mesh::{
@@ -8,7 +9,7 @@ use bevy::{
         Indices, PrimitiveTopology, VertexAttributeValues,
     },
     prelude::*,
-    render::{camera::ScalingMode, render_asset::RenderAssetUsages},
+    render::render_asset::RenderAssetUsages,
 };
 use core::f32::consts::TAU;
 

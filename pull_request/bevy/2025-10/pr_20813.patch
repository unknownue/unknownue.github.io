diff --git a/crates/bevy_camera/src/visibility/mod.rs b/crates/bevy_camera/src/visibility/mod.rs
index 8ac0ea4fe565d..2a5fdcb0c3e0b 100644
--- a/crates/bevy_camera/src/visibility/mod.rs
+++ b/crates/bevy_camera/src/visibility/mod.rs
@@ -528,7 +528,7 @@ pub fn check_visibility(
         Entity,
         &InheritedVisibility,
         &mut ViewVisibility,
-        &VisibilityClass,
+        Option<&VisibilityClass>,
         Option<&RenderLayers>,
         Option<&Aabb>,
         &GlobalTransform,
@@ -611,10 +611,15 @@ pub fn check_visibility(
                     view_visibility.set();
                 }
 
-                // Add the entity to the queue for all visibility classes the
-                // entity is in.
-                for visibility_class_id in visibility_class.iter() {
-                    queue.entry(*visibility_class_id).or_default().push(entity);
+                // The visibility class may be None here because AABB gizmos can be enabled via
+                // config without a renderable component being added to the entity. This workaround
+                // allows view visibility to be set for entities without a renderable component but
+                // that still need to render gizmos.
+                if let Some(visibility_class) = visibility_class {
+                    // Add the entity to the queue for all visibility classes the entity is in.
+                    for visibility_class_id in visibility_class.iter() {
+                        queue.entry(*visibility_class_id).or_default().push(entity);
+                    }
                 }
             },
         );
diff --git a/crates/bevy_gizmos/src/aabb.rs b/crates/bevy_gizmos/src/aabb.rs
index 64e66f57e3188..cd4341b6d1251 100644
--- a/crates/bevy_gizmos/src/aabb.rs
+++ b/crates/bevy_gizmos/src/aabb.rs
@@ -1,7 +1,7 @@
 //! A module adding debug visualization of [`Aabb`]s.
 
 use bevy_app::{Plugin, PostUpdate};
-use bevy_camera::primitives::Aabb;
+use bevy_camera::{primitives::Aabb, visibility::ViewVisibility};
 use bevy_color::{Color, Oklcha};
 use bevy_ecs::{
     component::Component,
@@ -36,7 +36,7 @@ impl Plugin for AabbGizmoPlugin {
                     config.config::<AabbGizmoConfigGroup>().1.draw_all
                 }),
             )
-                .after(bevy_camera::visibility::VisibilitySystems::CalculateBounds)
+                .after(bevy_camera::visibility::VisibilitySystems::MarkNewlyHiddenEntitiesInvisible)
                 .after(TransformSystems::Propagate),
         );
     }
@@ -70,10 +70,20 @@ pub struct ShowAabbGizmo {
 }
 
 fn draw_aabbs(
-    query: Query<(Entity, &Aabb, &GlobalTransform, &ShowAabbGizmo)>,
+    query: Query<(
+        Entity,
+        &Aabb,
+        &GlobalTransform,
+        Option<&ViewVisibility>,
+        &ShowAabbGizmo,
+    )>,
     mut gizmos: Gizmos<AabbGizmoConfigGroup>,
 ) {
-    for (entity, &aabb, &transform, gizmo) in &query {
+    for (entity, &aabb, &transform, view_visibility, gizmo) in &query {
+        if !is_visible(view_visibility) {
+            continue;
+        }
+
         let color = gizmo
             .color
             .or(gizmos.config_ext.default_color)
@@ -83,10 +93,17 @@ fn draw_aabbs(
 }
 
 fn draw_all_aabbs(
-    query: Query<(Entity, &Aabb, &GlobalTransform), Without<ShowAabbGizmo>>,
+    query: Query<
+        (Entity, &Aabb, &GlobalTransform, Option<&ViewVisibility>),
+        Without<ShowAabbGizmo>,
+    >,
     mut gizmos: Gizmos<AabbGizmoConfigGroup>,
 ) {
-    for (entity, &aabb, &transform) in &query {
+    for (entity, &aabb, &transform, view_visibility) in &query {
+        if !is_visible(view_visibility) {
+            continue;
+        }
+
         let color = gizmos
             .config_ext
             .default_color
@@ -95,6 +112,10 @@ fn draw_all_aabbs(
     }
 }
 
+fn is_visible(view_visibility: Option<&ViewVisibility>) -> bool {
+    view_visibility.is_some_and(|v| v.get())
+}
+
 fn color_from_entity(entity: Entity) -> Color {
     Oklcha::sequential_dispersed(entity.index()).into()
 }

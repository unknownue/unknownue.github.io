diff --git a/crates/bevy_pbr/src/material.rs b/crates/bevy_pbr/src/material.rs
index 3ebc89bccd0e4..c69a6ea8f77ff 100644
--- a/crates/bevy_pbr/src/material.rs
+++ b/crates/bevy_pbr/src/material.rs
@@ -374,7 +374,7 @@ where
             }
 
             render_app
-                .add_systems(RenderStartup, setup_render_app::<M>)
+                .add_systems(RenderStartup, add_material_bind_group_allocator::<M>)
                 .add_systems(
                     ExtractSchedule,
                     (
@@ -389,7 +389,7 @@ where
     }
 }
 
-fn setup_render_app<M: Material>(
+fn add_material_bind_group_allocator<M: Material>(
     render_device: Res<RenderDevice>,
     mut bind_group_allocators: ResMut<MaterialBindGroupAllocators>,
 ) {
diff --git a/examples/shader/custom_post_processing.rs b/examples/shader/custom_post_processing.rs
index 81e2b7e17b4b0..4cd925be01d82 100644
--- a/examples/shader/custom_post_processing.rs
+++ b/examples/shader/custom_post_processing.rs
@@ -68,7 +68,7 @@ impl Plugin for PostProcessPlugin {
 
         // RenderStartup runs once on startup after all plugins are built
         // It is useful to initialize data that will only live in the RenderApp
-        render_app.add_systems(RenderStartup, setup_pipeline);
+        render_app.add_systems(RenderStartup, init_post_process_pipeline);
 
         render_app
             // Bevy's renderer uses a render graph which is a collection of nodes in a directed acyclic graph.
@@ -226,7 +226,7 @@ struct PostProcessPipeline {
     pipeline_id: CachedRenderPipelineId,
 }
 
-fn setup_pipeline(
+fn init_post_process_pipeline(
     mut commands: Commands,
     render_device: Res<RenderDevice>,
     asset_server: Res<AssetServer>,

diff --git a/crates/bevy_ecs/src/entity_disabling.rs b/crates/bevy_ecs/src/entity_disabling.rs
index 41a461b77e498..39d2aa27e8837 100644
--- a/crates/bevy_ecs/src/entity_disabling.rs
+++ b/crates/bevy_ecs/src/entity_disabling.rs
@@ -178,7 +178,7 @@ impl DefaultQueryFilters {
     }
 
     /// Get an iterator over all of the components which disable entities when present.
-    pub fn disabling_ids(&self) -> impl Iterator<Item = ComponentId> + use<'_> {
+    pub fn disabling_ids(&self) -> impl Iterator<Item = ComponentId> {
         self.disabling.iter().copied()
     }
 
diff --git a/examples/asset/multi_asset_sync.rs b/examples/asset/multi_asset_sync.rs
index cc233eb5fd4db..83add4ba3c016 100644
--- a/examples/asset/multi_asset_sync.rs
+++ b/examples/asset/multi_asset_sync.rs
@@ -105,7 +105,7 @@ impl AssetBarrier {
     }
 
     /// Wait for all [`AssetBarrierGuard`]s to be dropped asynchronously.
-    pub fn wait_async(&self) -> impl Future<Output = ()> + 'static + use<> {
+    pub fn wait_async(&self) -> impl Future<Output = ()> + 'static {
         let shared = self.0.clone();
         async move {
             loop {
diff --git a/examples/ui/button.rs b/examples/ui/button.rs
index a402b5e7da098..aefa96918bc5f 100644
--- a/examples/ui/button.rs
+++ b/examples/ui/button.rs
@@ -72,7 +72,7 @@ fn setup(mut commands: Commands, assets: Res<AssetServer>) {
     commands.spawn(button(&assets));
 }
 
-fn button(asset_server: &AssetServer) -> impl Bundle + use<> {
+fn button(asset_server: &AssetServer) -> impl Bundle {
     (
         Node {
             width: Val::Percent(100.0),
diff --git a/examples/usage/context_menu.rs b/examples/usage/context_menu.rs
index a50e5cdabbae7..9ccd3e4b4b7e3 100644
--- a/examples/usage/context_menu.rs
+++ b/examples/usage/context_menu.rs
@@ -122,7 +122,7 @@ fn on_trigger_menu(trigger: On<OpenContextMenu>, mut commands: Commands) {
         );
 }
 
-fn context_item(text: &str, col: Srgba) -> impl Bundle + use<> {
+fn context_item(text: &str, col: Srgba) -> impl Bundle {
     (
         Name::new(format!("item-{text}")),
         ContextMenuItem(col),
@@ -143,7 +143,7 @@ fn context_item(text: &str, col: Srgba) -> impl Bundle + use<> {
     )
 }
 
-fn background_and_button() -> impl Bundle + use<> {
+fn background_and_button() -> impl Bundle {
     (
         Name::new("background"),
         Node {

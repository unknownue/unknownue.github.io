diff --git a/assets/shaders/extended_material.wgsl b/assets/shaders/extended_material.wgsl
index fc69f30bb56e4..a4b52521fc73f 100644
--- a/assets/shaders/extended_material.wgsl
+++ b/assets/shaders/extended_material.wgsl
@@ -17,6 +17,12 @@
 
 struct MyExtendedMaterial {
     quantize_steps: u32,
+#ifdef SIXTEEN_BYTE_ALIGNMENT
+    // Web examples WebGL2 support: structs must be 16 byte aligned.
+    _webgl2_padding_8b: u32,
+    _webgl2_padding_12b: u32,
+    _webgl2_padding_16b: u32,
+#endif
 }
 
 @group(2) @binding(100)
diff --git a/examples/shader/extended_material.rs b/examples/shader/extended_material.rs
index 3c5102db8ae58..7253d22949999 100644
--- a/examples/shader/extended_material.rs
+++ b/examples/shader/extended_material.rs
@@ -41,7 +41,7 @@ fn setup(
                 // change the above to `OpaqueRendererMethod::Deferred` or add the `DefaultOpaqueRendererMethod` resource.
                 ..Default::default()
             },
-            extension: MyExtension { quantize_steps: 3 },
+            extension: MyExtension::new(1),
         })),
         Transform::from_xyz(0.0, 0.5, 0.0),
     ));
@@ -69,12 +69,30 @@ fn rotate_things(mut q: Query<&mut Transform, With<Rotate>>, time: Res<Time>) {
     }
 }
 
-#[derive(Asset, AsBindGroup, Reflect, Debug, Clone)]
+#[derive(Asset, AsBindGroup, Reflect, Debug, Clone, Default)]
 struct MyExtension {
     // We need to ensure that the bindings of the base material and the extension do not conflict,
     // so we start from binding slot 100, leaving slots 0-99 for the base material.
     #[uniform(100)]
     quantize_steps: u32,
+    // Web examples WebGL2 support: structs must be 16 byte aligned.
+    #[cfg(feature = "webgl2")]
+    #[uniform(100)]
+    _webgl2_padding_8b: u32,
+    #[cfg(feature = "webgl2")]
+    #[uniform(100)]
+    _webgl2_padding_12b: u32,
+    #[cfg(feature = "webgl2")]
+    #[uniform(100)]
+    _webgl2_padding_16b: u32,
+}
+impl MyExtension {
+    fn new(quantize_steps: u32) -> Self {
+        Self {
+            quantize_steps,
+            ..default()
+        }
+    }
 }
 
 impl MaterialExtension for MyExtension {

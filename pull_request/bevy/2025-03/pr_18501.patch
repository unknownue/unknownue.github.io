diff --git a/crates/bevy_image/Cargo.toml b/crates/bevy_image/Cargo.toml
index ea7c5abee73df..9115c69f5a47e 100644
--- a/crates/bevy_image/Cargo.toml
+++ b/crates/bevy_image/Cargo.toml
@@ -11,7 +11,9 @@ keywords = ["bevy"]
 [features]
 default = ["bevy_reflect"]
 
-bevy_reflect = ["dep:bevy_reflect", "bevy_math/bevy_reflect"]
+# bevy_reflect can't optional as it's needed for TypePath
+# this feature only control reflection in bevy_image
+bevy_reflect = ["bevy_math/bevy_reflect"]
 
 # Image formats
 basis-universal = ["dep:basis-universal"]
@@ -49,7 +51,7 @@ bevy_color = { path = "../bevy_color", version = "0.16.0-dev", features = [
   "wgpu-types",
 ] }
 bevy_math = { path = "../bevy_math", version = "0.16.0-dev" }
-bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", optional = true }
+bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev" }
 bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev" }
 bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
   "std",
diff --git a/crates/bevy_image/src/image.rs b/crates/bevy_image/src/image.rs
index 9d1c9b166a7f9..9679aa6f66633 100644
--- a/crates/bevy_image/src/image.rs
+++ b/crates/bevy_image/src/image.rs
@@ -4,6 +4,8 @@ use super::basis::*;
 use super::dds::*;
 #[cfg(feature = "ktx2")]
 use super::ktx2::*;
+#[cfg(not(feature = "bevy_reflect"))]
+use bevy_reflect::TypePath;
 #[cfg(feature = "bevy_reflect")]
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 
@@ -338,6 +340,7 @@ impl ImageFormat {
     derive(Reflect),
     reflect(opaque, Default, Debug, Clone)
 )]
+#[cfg_attr(not(feature = "bevy_reflect"), derive(TypePath))]
 pub struct Image {
     /// Raw pixel data.
     /// If the image is being used as a storage texture which doesn't need to be initialized by the
diff --git a/crates/bevy_image/src/texture_atlas.rs b/crates/bevy_image/src/texture_atlas.rs
index feaa8fc96c1e5..d3e37d061401d 100644
--- a/crates/bevy_image/src/texture_atlas.rs
+++ b/crates/bevy_image/src/texture_atlas.rs
@@ -2,6 +2,8 @@ use bevy_app::prelude::*;
 use bevy_asset::{Asset, AssetApp as _, AssetId, Assets, Handle};
 use bevy_math::{Rect, URect, UVec2};
 use bevy_platform_support::collections::HashMap;
+#[cfg(not(feature = "bevy_reflect"))]
+use bevy_reflect::TypePath;
 #[cfg(feature = "bevy_reflect")]
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 #[cfg(feature = "serialize")]
@@ -97,6 +99,7 @@ impl TextureAtlasSources {
     derive(serde::Serialize, serde::Deserialize),
     reflect(Serialize, Deserialize)
 )]
+#[cfg_attr(not(feature = "bevy_reflect"), derive(TypePath))]
 pub struct TextureAtlasLayout {
     /// Total size of texture atlas.
     pub size: UVec2,

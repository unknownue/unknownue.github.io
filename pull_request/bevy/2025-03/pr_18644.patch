diff --git a/crates/bevy_winit/src/lib.rs b/crates/bevy_winit/src/lib.rs
index db74825f0fff6..97943cc14a98d 100644
--- a/crates/bevy_winit/src/lib.rs
+++ b/crates/bevy_winit/src/lib.rs
@@ -127,6 +127,7 @@ impl<T: Event> Plugin for WinitPlugin<T> {
         app.init_non_send_resource::<WinitWindows>()
             .init_resource::<WinitMonitors>()
             .init_resource::<WinitSettings>()
+            .insert_resource(DisplayHandleWrapper(event_loop.owned_display_handle()))
             .add_event::<RawWinitWindowEvent>()
             .set_runner(|app| winit_runner(app, event_loop))
             .add_systems(
@@ -176,6 +177,15 @@ pub struct RawWinitWindowEvent {
 #[derive(Resource, Deref)]
 pub struct EventLoopProxyWrapper<T: 'static>(EventLoopProxy<T>);
 
+/// A wrapper around [`winit::event_loop::OwnedDisplayHandle`]
+///
+/// The `DisplayHandleWrapper` can be used to build integrations that rely on direct
+/// access to the display handle
+///
+/// Use `Res<DisplayHandleWrapper>` to receive this resource.
+#[derive(Resource, Deref)]
+pub struct DisplayHandleWrapper(pub winit::event_loop::OwnedDisplayHandle);
+
 trait AppSendEvent {
     fn send(&mut self, event: impl Into<WindowEvent>);
 }

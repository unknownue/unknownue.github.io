diff --git a/crates/bevy_platform/src/collections/hash_map.rs b/crates/bevy_platform/src/collections/hash_map.rs
index ae978a7fce93c..6e771fd2a9583 100644
--- a/crates/bevy_platform/src/collections/hash_map.rs
+++ b/crates/bevy_platform/src/collections/hash_map.rs
@@ -40,6 +40,11 @@ pub type Entry<'a, K, V, S = FixedHasher> = hb::Entry<'a, K, V, S>;
 ///
 /// A new-type is used instead of a type alias due to critical methods like [`new`](hb::HashMap::new)
 /// being incompatible with Bevy's choice of default hasher.
+///
+/// Unlike [`hashbrown::HashMap`], [`HashMap`] defaults to [`FixedHasher`]
+/// instead of [`RandomState`].
+/// This provides determinism by default with an acceptable compromise to denial
+/// of service resistance in the context of a game engine.
 #[repr(transparent)]
 pub struct HashMap<K, V, S = FixedHasher>(hb::HashMap<K, V, S>);
 
diff --git a/crates/bevy_platform/src/collections/hash_set.rs b/crates/bevy_platform/src/collections/hash_set.rs
index 7950e946db164..3b51791a858e6 100644
--- a/crates/bevy_platform/src/collections/hash_set.rs
+++ b/crates/bevy_platform/src/collections/hash_set.rs
@@ -34,6 +34,11 @@ pub type Entry<'a, T, S = FixedHasher> = hb::Entry<'a, T, S>;
 ///
 /// A new-type is used instead of a type alias due to critical methods like [`new`](hb::HashSet::new)
 /// being incompatible with Bevy's choice of default hasher.
+///
+/// Unlike [`hashbrown::HashSet`], [`HashSet`] defaults to [`FixedHasher`]
+/// instead of [`RandomState`](crate::hash::RandomState).
+/// This provides determinism by default with an acceptable compromise to denial
+/// of service resistance in the context of a game engine.
 #[repr(transparent)]
 pub struct HashSet<T, S = FixedHasher>(hb::HashSet<T, S>);
 

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index ad1d753ed7be9..c7e175b8a5727 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -522,3 +522,14 @@ jobs:
               echo " Example: 'use bevy::sprite::Mesh2d;' instead of 'bevy_internal::sprite::Mesh2d;'"
               exit 1
           fi
+
+  check-release-content:
+    runs-on: ubuntu-latest
+    timeout-minutes: 30
+    steps:
+      - uses: actions/checkout@v5
+      - uses: dtolnay/rust-toolchain@stable
+      - name: Check Release Content
+        shell: bash
+        run: |
+          cargo run --package export-content -- --check
diff --git a/tools/export-content/src/app.rs b/tools/export-content/src/app.rs
index 2fb5e65bc38c7..d31b041f93453 100644
--- a/tools/export-content/src/app.rs
+++ b/tools/export-content/src/app.rs
@@ -1,4 +1,4 @@
-use std::{env, fs, io::Write, path};
+use std::{env, fs, io::Write, path::PathBuf};
 
 use miette::{diagnostic, Context, Diagnostic, IntoDiagnostic, NamedSource, Result};
 use ratatui::{
@@ -16,7 +16,7 @@ enum Mode {
 }
 
 pub struct App {
-    content_dir: path::PathBuf,
+    content_dir: PathBuf,
     release_notes: Vec<Entry>,
     release_notes_state: ListState,
     migration_guides: Vec<Entry>,
@@ -26,8 +26,14 @@ pub struct App {
     exit: bool,
 }
 
-impl App {
-    pub fn new() -> Result<App> {
+pub struct Content {
+    content_dir: PathBuf,
+    migration_guides: Vec<Entry>,
+    release_notes: Vec<Entry>,
+}
+
+impl Content {
+    pub fn load() -> Result<Self> {
         let exe_dir = env::current_exe()
             .into_diagnostic()
             .wrap_err("failed to determine path to binary")?;
@@ -43,6 +49,21 @@ impl App {
 
         let migration_guides_dir = content_dir.join("migration-guides");
         let migration_guides = load_content(migration_guides_dir, "migration guide")?;
+        Ok(Content {
+            content_dir,
+            migration_guides,
+            release_notes,
+        })
+    }
+}
+
+impl App {
+    pub fn new() -> Result<App> {
+        let Content {
+            content_dir,
+            release_notes,
+            migration_guides,
+        } = Content::load()?;
 
         Ok(App {
             content_dir,
@@ -284,7 +305,7 @@ impl Entry {
 }
 
 /// Loads release content from files in the specified directory
-fn load_content(dir: path::PathBuf, kind: &'static str) -> Result<Vec<Entry>> {
+fn load_content(dir: PathBuf, kind: &'static str) -> Result<Vec<Entry>> {
     let re = Regex::new(r"(?s)^---\s*\n(?<frontmatter>.*?)\s*\n---\s*\n(?<content>.*)").unwrap();
 
     let mut entries = vec![];
diff --git a/tools/export-content/src/main.rs b/tools/export-content/src/main.rs
index f27c154e58f17..be7847e1e0a98 100644
--- a/tools/export-content/src/main.rs
+++ b/tools/export-content/src/main.rs
@@ -25,9 +25,17 @@ use ratatui::{
     prelude::*,
 };
 
+use crate::app::Content;
+
 mod app;
 
 fn main() -> Result<()> {
+    let check = std::env::args().any(|arg| arg == "--check");
+    if check {
+        Content::load().unwrap();
+        return Ok(());
+    }
+
     init_panic_hook();
     let mut terminal = init_terminal().unwrap();
     let res = run_app(&mut terminal);

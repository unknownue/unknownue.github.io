diff --git a/crates/bevy_sprite/src/lib.rs b/crates/bevy_sprite/src/lib.rs
index 81874f37af24f..d1ebee1935101 100644
--- a/crates/bevy_sprite/src/lib.rs
+++ b/crates/bevy_sprite/src/lib.rs
@@ -33,7 +33,7 @@ pub mod prelude {
     pub use crate::{
         sprite::{Sprite, SpriteImageMode},
         texture_slice::{BorderRect, SliceScaleMode, TextureSlice, TextureSlicer},
-        ScalingMode,
+        SpriteScalingMode,
     };
 }
 
diff --git a/crates/bevy_sprite/src/sprite.rs b/crates/bevy_sprite/src/sprite.rs
index c4e4469dc2178..02bed0b7d8678 100644
--- a/crates/bevy_sprite/src/sprite.rs
+++ b/crates/bevy_sprite/src/sprite.rs
@@ -169,7 +169,7 @@ pub enum SpriteImageMode {
     Auto,
     /// The texture will be scaled to fit the rect bounds defined in [`Sprite::custom_size`].
     /// Otherwise no scaling will be applied.
-    Scale(ScalingMode),
+    Scale(SpriteScalingMode),
     /// The texture will be cut in 9 slices, keeping the texture in proportions on resize
     Sliced(TextureSlicer),
     /// The texture will be repeated if stretched beyond `stretched_value`
@@ -194,10 +194,10 @@ impl SpriteImageMode {
         )
     }
 
-    /// Returns [`ScalingMode`] if scale is presented or [`Option::None`] otherwise.
+    /// Returns [`SpriteScalingMode`] if scale is presented or [`Option::None`] otherwise.
     #[inline]
     #[must_use]
-    pub const fn scale(&self) -> Option<ScalingMode> {
+    pub const fn scale(&self) -> Option<SpriteScalingMode> {
         if let SpriteImageMode::Scale(scale) = self {
             Some(*scale)
         } else {
@@ -211,7 +211,7 @@ impl SpriteImageMode {
 /// Can be used in [`SpriteImageMode::Scale`].
 #[derive(Debug, Clone, Copy, PartialEq, Default, Reflect)]
 #[reflect(Debug, Default, Clone)]
-pub enum ScalingMode {
+pub enum SpriteScalingMode {
     /// Scale the texture uniformly (maintain the texture's aspect ratio)
     /// so that both dimensions (width and height) of the texture will be equal
     /// to or larger than the corresponding dimension of the target rectangle.
diff --git a/crates/bevy_sprite_render/src/render/mod.rs b/crates/bevy_sprite_render/src/render/mod.rs
index b80a524cc7a42..ad73fa3e4fd1d 100644
--- a/crates/bevy_sprite_render/src/render/mod.rs
+++ b/crates/bevy_sprite_render/src/render/mod.rs
@@ -39,7 +39,7 @@ use bevy_render::{
     Extract,
 };
 use bevy_shader::{Shader, ShaderDefVal};
-use bevy_sprite::{Anchor, ScalingMode, Sprite};
+use bevy_sprite::{Anchor, Sprite, SpriteScalingMode};
 use bevy_transform::components::GlobalTransform;
 use bevy_utils::default;
 use bytemuck::{Pod, Zeroable};
@@ -334,7 +334,7 @@ pub enum ExtractedSpriteKind {
     Single {
         anchor: Vec2,
         rect: Option<Rect>,
-        scaling_mode: Option<ScalingMode>,
+        scaling_mode: Option<SpriteScalingMode>,
         custom_size: Option<Vec2>,
     },
     /// Indexes into the list of [`ExtractedSlice`]s stored in the [`ExtractedSlices`] resource
@@ -965,7 +965,7 @@ impl<P: PhaseItem> RenderCommand<P> for DrawSpriteBatch {
 
 /// Scales a texture to fit within a given quad size with keeping the aspect ratio.
 fn apply_scaling(
-    scaling_mode: ScalingMode,
+    scaling_mode: SpriteScalingMode,
     texture_size: Vec2,
     quad_size: &mut Vec2,
     quad_translation: &mut Vec2,
@@ -977,7 +977,7 @@ fn apply_scaling(
     let quad_tex_scale = quad_ratio / texture_ratio;
 
     match scaling_mode {
-        ScalingMode::FillCenter => {
+        SpriteScalingMode::FillCenter => {
             if quad_ratio > texture_ratio {
                 // offset texture to center by y coordinate
                 uv_offset_scale.y += (uv_offset_scale.w - uv_offset_scale.w * tex_quad_scale) * 0.5;
@@ -989,7 +989,7 @@ fn apply_scaling(
                 uv_offset_scale.z *= quad_tex_scale;
             };
         }
-        ScalingMode::FillStart => {
+        SpriteScalingMode::FillStart => {
             if quad_ratio > texture_ratio {
                 uv_offset_scale.y += uv_offset_scale.w - uv_offset_scale.w * tex_quad_scale;
                 uv_offset_scale.w *= tex_quad_scale;
@@ -997,7 +997,7 @@ fn apply_scaling(
                 uv_offset_scale.z *= quad_tex_scale;
             }
         }
-        ScalingMode::FillEnd => {
+        SpriteScalingMode::FillEnd => {
             if quad_ratio > texture_ratio {
                 uv_offset_scale.w *= tex_quad_scale;
             } else {
@@ -1005,7 +1005,7 @@ fn apply_scaling(
                 uv_offset_scale.z *= quad_tex_scale;
             }
         }
-        ScalingMode::FitCenter => {
+        SpriteScalingMode::FitCenter => {
             if texture_ratio > quad_ratio {
                 // Scale based on width
                 quad_size.y *= quad_tex_scale;
@@ -1014,7 +1014,7 @@ fn apply_scaling(
                 quad_size.x *= tex_quad_scale;
             }
         }
-        ScalingMode::FitStart => {
+        SpriteScalingMode::FitStart => {
             if texture_ratio > quad_ratio {
                 // The quad is scaled to match the image ratio, and the quad translation is adjusted
                 // to start of the quad within the original quad size.
@@ -1031,7 +1031,7 @@ fn apply_scaling(
                 *quad_size = new_quad;
             }
         }
-        ScalingMode::FitEnd => {
+        SpriteScalingMode::FitEnd => {
             if texture_ratio > quad_ratio {
                 let scale = Vec2::new(1.0, quad_tex_scale);
                 let new_quad = *quad_size * scale;
diff --git a/examples/2d/sprite_scale.rs b/examples/2d/sprite_scale.rs
index 0194db7c81e94..aff8ab3b1be46 100644
--- a/examples/2d/sprite_scale.rs
+++ b/examples/2d/sprite_scale.rs
@@ -31,49 +31,49 @@ fn setup_sprites(mut commands: Commands, asset_server: Res<AssetServer>) {
             text: "Fill Center".to_string(),
             transform: Transform::from_translation(Vec3::new(-450., 230., 0.)),
             texture: square.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillCenter),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillCenter),
         },
         Rect {
             size: Vec2::new(100., 225.),
             text: "Fill Start".to_string(),
             transform: Transform::from_translation(Vec3::new(-330., 230., 0.)),
             texture: square.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillStart),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillStart),
         },
         Rect {
             size: Vec2::new(100., 225.),
             text: "Fill End".to_string(),
             transform: Transform::from_translation(Vec3::new(-210., 230., 0.)),
             texture: square.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillEnd),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillEnd),
         },
         Rect {
             size: Vec2::new(300., 100.),
             text: "Fill Start Horizontal".to_string(),
             transform: Transform::from_translation(Vec3::new(10., 290., 0.)),
             texture: square.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillStart),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillStart),
         },
         Rect {
             size: Vec2::new(300., 100.),
             text: "Fill End Horizontal".to_string(),
             transform: Transform::from_translation(Vec3::new(10., 155., 0.)),
             texture: square.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillEnd),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillEnd),
         },
         Rect {
             size: Vec2::new(200., 200.),
             text: "Fill Center".to_string(),
             transform: Transform::from_translation(Vec3::new(280., 230., 0.)),
             texture: banner.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillCenter),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillCenter),
         },
         Rect {
             size: Vec2::new(200., 100.),
             text: "Fill Center".to_string(),
             transform: Transform::from_translation(Vec3::new(500., 230., 0.)),
             texture: square.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillCenter),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillCenter),
         },
         Rect {
             size: Vec2::new(100., 100.),
@@ -87,28 +87,28 @@ fn setup_sprites(mut commands: Commands, asset_server: Res<AssetServer>) {
             text: "Fit Center".to_string(),
             transform: Transform::from_translation(Vec3::new(-400., -40., 0.)),
             texture: banner.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FitCenter),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FitCenter),
         },
         Rect {
             size: Vec2::new(200., 200.),
             text: "Fit Start".to_string(),
             transform: Transform::from_translation(Vec3::new(-180., -40., 0.)),
             texture: banner.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FitStart),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FitStart),
         },
         Rect {
             size: Vec2::new(200., 200.),
             text: "Fit End".to_string(),
             transform: Transform::from_translation(Vec3::new(40., -40., 0.)),
             texture: banner.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FitEnd),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FitEnd),
         },
         Rect {
             size: Vec2::new(100., 200.),
             text: "Fit Center".to_string(),
             transform: Transform::from_translation(Vec3::new(210., -40., 0.)),
             texture: banner.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FitCenter),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FitCenter),
         },
     ];
 
@@ -166,7 +166,7 @@ fn setup_texture_atlas(
             text: "Fill Center".to_string(),
             transform: Transform::from_translation(Vec3::new(-570., -300., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillCenter),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillCenter),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
@@ -176,7 +176,7 @@ fn setup_texture_atlas(
             text: "Fill Start".to_string(),
             transform: Transform::from_translation(Vec3::new(-430., -200., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillStart),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillStart),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
@@ -186,7 +186,7 @@ fn setup_texture_atlas(
             text: "Fill End".to_string(),
             transform: Transform::from_translation(Vec3::new(-430., -300., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillEnd),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillEnd),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
@@ -196,7 +196,7 @@ fn setup_texture_atlas(
             text: "Fill Center".to_string(),
             transform: Transform::from_translation(Vec3::new(-300., -250., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillCenter),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillCenter),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
@@ -206,7 +206,7 @@ fn setup_texture_atlas(
             text: "Fill Start".to_string(),
             transform: Transform::from_translation(Vec3::new(-190., -250., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillStart),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillStart),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
@@ -216,7 +216,7 @@ fn setup_texture_atlas(
             text: "Fill End".to_string(),
             transform: Transform::from_translation(Vec3::new(-90., -250., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FillEnd),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FillEnd),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
@@ -226,7 +226,7 @@ fn setup_texture_atlas(
             text: "Fit Center".to_string(),
             transform: Transform::from_translation(Vec3::new(20., -200., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FitCenter),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FitCenter),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
@@ -236,7 +236,7 @@ fn setup_texture_atlas(
             text: "Fit Start".to_string(),
             transform: Transform::from_translation(Vec3::new(20., -300., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FitStart),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FitStart),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
@@ -246,7 +246,7 @@ fn setup_texture_atlas(
             text: "Fit End".to_string(),
             transform: Transform::from_translation(Vec3::new(160., -200., 0.)),
             texture: gabe.clone(),
-            image_mode: SpriteImageMode::Scale(ScalingMode::FitEnd),
+            image_mode: SpriteImageMode::Scale(SpriteScalingMode::FitEnd),
             atlas: gabe_atlas.clone(),
             indices: animation_indices_gabe.clone(),
             timer: AnimationTimer(Timer::from_seconds(0.1, TimerMode::Repeating)),
diff --git a/release-content/migration-guides/rename_bevy_sprite_ScalingMode_to_SpriteScalingMode.md b/release-content/migration-guides/rename_bevy_sprite_ScalingMode_to_SpriteScalingMode.md
new file mode 100644
index 0000000000000..d0cf079888218
--- /dev/null
+++ b/release-content/migration-guides/rename_bevy_sprite_ScalingMode_to_SpriteScalingMode.md
@@ -0,0 +1,8 @@
+---
+title: Rename `ScalingMode` to `SpriteScalingMode`
+pull_requests: [21100]
+---
+
+In the previous release, both `bevy_sprite::sprite` and `bevy_camera::projection` defined an enum named `ScalingMode`, in violation of our one-namespace rule.
+
+To resolve this, the `ScalingMode` enum from `bevy::sprite` has been renamed to `SpriteScalingMode`.

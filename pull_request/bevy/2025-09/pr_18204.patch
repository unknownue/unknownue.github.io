diff --git a/crates/bevy_macro_utils/src/lib.rs b/crates/bevy_macro_utils/src/lib.rs
index aa386101f1983..8fa009421608f 100644
--- a/crates/bevy_macro_utils/src/lib.rs
+++ b/crates/bevy_macro_utils/src/lib.rs
@@ -14,11 +14,15 @@ mod attrs;
 mod bevy_manifest;
 pub mod fq_std;
 mod label;
+mod parser;
+mod result_sifter;
 mod shape;
 mod symbol;
 
 pub use attrs::*;
 pub use bevy_manifest::*;
 pub use label::*;
+pub use parser::*;
+pub use result_sifter::*;
 pub use shape::*;
 pub use symbol::*;
diff --git a/crates/bevy_reflect/derive/src/attribute_parser.rs b/crates/bevy_macro_utils/src/parser.rs
similarity index 92%
rename from crates/bevy_reflect/derive/src/attribute_parser.rs
rename to crates/bevy_macro_utils/src/parser.rs
index 52c5172ffd29b..51df342612de3 100644
--- a/crates/bevy_reflect/derive/src/attribute_parser.rs
+++ b/crates/bevy_macro_utils/src/parser.rs
@@ -8,7 +8,7 @@ use syn::{
 ///
 /// This is functionally the same as [`Punctuated::parse_terminated`],
 /// but accepts a closure rather than a function pointer.
-pub(crate) fn terminated_parser<T, P, F: FnMut(ParseStream) -> syn::Result<T>>(
+pub fn terminated_parser<T, P, F: FnMut(ParseStream) -> syn::Result<T>>(
     terminator: P,
     mut parser: F,
 ) -> impl FnOnce(ParseStream) -> syn::Result<Punctuated<T, P::Token>>
diff --git a/crates/bevy_reflect/derive/src/result_sifter.rs b/crates/bevy_macro_utils/src/result_sifter.rs
similarity index 97%
rename from crates/bevy_reflect/derive/src/result_sifter.rs
rename to crates/bevy_macro_utils/src/result_sifter.rs
index 0e184738a6195..d3ba534752703 100644
--- a/crates/bevy_reflect/derive/src/result_sifter.rs
+++ b/crates/bevy_macro_utils/src/result_sifter.rs
@@ -1,6 +1,6 @@
 /// Helper struct used to process an iterator of `Result<Vec<T>, syn::Error>`,
 /// combining errors into one along the way.
-pub(crate) struct ResultSifter<T> {
+pub struct ResultSifter<T> {
     items: Vec<T>,
     errors: Option<syn::Error>,
 }
diff --git a/crates/bevy_reflect/derive/src/container_attributes.rs b/crates/bevy_reflect/derive/src/container_attributes.rs
index 2cec1db0b44b2..57328883c695b 100644
--- a/crates/bevy_reflect/derive/src/container_attributes.rs
+++ b/crates/bevy_reflect/derive/src/container_attributes.rs
@@ -5,11 +5,11 @@
 //! the derive helper attribute for `Reflect`, which looks like:
 //! `#[reflect(PartialEq, Default, ...)]`.
 
-use crate::{
-    attribute_parser::terminated_parser, custom_attributes::CustomAttributes,
-    derive_data::ReflectTraitToImpl,
+use crate::{custom_attributes::CustomAttributes, derive_data::ReflectTraitToImpl};
+use bevy_macro_utils::{
+    fq_std::{FQAny, FQClone, FQOption, FQResult},
+    terminated_parser,
 };
-use bevy_macro_utils::fq_std::{FQAny, FQClone, FQOption, FQResult};
 use proc_macro2::{Ident, Span};
 use quote::quote_spanned;
 use syn::{
diff --git a/crates/bevy_reflect/derive/src/derive_data.rs b/crates/bevy_reflect/derive/src/derive_data.rs
index bcff582a4e367..a540d84bef45d 100644
--- a/crates/bevy_reflect/derive/src/derive_data.rs
+++ b/crates/bevy_reflect/derive/src/derive_data.rs
@@ -5,13 +5,13 @@ use crate::{
     container_attributes::{ContainerAttributes, FromReflectAttrs, TypePathAttrs},
     field_attributes::FieldAttributes,
     remote::RemoteType,
-    result_sifter::ResultSifter,
     serialization::SerializationDataDef,
     string_expr::StringExpr,
     type_path::parse_path_no_leading_colon,
     where_clause_options::WhereClauseOptions,
     REFLECT_ATTRIBUTE_NAME, TYPE_NAME_ATTRIBUTE_NAME, TYPE_PATH_ATTRIBUTE_NAME,
 };
+use bevy_macro_utils::ResultSifter;
 use quote::{format_ident, quote, ToTokens};
 use syn::token::Comma;
 
diff --git a/crates/bevy_reflect/derive/src/field_attributes.rs b/crates/bevy_reflect/derive/src/field_attributes.rs
index 06d64791c414e..2f7369f9545c9 100644
--- a/crates/bevy_reflect/derive/src/field_attributes.rs
+++ b/crates/bevy_reflect/derive/src/field_attributes.rs
@@ -4,10 +4,8 @@
 //! as opposed to an entire struct or enum. An example of such an attribute is
 //! the derive helper attribute for `Reflect`, which looks like: `#[reflect(ignore)]`.
 
-use crate::{
-    attribute_parser::terminated_parser, custom_attributes::CustomAttributes,
-    REFLECT_ATTRIBUTE_NAME,
-};
+use crate::{custom_attributes::CustomAttributes, REFLECT_ATTRIBUTE_NAME};
+use bevy_macro_utils::terminated_parser;
 use quote::ToTokens;
 use syn::{parse::ParseStream, Attribute, LitStr, Meta, Token, Type};
 
diff --git a/crates/bevy_reflect/derive/src/lib.rs b/crates/bevy_reflect/derive/src/lib.rs
index 2d9dfca681568..16b3d90c8f655 100644
--- a/crates/bevy_reflect/derive/src/lib.rs
+++ b/crates/bevy_reflect/derive/src/lib.rs
@@ -16,7 +16,6 @@
 
 extern crate proc_macro;
 
-mod attribute_parser;
 mod container_attributes;
 mod custom_attributes;
 mod derive_data;
@@ -32,7 +31,6 @@ mod meta;
 mod reflect_opaque;
 mod registration;
 mod remote;
-mod result_sifter;
 mod serialization;
 mod string_expr;
 mod struct_utility;

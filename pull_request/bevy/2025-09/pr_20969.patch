diff --git a/crates/bevy_feathers/Cargo.toml b/crates/bevy_feathers/Cargo.toml
index 50cc7dce606bf..f6f1fbd907242 100644
--- a/crates/bevy_feathers/Cargo.toml
+++ b/crates/bevy_feathers/Cargo.toml
@@ -31,6 +31,7 @@ bevy_ui = { path = "../bevy_ui", version = "0.17.0-dev", features = [
 ] }
 bevy_ui_render = { path = "../bevy_ui_render", version = "0.17.0-dev" }
 bevy_window = { path = "../bevy_window", version = "0.17.0-dev" }
+smol_str = { version = "0.2", default-features = false }
 
 # other
 accesskit = "0.21"
diff --git a/crates/bevy_feathers/src/controls/slider.rs b/crates/bevy_feathers/src/controls/slider.rs
index 9db8f5fd35c9d..fbad8c7a362b5 100644
--- a/crates/bevy_feathers/src/controls/slider.rs
+++ b/crates/bevy_feathers/src/controls/slider.rs
@@ -172,12 +172,12 @@ fn set_slider_styles(
     gradient: &mut BackgroundGradient,
     commands: &mut Commands,
 ) {
-    let bar_color = theme.color(match disabled {
+    let bar_color = theme.color(&match disabled {
         true => tokens::SLIDER_BAR_DISABLED,
         false => tokens::SLIDER_BAR,
     });
 
-    let bg_color = theme.color(tokens::SLIDER_BG);
+    let bg_color = theme.color(&tokens::SLIDER_BG);
 
     let cursor_shape = match disabled {
         true => bevy_window::SystemCursorIcon::NotAllowed,
diff --git a/crates/bevy_feathers/src/dark_theme.rs b/crates/bevy_feathers/src/dark_theme.rs
index c3ff4e42040eb..4a7248852c51a 100644
--- a/crates/bevy_feathers/src/dark_theme.rs
+++ b/crates/bevy_feathers/src/dark_theme.rs
@@ -9,117 +9,90 @@ use crate::theme::ThemeProps;
 pub fn create_dark_theme() -> ThemeProps {
     ThemeProps {
         color: HashMap::from([
-            (tokens::WINDOW_BG.into(), palette::GRAY_0),
+            (tokens::WINDOW_BG, palette::GRAY_0),
             // Button
-            (tokens::BUTTON_BG.into(), palette::GRAY_3),
+            (tokens::BUTTON_BG, palette::GRAY_3),
+            (tokens::BUTTON_BG_HOVER, palette::GRAY_3.lighter(0.05)),
+            (tokens::BUTTON_BG_PRESSED, palette::GRAY_3.lighter(0.1)),
+            (tokens::BUTTON_BG_DISABLED, palette::GRAY_2),
+            (tokens::BUTTON_PRIMARY_BG, palette::ACCENT),
             (
-                tokens::BUTTON_BG_HOVER.into(),
-                palette::GRAY_3.lighter(0.05),
-            ),
-            (
-                tokens::BUTTON_BG_PRESSED.into(),
-                palette::GRAY_3.lighter(0.1),
-            ),
-            (tokens::BUTTON_BG_DISABLED.into(), palette::GRAY_2),
-            (tokens::BUTTON_PRIMARY_BG.into(), palette::ACCENT),
-            (
-                tokens::BUTTON_PRIMARY_BG_HOVER.into(),
+                tokens::BUTTON_PRIMARY_BG_HOVER,
                 palette::ACCENT.lighter(0.05),
             ),
             (
-                tokens::BUTTON_PRIMARY_BG_PRESSED.into(),
+                tokens::BUTTON_PRIMARY_BG_PRESSED,
                 palette::ACCENT.lighter(0.1),
             ),
-            (tokens::BUTTON_PRIMARY_BG_DISABLED.into(), palette::GRAY_2),
-            (tokens::BUTTON_TEXT.into(), palette::WHITE),
+            (tokens::BUTTON_PRIMARY_BG_DISABLED, palette::GRAY_2),
+            (tokens::BUTTON_TEXT, palette::WHITE),
+            (tokens::BUTTON_TEXT_DISABLED, palette::WHITE.with_alpha(0.5)),
+            (tokens::BUTTON_PRIMARY_TEXT, palette::WHITE),
             (
-                tokens::BUTTON_TEXT_DISABLED.into(),
-                palette::WHITE.with_alpha(0.5),
-            ),
-            (tokens::BUTTON_PRIMARY_TEXT.into(), palette::WHITE),
-            (
-                tokens::BUTTON_PRIMARY_TEXT_DISABLED.into(),
+                tokens::BUTTON_PRIMARY_TEXT_DISABLED,
                 palette::WHITE.with_alpha(0.5),
             ),
             // Slider
-            (tokens::SLIDER_BG.into(), palette::GRAY_1),
-            (tokens::SLIDER_BAR.into(), palette::ACCENT),
-            (tokens::SLIDER_BAR_DISABLED.into(), palette::GRAY_2),
-            (tokens::SLIDER_TEXT.into(), palette::WHITE),
-            (
-                tokens::SLIDER_TEXT_DISABLED.into(),
-                palette::WHITE.with_alpha(0.5),
-            ),
+            (tokens::SLIDER_BG, palette::GRAY_1),
+            (tokens::SLIDER_BAR, palette::ACCENT),
+            (tokens::SLIDER_BAR_DISABLED, palette::GRAY_2),
+            (tokens::SLIDER_TEXT, palette::WHITE),
+            (tokens::SLIDER_TEXT_DISABLED, palette::WHITE.with_alpha(0.5)),
             // Checkbox
-            (tokens::CHECKBOX_BG.into(), palette::GRAY_3),
-            (tokens::CHECKBOX_BG_CHECKED.into(), palette::ACCENT),
+            (tokens::CHECKBOX_BG, palette::GRAY_3),
+            (tokens::CHECKBOX_BG_CHECKED, palette::ACCENT),
             (
-                tokens::CHECKBOX_BG_DISABLED.into(),
+                tokens::CHECKBOX_BG_DISABLED,
                 palette::GRAY_1.with_alpha(0.5),
             ),
             (
-                tokens::CHECKBOX_BG_CHECKED_DISABLED.into(),
+                tokens::CHECKBOX_BG_CHECKED_DISABLED,
                 palette::GRAY_3.with_alpha(0.5),
             ),
-            (tokens::CHECKBOX_BORDER.into(), palette::GRAY_3),
+            (tokens::CHECKBOX_BORDER, palette::GRAY_3),
+            (tokens::CHECKBOX_BORDER_HOVER, palette::GRAY_3.lighter(0.1)),
             (
-                tokens::CHECKBOX_BORDER_HOVER.into(),
-                palette::GRAY_3.lighter(0.1),
-            ),
-            (
-                tokens::CHECKBOX_BORDER_DISABLED.into(),
+                tokens::CHECKBOX_BORDER_DISABLED,
                 palette::GRAY_3.with_alpha(0.5),
             ),
-            (tokens::CHECKBOX_MARK.into(), palette::WHITE),
-            (tokens::CHECKBOX_MARK_DISABLED.into(), palette::LIGHT_GRAY_2),
-            (tokens::CHECKBOX_TEXT.into(), palette::LIGHT_GRAY_1),
+            (tokens::CHECKBOX_MARK, palette::WHITE),
+            (tokens::CHECKBOX_MARK_DISABLED, palette::LIGHT_GRAY_2),
+            (tokens::CHECKBOX_TEXT, palette::LIGHT_GRAY_1),
             (
-                tokens::CHECKBOX_TEXT_DISABLED.into(),
+                tokens::CHECKBOX_TEXT_DISABLED,
                 palette::LIGHT_GRAY_1.with_alpha(0.5),
             ),
             // Radio
-            (tokens::RADIO_BORDER.into(), palette::GRAY_3),
-            (
-                tokens::RADIO_BORDER_HOVER.into(),
-                palette::GRAY_3.lighter(0.1),
-            ),
+            (tokens::RADIO_BORDER, palette::GRAY_3),
+            (tokens::RADIO_BORDER_HOVER, palette::GRAY_3.lighter(0.1)),
             (
-                tokens::RADIO_BORDER_DISABLED.into(),
+                tokens::RADIO_BORDER_DISABLED,
                 palette::GRAY_3.with_alpha(0.5),
             ),
-            (tokens::RADIO_MARK.into(), palette::ACCENT),
-            (
-                tokens::RADIO_MARK_DISABLED.into(),
-                palette::ACCENT.with_alpha(0.5),
-            ),
-            (tokens::RADIO_TEXT.into(), palette::LIGHT_GRAY_1),
+            (tokens::RADIO_MARK, palette::ACCENT),
+            (tokens::RADIO_MARK_DISABLED, palette::ACCENT.with_alpha(0.5)),
+            (tokens::RADIO_TEXT, palette::LIGHT_GRAY_1),
             (
-                tokens::RADIO_TEXT_DISABLED.into(),
+                tokens::RADIO_TEXT_DISABLED,
                 palette::LIGHT_GRAY_1.with_alpha(0.5),
             ),
             // Toggle Switch
-            (tokens::SWITCH_BG.into(), palette::GRAY_3),
-            (tokens::SWITCH_BG_CHECKED.into(), palette::ACCENT),
+            (tokens::SWITCH_BG, palette::GRAY_3),
+            (tokens::SWITCH_BG_CHECKED, palette::ACCENT),
+            (tokens::SWITCH_BG_DISABLED, palette::GRAY_1.with_alpha(0.5)),
             (
-                tokens::SWITCH_BG_DISABLED.into(),
-                palette::GRAY_1.with_alpha(0.5),
-            ),
-            (
-                tokens::SWITCH_BG_CHECKED_DISABLED.into(),
+                tokens::SWITCH_BG_CHECKED_DISABLED,
                 palette::GRAY_3.with_alpha(0.5),
             ),
-            (tokens::SWITCH_BORDER.into(), palette::GRAY_3),
-            (
-                tokens::SWITCH_BORDER_HOVER.into(),
-                palette::GRAY_3.lighter(0.1),
-            ),
+            (tokens::SWITCH_BORDER, palette::GRAY_3),
+            (tokens::SWITCH_BORDER_HOVER, palette::GRAY_3.lighter(0.1)),
             (
-                tokens::SWITCH_BORDER_DISABLED.into(),
+                tokens::SWITCH_BORDER_DISABLED,
                 palette::GRAY_3.with_alpha(0.5),
             ),
-            (tokens::SWITCH_SLIDE.into(), palette::LIGHT_GRAY_2),
+            (tokens::SWITCH_SLIDE, palette::LIGHT_GRAY_2),
             (
-                tokens::SWITCH_SLIDE_DISABLED.into(),
+                tokens::SWITCH_SLIDE_DISABLED,
                 palette::LIGHT_GRAY_2.with_alpha(0.3),
             ),
         ]),
diff --git a/crates/bevy_feathers/src/theme.rs b/crates/bevy_feathers/src/theme.rs
index a57bb6e8620c4..2beee9eb97c5f 100644
--- a/crates/bevy_feathers/src/theme.rs
+++ b/crates/bevy_feathers/src/theme.rs
@@ -16,13 +16,42 @@ use bevy_platform::collections::HashMap;
 use bevy_reflect::{prelude::ReflectDefault, Reflect};
 use bevy_text::TextColor;
 use bevy_ui::{BackgroundColor, BorderColor};
+use smol_str::SmolStr;
+
+/// A design token for the theme. This serves as the lookup key for the theme properties.
+#[derive(Clone, PartialEq, Eq, Hash, Reflect)]
+pub struct ThemeToken(SmolStr);
+
+impl ThemeToken {
+    /// Construct a new [`ThemeToken`] from a [`SmolStr`].
+    pub const fn new(text: SmolStr) -> Self {
+        Self(text)
+    }
+
+    /// Construct a new [`ThemeToken`] from a static string.
+    pub const fn new_static(text: &'static str) -> Self {
+        Self(SmolStr::new_static(text))
+    }
+}
+
+impl core::fmt::Display for ThemeToken {
+    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
+        write!(f, "{}", self.0)
+    }
+}
+
+impl core::fmt::Debug for ThemeToken {
+    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
+        write!(f, "ThemeToken({:?})", self.0)
+    }
+}
 
 /// A collection of properties that make up a theme.
 #[derive(Default, Clone, Reflect, Debug)]
 #[reflect(Default, Debug)]
 pub struct ThemeProps {
     /// Map of design tokens to colors.
-    pub color: HashMap<String, Color>,
+    pub color: HashMap<ThemeToken, Color>,
     // Other style property types to be added later.
 }
 
@@ -34,7 +63,7 @@ pub struct UiTheme(pub ThemeProps);
 impl UiTheme {
     /// Lookup a color by design token. If the theme does not have an entry for that token,
     /// logs a warning and returns an error color.
-    pub fn color<'a>(&self, token: &'a str) -> Color {
+    pub fn color(&self, token: &ThemeToken) -> Color {
         let color = self.0.color.get(token);
         match color {
             Some(c) => *c,
@@ -47,34 +76,36 @@ impl UiTheme {
     }
 
     /// Associate a design token with a given color.
-    pub fn set_color(&mut self, token: impl Into<String>, color: Color) {
-        self.0.color.insert(token.into(), color);
+    pub fn set_color(&mut self, token: &str, color: Color) {
+        self.0
+            .color
+            .insert(ThemeToken::new(SmolStr::new(token)), color);
     }
 }
 
 /// Component which causes the background color of an entity to be set based on a theme color.
-#[derive(Component, Clone, Copy)]
+#[derive(Component, Clone)]
 #[require(BackgroundColor)]
 #[component(immutable)]
 #[derive(Reflect)]
 #[reflect(Component, Clone)]
-pub struct ThemeBackgroundColor(pub &'static str);
+pub struct ThemeBackgroundColor(pub ThemeToken);
 
 /// Component which causes the border color of an entity to be set based on a theme color.
 /// Only supports setting all borders to the same color.
-#[derive(Component, Clone, Copy)]
+#[derive(Component, Clone)]
 #[require(BorderColor)]
 #[component(immutable)]
 #[derive(Reflect)]
 #[reflect(Component, Clone)]
-pub struct ThemeBorderColor(pub &'static str);
+pub struct ThemeBorderColor(pub ThemeToken);
 
 /// Component which causes the inherited text color of an entity to be set based on a theme color.
-#[derive(Component, Clone, Copy)]
+#[derive(Component, Clone)]
 #[component(immutable)]
 #[derive(Reflect)]
 #[reflect(Component, Clone)]
-pub struct ThemeFontColor(pub &'static str);
+pub struct ThemeFontColor(pub ThemeToken);
 
 /// A marker component that is used to indicate that the text entity wants to opt-in to using
 /// inherited text styles.
@@ -90,12 +121,12 @@ pub(crate) fn update_theme(
     if theme.is_changed() {
         // Update all background colors
         for (mut bg, theme_bg) in q_background.iter_mut() {
-            bg.0 = theme.color(theme_bg.0);
+            bg.0 = theme.color(&theme_bg.0);
         }
 
         // Update all border colors
         for (mut border, theme_border) in q_border.iter_mut() {
-            border.set_all(theme.color(theme_border.0));
+            border.set_all(theme.color(&theme_border.0));
         }
     }
 }
@@ -110,7 +141,7 @@ pub(crate) fn on_changed_background(
 ) {
     // Update background colors where the design token has changed.
     if let Ok((mut bg, theme_bg)) = q_background.get_mut(insert.entity) {
-        bg.0 = theme.color(theme_bg.0);
+        bg.0 = theme.color(&theme_bg.0);
     }
 }
 
@@ -121,7 +152,7 @@ pub(crate) fn on_changed_border(
 ) {
     // Update background colors where the design token has changed.
     if let Ok((mut border, theme_border)) = q_border.get_mut(insert.entity) {
-        border.set_all(theme.color(theme_border.0));
+        border.set_all(theme.color(&theme_border.0));
     }
 }
 
@@ -134,7 +165,7 @@ pub(crate) fn on_changed_font_color(
     mut commands: Commands,
 ) {
     if let Ok(token) = font_color.get(insert.entity) {
-        let color = theme.color(token.0);
+        let color = theme.color(&token.0);
         commands
             .entity(insert.entity)
             .insert(Propagate(TextColor(color)));
diff --git a/crates/bevy_feathers/src/tokens.rs b/crates/bevy_feathers/src/tokens.rs
index 453dc94c5ea37..a00a78bc799c0 100644
--- a/crates/bevy_feathers/src/tokens.rs
+++ b/crates/bevy_feathers/src/tokens.rs
@@ -4,119 +4,136 @@
 //! similar in concept to a CSS variable. Each token represents an assignment of a color or
 //! value to a specific visual aspect of a widget, such as background or border.
 
+use crate::theme::ThemeToken;
+
 /// Window background
-pub const WINDOW_BG: &str = "feathers.window.bg";
+pub const WINDOW_BG: ThemeToken = ThemeToken::new_static("feathers.window.bg");
 
 /// Focus ring
-pub const FOCUS_RING: &str = "feathers.focus";
+pub const FOCUS_RING: ThemeToken = ThemeToken::new_static("feathers.focus");
 
 /// Regular text
-pub const TEXT_MAIN: &str = "feathers.text.main";
+pub const TEXT_MAIN: ThemeToken = ThemeToken::new_static("feathers.text.main");
 /// Dim text
-pub const TEXT_DIM: &str = "feathers.text.dim";
+pub const TEXT_DIM: ThemeToken = ThemeToken::new_static("feathers.text.dim");
 
 // Normal buttons
 
 /// Regular button background
-pub const BUTTON_BG: &str = "feathers.button.bg";
+pub const BUTTON_BG: ThemeToken = ThemeToken::new_static("feathers.button.bg");
 /// Regular button background (hovered)
-pub const BUTTON_BG_HOVER: &str = "feathers.button.bg.hover";
+pub const BUTTON_BG_HOVER: ThemeToken = ThemeToken::new_static("feathers.button.bg.hover");
 /// Regular button background (disabled)
-pub const BUTTON_BG_DISABLED: &str = "feathers.button.bg.disabled";
+pub const BUTTON_BG_DISABLED: ThemeToken = ThemeToken::new_static("feathers.button.bg.disabled");
 /// Regular button background (pressed)
-pub const BUTTON_BG_PRESSED: &str = "feathers.button.bg.pressed";
+pub const BUTTON_BG_PRESSED: ThemeToken = ThemeToken::new_static("feathers.button.bg.pressed");
 /// Regular button text
-pub const BUTTON_TEXT: &str = "feathers.button.txt";
+pub const BUTTON_TEXT: ThemeToken = ThemeToken::new_static("feathers.button.txt");
 /// Regular button text (disabled)
-pub const BUTTON_TEXT_DISABLED: &str = "feathers.button.txt.disabled";
+pub const BUTTON_TEXT_DISABLED: ThemeToken = ThemeToken::new_static("feathers.button.txt.disabled");
 
 // Primary ("default") buttons
 
 /// Primary button background
-pub const BUTTON_PRIMARY_BG: &str = "feathers.button.primary.bg";
+pub const BUTTON_PRIMARY_BG: ThemeToken = ThemeToken::new_static("feathers.button.primary.bg");
 /// Primary button background (hovered)
-pub const BUTTON_PRIMARY_BG_HOVER: &str = "feathers.button.primary.bg.hover";
+pub const BUTTON_PRIMARY_BG_HOVER: ThemeToken =
+    ThemeToken::new_static("feathers.button.primary.bg.hover");
 /// Primary button background (disabled)
-pub const BUTTON_PRIMARY_BG_DISABLED: &str = "feathers.button.primary.bg.disabled";
+pub const BUTTON_PRIMARY_BG_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.button.primary.bg.disabled");
 /// Primary button background (pressed)
-pub const BUTTON_PRIMARY_BG_PRESSED: &str = "feathers.button.primary.bg.pressed";
+pub const BUTTON_PRIMARY_BG_PRESSED: ThemeToken =
+    ThemeToken::new_static("feathers.button.primary.bg.pressed");
 /// Primary button text
-pub const BUTTON_PRIMARY_TEXT: &str = "feathers.button.primary.txt";
+pub const BUTTON_PRIMARY_TEXT: ThemeToken = ThemeToken::new_static("feathers.button.primary.txt");
 /// Primary button text (disabled)
-pub const BUTTON_PRIMARY_TEXT_DISABLED: &str = "feathers.button.primary.txt.disabled";
+pub const BUTTON_PRIMARY_TEXT_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.button.primary.txt.disabled");
 
 // Slider
 
 /// Background for slider
-pub const SLIDER_BG: &str = "feathers.slider.bg";
+pub const SLIDER_BG: ThemeToken = ThemeToken::new_static("feathers.slider.bg");
 /// Background for slider moving bar
-pub const SLIDER_BAR: &str = "feathers.slider.bar";
+pub const SLIDER_BAR: ThemeToken = ThemeToken::new_static("feathers.slider.bar");
 /// Background for slider moving bar (disabled)
-pub const SLIDER_BAR_DISABLED: &str = "feathers.slider.bar.disabled";
+pub const SLIDER_BAR_DISABLED: ThemeToken = ThemeToken::new_static("feathers.slider.bar.disabled");
 /// Background for slider text
-pub const SLIDER_TEXT: &str = "feathers.slider.text";
+pub const SLIDER_TEXT: ThemeToken = ThemeToken::new_static("feathers.slider.text");
 /// Background for slider text (disabled)
-pub const SLIDER_TEXT_DISABLED: &str = "feathers.slider.text.disabled";
+pub const SLIDER_TEXT_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.slider.text.disabled");
 
 // Checkbox
 
 /// Checkbox background around the checkmark
-pub const CHECKBOX_BG: &str = "feathers.checkbox.bg";
+pub const CHECKBOX_BG: ThemeToken = ThemeToken::new_static("feathers.checkbox.bg");
 /// Checkbox border around the checkmark (disabled)
-pub const CHECKBOX_BG_DISABLED: &str = "feathers.checkbox.bg.disabled";
+pub const CHECKBOX_BG_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.checkbox.bg.disabled");
 /// Checkbox background around the checkmark
-pub const CHECKBOX_BG_CHECKED: &str = "feathers.checkbox.bg.checked";
+pub const CHECKBOX_BG_CHECKED: ThemeToken = ThemeToken::new_static("feathers.checkbox.bg.checked");
 /// Checkbox border around the checkmark (disabled)
-pub const CHECKBOX_BG_CHECKED_DISABLED: &str = "feathers.checkbox.bg.checked.disabled";
+pub const CHECKBOX_BG_CHECKED_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.checkbox.bg.checked.disabled");
 /// Checkbox border around the checkmark
-pub const CHECKBOX_BORDER: &str = "feathers.checkbox.border";
+pub const CHECKBOX_BORDER: ThemeToken = ThemeToken::new_static("feathers.checkbox.border");
 /// Checkbox border around the checkmark (hovered)
-pub const CHECKBOX_BORDER_HOVER: &str = "feathers.checkbox.border.hover";
+pub const CHECKBOX_BORDER_HOVER: ThemeToken =
+    ThemeToken::new_static("feathers.checkbox.border.hover");
 /// Checkbox border around the checkmark (disabled)
-pub const CHECKBOX_BORDER_DISABLED: &str = "feathers.checkbox.border.disabled";
+pub const CHECKBOX_BORDER_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.checkbox.border.disabled");
 /// Checkbox check mark
-pub const CHECKBOX_MARK: &str = "feathers.checkbox.mark";
+pub const CHECKBOX_MARK: ThemeToken = ThemeToken::new_static("feathers.checkbox.mark");
 /// Checkbox check mark (disabled)
-pub const CHECKBOX_MARK_DISABLED: &str = "feathers.checkbox.mark.disabled";
+pub const CHECKBOX_MARK_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.checkbox.mark.disabled");
 /// Checkbox label text
-pub const CHECKBOX_TEXT: &str = "feathers.checkbox.text";
+pub const CHECKBOX_TEXT: ThemeToken = ThemeToken::new_static("feathers.checkbox.text");
 /// Checkbox label text (disabled)
-pub const CHECKBOX_TEXT_DISABLED: &str = "feathers.checkbox.text.disabled";
+pub const CHECKBOX_TEXT_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.checkbox.text.disabled");
 
 // Radio button
 
 /// Radio border around the checkmark
-pub const RADIO_BORDER: &str = "feathers.radio.border";
+pub const RADIO_BORDER: ThemeToken = ThemeToken::new_static("feathers.radio.border");
 /// Radio border around the checkmark (hovered)
-pub const RADIO_BORDER_HOVER: &str = "feathers.radio.border.hover";
+pub const RADIO_BORDER_HOVER: ThemeToken = ThemeToken::new_static("feathers.radio.border.hover");
 /// Radio border around the checkmark (disabled)
-pub const RADIO_BORDER_DISABLED: &str = "feathers.radio.border.disabled";
+pub const RADIO_BORDER_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.radio.border.disabled");
 /// Radio check mark
-pub const RADIO_MARK: &str = "feathers.radio.mark";
+pub const RADIO_MARK: ThemeToken = ThemeToken::new_static("feathers.radio.mark");
 /// Radio check mark (disabled)
-pub const RADIO_MARK_DISABLED: &str = "feathers.radio.mark.disabled";
+pub const RADIO_MARK_DISABLED: ThemeToken = ThemeToken::new_static("feathers.radio.mark.disabled");
 /// Radio label text
-pub const RADIO_TEXT: &str = "feathers.radio.text";
+pub const RADIO_TEXT: ThemeToken = ThemeToken::new_static("feathers.radio.text");
 /// Radio label text (disabled)
-pub const RADIO_TEXT_DISABLED: &str = "feathers.radio.text.disabled";
+pub const RADIO_TEXT_DISABLED: ThemeToken = ThemeToken::new_static("feathers.radio.text.disabled");
 
 // Toggle Switch
 
 /// Switch background around the checkmark
-pub const SWITCH_BG: &str = "feathers.switch.bg";
+pub const SWITCH_BG: ThemeToken = ThemeToken::new_static("feathers.switch.bg");
 /// Switch border around the checkmark (disabled)
-pub const SWITCH_BG_DISABLED: &str = "feathers.switch.bg.disabled";
+pub const SWITCH_BG_DISABLED: ThemeToken = ThemeToken::new_static("feathers.switch.bg.disabled");
 /// Switch background around the checkmark
-pub const SWITCH_BG_CHECKED: &str = "feathers.switch.bg.checked";
+pub const SWITCH_BG_CHECKED: ThemeToken = ThemeToken::new_static("feathers.switch.bg.checked");
 /// Switch border around the checkmark (disabled)
-pub const SWITCH_BG_CHECKED_DISABLED: &str = "feathers.switch.bg.checked.disabled";
+pub const SWITCH_BG_CHECKED_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.switch.bg.checked.disabled");
 /// Switch border around the checkmark
-pub const SWITCH_BORDER: &str = "feathers.switch.border";
+pub const SWITCH_BORDER: ThemeToken = ThemeToken::new_static("feathers.switch.border");
 /// Switch border around the checkmark (hovered)
-pub const SWITCH_BORDER_HOVER: &str = "feathers.switch.border.hover";
+pub const SWITCH_BORDER_HOVER: ThemeToken = ThemeToken::new_static("feathers.switch.border.hover");
 /// Switch border around the checkmark (disabled)
-pub const SWITCH_BORDER_DISABLED: &str = "feathers.switch.border.disabled";
+pub const SWITCH_BORDER_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.switch.border.disabled");
 /// Switch slide
-pub const SWITCH_SLIDE: &str = "feathers.switch.slide";
+pub const SWITCH_SLIDE: ThemeToken = ThemeToken::new_static("feathers.switch.slide");
 /// Switch slide (disabled)
-pub const SWITCH_SLIDE_DISABLED: &str = "feathers.switch.slide.disabled";
+pub const SWITCH_SLIDE_DISABLED: ThemeToken =
+    ThemeToken::new_static("feathers.switch.slide.disabled");
diff --git a/release-content/release-notes/feathers.md b/release-content/release-notes/feathers.md
index 0051fb5bc37bd..ad8677ab0ddf8 100644
--- a/release-content/release-notes/feathers.md
+++ b/release-content/release-notes/feathers.md
@@ -1,7 +1,7 @@
 ---
 title: Bevy Feathers
 authors: ["@viridia", "@Atlas16A", "@ickshonpe", "@amedoeyes"]
-pull_requests: [19730, 19900, 19928, 20237, 20169, 20422, 20350, 20548]
+pull_requests: [19730, 19900, 19928, 20237, 20169, 20422, 20350, 20548, 20969]
 ---
 
 TODO: add screenshot of `feathers` in practice
@@ -30,6 +30,6 @@ Let us know what problems you run into, and feel free to contribute missing widg
 
 But if you can't wait to get your hands on `bevy_ui` widgets for your game,
 copy the code into your project and start hacking away at it!
-While it deliberately does not expose very many tuning levers (keeping a coherent visual style in an open source project is *hard*),
+While it deliberately does not expose very many tuning levers (keeping a coherent visual style in an open source project is _hard_),
 it's a helpful base to understand how to extend and style `bevy_ui` and our new headless widgets
 to meet the unique style and design patterns of your project.

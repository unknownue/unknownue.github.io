diff --git a/crates/bevy_camera/src/camera.rs b/crates/bevy_camera/src/camera.rs
index 35f165fc469a5..3df3f0e26b8db 100644
--- a/crates/bevy_camera/src/camera.rs
+++ b/crates/bevy_camera/src/camera.rs
@@ -873,6 +873,8 @@ pub enum NormalizedRenderTarget {
 }
 
 /// A unique id that corresponds to a specific `ManualTextureView` in the `ManualTextureViews` collection.
+///
+/// See `ManualTextureViews` in `bevy_camera` for more details.
 #[derive(Default, Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Component, Reflect)]
 #[reflect(Component, Default, Debug, PartialEq, Hash, Clone)]
 pub struct ManualTextureViewHandle(pub u32);
diff --git a/crates/bevy_render/src/texture/manual_texture_view.rs b/crates/bevy_render/src/texture/manual_texture_view.rs
index 1f0659a1fdc22..57cb5e2d15056 100644
--- a/crates/bevy_render/src/texture/manual_texture_view.rs
+++ b/crates/bevy_render/src/texture/manual_texture_view.rs
@@ -26,7 +26,30 @@ impl ManualTextureView {
     }
 }
 
-/// Stores manually managed [`ManualTextureView`]s for use as a [`bevy_camera::RenderTarget`].
+/// Resource that stores manually managed [`ManualTextureView`]s for use as a [`RenderTarget`](bevy_camera::RenderTarget).
+/// This type dereferences to a `HashMap<ManualTextureViewHandle, ManualTextureView>`.
+/// To add a new texture view, pick a new [`ManualTextureViewHandle`] and insert it into the map.
+/// Then, to render to the view, set a [`Camera`](bevy_camera::Camera)s `target` to `RenderTarget::TextureView(handle)`.
+/// ```ignore
+/// # use bevy_ecs::prelude::*;
+/// # let mut world = World::default();
+/// # world.insert_resource(ManualTextureViews::default());
+/// # let texture_view = todo!();
+/// let manual_views = world.resource_mut::<ManualTextureViews>();
+/// let manual_view = ManualTextureView::with_default_format(texture_view, UVec2::new(1024, 1024));
+///
+/// // Choose an unused handle value; it's likely only you are inserting manual views.
+/// const MANUAL_VIEW_HANDLE: ManualTextureViewHandle = ManualTextureViewHandle::new(42);
+/// manual_views.insert(MANUAL_VIEW_HANDLE, manual_view);
+///
+/// // Now you can spawn a Cemera that renders to the manual view:
+/// # use bevy_camera::{Camera, RenderTarget};
+/// world.spawn(Camera {
+///     target: RenderTarget::TextureView(MANUAL_VIEW_HANDLE),
+///     ..Default::default()
+/// });
+/// ```
+/// Bevy will then use the `ManualTextureViews` resource to find your texture view and render to it.
 #[derive(Default, Clone, Resource, ExtractResource)]
 pub struct ManualTextureViews(HashMap<ManualTextureViewHandle, ManualTextureView>);
 

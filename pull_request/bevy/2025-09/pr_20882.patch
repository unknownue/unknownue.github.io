diff --git a/crates/bevy_state/src/state_scoped_events.rs b/crates/bevy_state/src/state_scoped_events.rs
index 3aaf325837f2a..4e3ef2fa0feaa 100644
--- a/crates/bevy_state/src/state_scoped_events.rs
+++ b/crates/bevy_state/src/state_scoped_events.rs
@@ -64,7 +64,7 @@ impl<S: States> Default for StateScopedEvents<S> {
     }
 }
 
-fn clear_events_on_exit_state<S: States>(
+fn clear_events_on_exit<S: States>(
     mut c: Commands,
     mut transitions: EventReader<StateTransitionEvent<S>>,
 ) {
@@ -85,7 +85,7 @@ fn clear_events_on_exit_state<S: States>(
     });
 }
 
-fn clear_events_on_enter_state<S: States>(
+fn clear_events_on_enter<S: States>(
     mut c: Commands,
     mut transitions: EventReader<StateTransitionEvent<S>>,
 ) {
@@ -119,10 +119,8 @@ fn clear_events_on_state_transition<E: BufferedEvent, S: States>(
         .resource_mut::<StateScopedEvents<S>>()
         .add_event::<E>(state.clone(), transition_type);
     match transition_type {
-        TransitionType::OnExit => app.add_systems(OnExit(state), clear_events_on_exit_state::<S>),
-        TransitionType::OnEnter => {
-            app.add_systems(OnEnter(state), clear_events_on_enter_state::<S>)
-        }
+        TransitionType::OnExit => app.add_systems(OnExit(state), clear_events_on_exit::<S>),
+        TransitionType::OnEnter => app.add_systems(OnEnter(state), clear_events_on_enter::<S>),
     };
 }
 
@@ -136,7 +134,7 @@ pub trait StateScopedEventsAppExt {
     /// All of these (state scoped entities and events cleanup, and `OnExit`)
     /// occur within schedule [`StateTransition`](crate::prelude::StateTransition)
     /// and system set `StateTransitionSystems::ExitSchedules`.
-    fn clear_events_on_exit_state<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self;
+    fn clear_events_on_exit<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self;
 
     /// Clears an [`BufferedEvent`] when entering the specified `state`.
     ///
@@ -146,11 +144,11 @@ pub trait StateScopedEventsAppExt {
     /// All of these (state scoped entities and events cleanup, and `OnEnter`)
     /// occur within schedule [`StateTransition`](crate::prelude::StateTransition)
     /// and system set `StateTransitionSystems::EnterSchedules`.
-    fn clear_events_on_enter_state<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self;
+    fn clear_events_on_enter<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self;
 }
 
 impl StateScopedEventsAppExt for App {
-    fn clear_events_on_exit_state<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self {
+    fn clear_events_on_exit<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self {
         clear_events_on_state_transition(
             self.main_mut(),
             PhantomData::<E>,
@@ -160,7 +158,7 @@ impl StateScopedEventsAppExt for App {
         self
     }
 
-    fn clear_events_on_enter_state<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self {
+    fn clear_events_on_enter<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self {
         clear_events_on_state_transition(
             self.main_mut(),
             PhantomData::<E>,
@@ -172,12 +170,12 @@ impl StateScopedEventsAppExt for App {
 }
 
 impl StateScopedEventsAppExt for SubApp {
-    fn clear_events_on_exit_state<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self {
+    fn clear_events_on_exit<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self {
         clear_events_on_state_transition(self, PhantomData::<E>, state, TransitionType::OnExit);
         self
     }
 
-    fn clear_events_on_enter_state<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self {
+    fn clear_events_on_enter<E: BufferedEvent>(&mut self, state: impl States) -> &mut Self {
         clear_events_on_state_transition(self, PhantomData::<E>, state, TransitionType::OnEnter);
         self
     }
@@ -211,7 +209,7 @@ mod tests {
 
         app.add_event::<StandardEvent>();
         app.add_event::<StateScopedEvent>()
-            .clear_events_on_exit_state::<StateScopedEvent>(TestState::A);
+            .clear_events_on_exit::<StateScopedEvent>(TestState::A);
 
         app.world_mut().write_event(StandardEvent).unwrap();
         app.world_mut().write_event(StateScopedEvent).unwrap();
@@ -241,7 +239,7 @@ mod tests {
 
         app.add_event::<StandardEvent>();
         app.add_event::<StateScopedEvent>()
-            .clear_events_on_enter_state::<StateScopedEvent>(TestState::B);
+            .clear_events_on_enter::<StateScopedEvent>(TestState::B);
 
         app.world_mut().write_event(StandardEvent).unwrap();
         app.world_mut().write_event(StateScopedEvent).unwrap();
diff --git a/release-content/migration-guides/rename_state_scoped.md b/release-content/migration-guides/rename_state_scoped.md
index 29788e90f5c17..dc3f5b53826e8 100644
--- a/release-content/migration-guides/rename_state_scoped.md
+++ b/release-content/migration-guides/rename_state_scoped.md
@@ -8,13 +8,13 @@ as a way to remove entities/events when **exiting** a state.
 
 However, it can also be useful to have the opposite behavior,
 where entities/events are removed when **entering** a state.
-This is now possible with the new `DespawnOnEnter` component and `clear_events_on_enter_state` method.
+This is now possible with the new `DespawnOnEnter` component and `clear_events_on_enter` method.
 
 To support this addition, the previous method and component have been renamed.
-Also, `clear_event_on_exit_state` no longer adds the event automatically, so you must call `App::add_event` manually.
+Also, `clear_event_on_exit` (previously `clear_event_on_exit_state`) no longer adds the event automatically, so you must call `App::add_event` manually.
 
 | Before                        | After                                      |
 |-------------------------------|--------------------------------------------|
 | `StateScoped`                 | `DespawnOnExit`                       |
 | `clear_state_scoped_entities` | `despawn_entities_on_exit_state`           |
-| `add_state_scoped_event`      | `add_event` + `clear_events_on_exit_state` |
+| `add_state_scoped_event`      | `add_event` + `clear_events_on_exit` |

diff --git a/crates/bevy_reflect/src/is.rs b/crates/bevy_reflect/src/is.rs
new file mode 100644
index 0000000000000..21cf41892eff5
--- /dev/null
+++ b/crates/bevy_reflect/src/is.rs
@@ -0,0 +1,31 @@
+use core::any::{Any, TypeId};
+
+/// Checks if the current type "is" another type, using a [`TypeId`] equality comparison.
+pub trait Is {
+    /// Checks if the current type "is" another type, using a [`TypeId`] equality comparison.
+    /// This is most useful in the context of generic logic.
+    ///
+    /// ```
+    /// # use bevy_reflect::Is;
+    /// # use std::any::Any;
+    /// fn greet_if_u32<T: Any>() {
+    ///     if T::is::<u32>() {
+    ///         println!("Hello");
+    ///     }
+    /// }
+    /// // this will print "Hello"
+    /// greet_if_u32::<u32>();
+    /// // this will not print "Hello"
+    /// greet_if_u32::<String>();
+    /// assert!(u32::is::<u32>());
+    /// assert!(!usize::is::<u32>());
+    /// ```
+    fn is<T: Any>() -> bool;
+}
+
+impl<A: Any> Is for A {
+    #[inline]
+    fn is<T: Any>() -> bool {
+        TypeId::of::<A>() == TypeId::of::<T>()
+    }
+}
diff --git a/crates/bevy_reflect/src/lib.rs b/crates/bevy_reflect/src/lib.rs
index 477c222a345ce..022fcd2a41067 100644
--- a/crates/bevy_reflect/src/lib.rs
+++ b/crates/bevy_reflect/src/lib.rs
@@ -583,6 +583,7 @@ mod fields;
 mod from_reflect;
 #[cfg(feature = "functions")]
 pub mod func;
+mod is;
 mod kind;
 mod list;
 mod map;
@@ -655,6 +656,7 @@ pub use error::*;
 pub use fields::*;
 pub use from_reflect::*;
 pub use generics::*;
+pub use is::*;
 pub use kind::*;
 pub use list::*;
 pub use map::*;

diff --git a/examples/ui/box_shadow.rs b/examples/ui/box_shadow.rs
index be97133b853bb..6643792f2e852 100644
--- a/examples/ui/box_shadow.rs
+++ b/examples/ui/box_shadow.rs
@@ -1,8 +1,6 @@
 //! This example shows how to create a node with a shadow and adjust its settings interactively.
 
-use bevy::{
-    color::palettes::css::*, prelude::*, time::Time, window::RequestRedraw, winit::WinitSettings,
-};
+use bevy::{color::palettes::css::*, prelude::*, time::Time, window::RequestRedraw};
 
 const NORMAL_BUTTON: Color = Color::srgb(0.15, 0.15, 0.15);
 const HOVERED_BUTTON: Color = Color::srgb(0.25, 0.25, 0.25);
@@ -119,7 +117,6 @@ struct HeldButton {
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        .insert_resource(WinitSettings::desktop_app())
         .insert_resource(SHADOW_DEFAULT_SETTINGS)
         .insert_resource(SHAPE_DEFAULT_SETTINGS)
         .insert_resource(HeldButton::default())
diff --git a/examples/ui/button.rs b/examples/ui/button.rs
index a1b557945756b..b2090ee4dd16b 100644
--- a/examples/ui/button.rs
+++ b/examples/ui/button.rs
@@ -1,13 +1,11 @@
 //! This example illustrates how to create a button that changes color and text based on its
 //! interaction state.
 
-use bevy::{color::palettes::basic::*, input_focus::InputFocus, prelude::*, winit::WinitSettings};
+use bevy::{color::palettes::basic::*, input_focus::InputFocus, prelude::*};
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         // `InputFocus` must be set for accessibility to recognize the button.
         .init_resource::<InputFocus>()
         .add_systems(Startup, setup)
diff --git a/examples/ui/core_widgets.rs b/examples/ui/core_widgets.rs
index d3408f8c972ba..6e6caefc2807e 100644
--- a/examples/ui/core_widgets.rs
+++ b/examples/ui/core_widgets.rs
@@ -14,7 +14,6 @@ use bevy::{
     picking::hover::Hovered,
     prelude::*,
     ui::{Checked, InteractionDisabled, Pressed},
-    winit::WinitSettings,
 };
 
 fn main() {
@@ -25,8 +24,6 @@ fn main() {
             InputDispatchPlugin,
             TabNavigationPlugin,
         ))
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .insert_resource(DemoWidgetStates {
             slider_value: 50.0,
             slider_click: TrackClick::Snap,
diff --git a/examples/ui/core_widgets_observers.rs b/examples/ui/core_widgets_observers.rs
index 0d545bc481850..873cef636db54 100644
--- a/examples/ui/core_widgets_observers.rs
+++ b/examples/ui/core_widgets_observers.rs
@@ -14,7 +14,6 @@ use bevy::{
     picking::hover::Hovered,
     prelude::*,
     ui::{Checked, InteractionDisabled, Pressed},
-    winit::WinitSettings,
 };
 
 fn main() {
@@ -25,8 +24,6 @@ fn main() {
             InputDispatchPlugin,
             TabNavigationPlugin,
         ))
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .insert_resource(DemoWidgetStates { slider_value: 50.0 })
         .add_systems(Startup, setup)
         .add_observer(button_on_add_pressed)
diff --git a/examples/ui/display_and_visibility.rs b/examples/ui/display_and_visibility.rs
index b8035bed6bad6..ce96648c88636 100644
--- a/examples/ui/display_and_visibility.rs
+++ b/examples/ui/display_and_visibility.rs
@@ -4,7 +4,6 @@ use bevy::{
     color::palettes::css::{DARK_CYAN, DARK_GRAY, YELLOW},
     ecs::{component::Mutable, hierarchy::ChildSpawnerCommands},
     prelude::*,
-    winit::WinitSettings,
 };
 
 const PALETTE: [&str; 4] = ["27496D", "466B7A", "669DB3", "ADCBE3"];
@@ -13,8 +12,6 @@ const HIDDEN_COLOR: Color = Color::srgb(1.0, 0.7, 0.7);
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(
             Update,
diff --git a/examples/ui/feathers.rs b/examples/ui/feathers.rs
index 9046d3b1a3edd..8d3ffc96ceb8e 100644
--- a/examples/ui/feathers.rs
+++ b/examples/ui/feathers.rs
@@ -23,7 +23,6 @@ use bevy::{
     },
     prelude::*,
     ui::{Checked, InteractionDisabled},
-    winit::WinitSettings,
 };
 
 /// A struct to hold the state of various widgets shown in the demo.
@@ -53,8 +52,6 @@ fn main() {
             rgb_color: palettes::tailwind::EMERALD_800.with_alpha(0.7),
             hsl_color: palettes::tailwind::AMBER_800.into(),
         })
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, update_colors)
         .run();
diff --git a/examples/ui/ghost_nodes.rs b/examples/ui/ghost_nodes.rs
index 10f0d64c7b860..4d68724b3beec 100644
--- a/examples/ui/ghost_nodes.rs
+++ b/examples/ui/ghost_nodes.rs
@@ -9,12 +9,11 @@
 //!
 //! In order to use [`GhostNode`]s you must enable the `ghost_nodes` feature flag.
 
-use bevy::{prelude::*, ui::experimental::GhostNode, winit::WinitSettings};
+use bevy::{prelude::*, ui::experimental::GhostNode};
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, button_system)
         .run();
diff --git a/examples/ui/overflow.rs b/examples/ui/overflow.rs
index 2443ac7707bef..2af51bf5c5fbd 100644
--- a/examples/ui/overflow.rs
+++ b/examples/ui/overflow.rs
@@ -1,12 +1,10 @@
 //! Simple example demonstrating overflow behavior.
 
-use bevy::{color::palettes::css::*, prelude::*, winit::WinitSettings};
+use bevy::{color::palettes::css::*, prelude::*};
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, update_outlines)
         .run();
diff --git a/examples/ui/overflow_clip_margin.rs b/examples/ui/overflow_clip_margin.rs
index 888aa4d4b45d6..dd8b283ae9f39 100644
--- a/examples/ui/overflow_clip_margin.rs
+++ b/examples/ui/overflow_clip_margin.rs
@@ -1,12 +1,10 @@
 //! Simple example demonstrating the `OverflowClipMargin` style property.
 
-use bevy::{color::palettes::css::*, prelude::*, winit::WinitSettings};
+use bevy::{color::palettes::css::*, prelude::*};
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .run();
 }
diff --git a/examples/ui/relative_cursor_position.rs b/examples/ui/relative_cursor_position.rs
index 16fec4903925b..67932d69ef3d3 100644
--- a/examples/ui/relative_cursor_position.rs
+++ b/examples/ui/relative_cursor_position.rs
@@ -1,12 +1,10 @@
 //! Showcases the [`RelativeCursorPosition`] component, used to check the position of the cursor relative to a UI node.
 
-use bevy::{camera::Viewport, prelude::*, ui::RelativeCursorPosition, winit::WinitSettings};
+use bevy::{camera::Viewport, prelude::*, ui::RelativeCursorPosition};
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, relative_cursor_position_system)
         .run();
diff --git a/examples/ui/scroll.rs b/examples/ui/scroll.rs
index e3c7002925f90..a1f822f9680a1 100644
--- a/examples/ui/scroll.rs
+++ b/examples/ui/scroll.rs
@@ -7,13 +7,11 @@ use bevy::{
     input::mouse::{MouseScrollUnit, MouseWheel},
     picking::hover::HoverMap,
     prelude::*,
-    winit::WinitSettings,
 };
 
 fn main() {
     let mut app = App::new();
     app.add_plugins(DefaultPlugins)
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, send_scroll_events)
         .add_observer(on_scroll_handler);
diff --git a/examples/ui/tab_navigation.rs b/examples/ui/tab_navigation.rs
index eca992f2ab782..57a9397f55199 100644
--- a/examples/ui/tab_navigation.rs
+++ b/examples/ui/tab_navigation.rs
@@ -7,14 +7,11 @@ use bevy::{
         InputDispatchPlugin, InputFocus,
     },
     prelude::*,
-    winit::WinitSettings,
 };
 
 fn main() {
     App::new()
         .add_plugins((DefaultPlugins, InputDispatchPlugin, TabNavigationPlugin))
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, (button_system, focus_system))
         .run();
diff --git a/examples/ui/text_wrap_debug.rs b/examples/ui/text_wrap_debug.rs
index d718a870e8aca..212a820abca75 100644
--- a/examples/ui/text_wrap_debug.rs
+++ b/examples/ui/text_wrap_debug.rs
@@ -1,7 +1,7 @@
 //! This example demonstrates text wrapping and use of the `LineBreakOn` property.
 
 use argh::FromArgs;
-use bevy::{prelude::*, text::LineBreak, window::WindowResolution, winit::WinitSettings};
+use bevy::{prelude::*, text::LineBreak, window::WindowResolution};
 
 #[derive(FromArgs, Resource)]
 /// `text_wrap_debug` demonstrates text wrapping and use of the `LineBreakOn` property
@@ -36,7 +36,6 @@ fn main() {
             primary_window: Some(window),
             ..Default::default()
         }))
-        .insert_resource(WinitSettings::desktop_app())
         .insert_resource(UiScale(args.ui_scale))
         .add_systems(Startup, spawn)
         .run();
diff --git a/examples/ui/ui_drag_and_drop.rs b/examples/ui/ui_drag_and_drop.rs
index fdaf8de0add07..fe39b5cd3079d 100644
--- a/examples/ui/ui_drag_and_drop.rs
+++ b/examples/ui/ui_drag_and_drop.rs
@@ -1,12 +1,10 @@
 //! Demonstrates dragging and dropping UI nodes
 
-use bevy::{prelude::*, winit::WinitSettings};
+use bevy::prelude::*;
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .run();
 }
diff --git a/examples/ui/ui_target_camera.rs b/examples/ui/ui_target_camera.rs
index f868d2c1236a3..c2a374bf699a6 100644
--- a/examples/ui/ui_target_camera.rs
+++ b/examples/ui/ui_target_camera.rs
@@ -7,7 +7,6 @@ use bevy::color::palettes::css::YELLOW;
 use bevy::log::LogPlugin;
 use bevy::log::DEFAULT_FILTER;
 use bevy::prelude::*;
-use bevy::winit::WinitSettings;
 
 fn main() {
     App::new()
@@ -16,7 +15,6 @@ fn main() {
             filter: format!("{DEFAULT_FILTER},bevy_render::camera=off"),
             ..Default::default()
         }))
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .run();
 }
diff --git a/examples/ui/ui_texture_atlas.rs b/examples/ui/ui_texture_atlas.rs
index 51459c3f47056..0cf00b100cb45 100644
--- a/examples/ui/ui_texture_atlas.rs
+++ b/examples/ui/ui_texture_atlas.rs
@@ -1,6 +1,6 @@
 //! This example illustrates how to use `TextureAtlases` within ui
 
-use bevy::{color::palettes::css::*, prelude::*, winit::WinitSettings};
+use bevy::{color::palettes::css::*, prelude::*};
 
 fn main() {
     App::new()
@@ -10,8 +10,6 @@ fn main() {
             // by linear filtering.
             ImagePlugin::default_nearest(),
         ))
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, increment_atlas_index)
         .run();
diff --git a/examples/ui/ui_texture_atlas_slice.rs b/examples/ui/ui_texture_atlas_slice.rs
index dc639a1a58cc3..b651630094ea8 100644
--- a/examples/ui/ui_texture_atlas_slice.rs
+++ b/examples/ui/ui_texture_atlas_slice.rs
@@ -5,14 +5,11 @@ use bevy::{
     color::palettes::css::{GOLD, ORANGE},
     prelude::*,
     ui::widget::NodeImageMode,
-    winit::WinitSettings,
 };
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, button_system)
         .run();
diff --git a/examples/ui/ui_texture_slice.rs b/examples/ui/ui_texture_slice.rs
index 9e9e2339269be..464bdfd41bce9 100644
--- a/examples/ui/ui_texture_slice.rs
+++ b/examples/ui/ui_texture_slice.rs
@@ -5,14 +5,11 @@ use bevy::{
     color::palettes::css::{GOLD, ORANGE},
     prelude::*,
     ui::widget::NodeImageMode,
-    winit::WinitSettings,
 };
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .add_systems(Update, button_system)
         .run();
diff --git a/examples/ui/ui_texture_slice_flip_and_tile.rs b/examples/ui/ui_texture_slice_flip_and_tile.rs
index 987eeb28ea024..e530f16b3db58 100644
--- a/examples/ui/ui_texture_slice_flip_and_tile.rs
+++ b/examples/ui/ui_texture_slice_flip_and_tile.rs
@@ -4,15 +4,12 @@ use bevy::{
     image::{ImageLoaderSettings, ImageSampler},
     prelude::*,
     ui::widget::NodeImageMode,
-    winit::WinitSettings,
 };
 
 fn main() {
     App::new()
         .add_plugins(DefaultPlugins)
         .insert_resource(UiScale(2.))
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use for UI-only apps.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .run();
 }
diff --git a/examples/ui/virtual_keyboard.rs b/examples/ui/virtual_keyboard.rs
index 00f3c1a12065b..a6eef0a9dbaae 100644
--- a/examples/ui/virtual_keyboard.rs
+++ b/examples/ui/virtual_keyboard.rs
@@ -9,7 +9,6 @@ use bevy::{
     },
     input_focus::{tab_navigation::TabNavigationPlugin, InputDispatchPlugin},
     prelude::*,
-    winit::WinitSettings,
 };
 
 fn main() {
@@ -22,8 +21,6 @@ fn main() {
             FeathersPlugin,
         ))
         .insert_resource(UiTheme(create_dark_theme()))
-        // Only run the app when there is user input. This will significantly reduce CPU/GPU use.
-        .insert_resource(WinitSettings::desktop_app())
         .add_systems(Startup, setup)
         .run();
 }

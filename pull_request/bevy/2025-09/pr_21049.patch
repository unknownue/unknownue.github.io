diff --git a/crates/bevy_ecs/src/observer/mod.rs b/crates/bevy_ecs/src/observer/mod.rs
index 43edfdd4ccef6..d268085c40e8f 100644
--- a/crates/bevy_ecs/src/observer/mod.rs
+++ b/crates/bevy_ecs/src/observer/mod.rs
@@ -1119,4 +1119,17 @@ mod tests {
             .component_observers()
             .contains_key(&a));
     }
+
+    #[test]
+    #[expect(deprecated, reason = "We still need to test `On::target`")]
+    fn observer_target() {
+        let mut world = World::new();
+        let entity = world
+            .spawn_empty()
+            .observe(|event: On<EntityEventA>| {
+                assert_eq!(event.target(), event.event_target());
+            })
+            .id();
+        world.trigger(EntityEventA(entity));
+    }
 }
diff --git a/crates/bevy_ecs/src/observer/system_param.rs b/crates/bevy_ecs/src/observer/system_param.rs
index d7cbbd5240a6e..3391d3eb4d26c 100644
--- a/crates/bevy_ecs/src/observer/system_param.rs
+++ b/crates/bevy_ecs/src/observer/system_param.rs
@@ -129,15 +129,7 @@ impl<'w, 't, E: Event, B: Bundle> On<'w, 't, E, B> {
     }
 }
 
-impl<
-        'w,
-        't,
-        const AUTO_PROPAGATE: bool,
-        E: EntityEvent + for<'a> Event<Trigger<'a> = PropagateEntityTrigger<AUTO_PROPAGATE, E, T>>,
-        B: Bundle,
-        T: Traversal<E>,
-    > On<'w, 't, E, B>
-{
+impl<'w, 't, E: EntityEvent, B: Bundle> On<'w, 't, E, B> {
     /// A deprecated way to retrieve the entity that this [`EntityEvent`] targeted at.
     ///
     /// Access the event via [`On::event`], then read the entity that the event was targeting.
@@ -150,7 +142,17 @@ impl<
     pub fn target(&self) -> Entity {
         self.event.event_target()
     }
+}
 
+impl<
+        'w,
+        't,
+        const AUTO_PROPAGATE: bool,
+        E: EntityEvent + for<'a> Event<Trigger<'a> = PropagateEntityTrigger<AUTO_PROPAGATE, E, T>>,
+        B: Bundle,
+        T: Traversal<E>,
+    > On<'w, 't, E, B>
+{
     /// Returns the original [`Entity`] that this [`EntityEvent`] targeted via [`EntityEvent::event_target`] when it was _first_ triggered,
     /// prior to any propagation logic.
     pub fn original_event_target(&self) -> Entity {

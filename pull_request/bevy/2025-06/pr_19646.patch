diff --git a/crates/bevy_core_pipeline/src/skybox/mod.rs b/crates/bevy_core_pipeline/src/skybox/mod.rs
index 81744f74a5386..51c6934ecec4a 100644
--- a/crates/bevy_core_pipeline/src/skybox/mod.rs
+++ b/crates/bevy_core_pipeline/src/skybox/mod.rs
@@ -125,7 +125,7 @@ impl ExtractComponent for Skybox {
             SkyboxUniforms {
                 brightness: skybox.brightness * exposure,
                 transform: Transform::from_rotation(skybox.rotation)
-                    .compute_matrix()
+                    .to_matrix()
                     .inverse(),
                 #[cfg(all(feature = "webgl", target_arch = "wasm32", not(feature = "webgpu")))]
                 _wasm_padding_8b: 0,
diff --git a/crates/bevy_pbr/src/light/mod.rs b/crates/bevy_pbr/src/light/mod.rs
index 1ff057b0a12e5..8273ae4b6deaf 100644
--- a/crates/bevy_pbr/src/light/mod.rs
+++ b/crates/bevy_pbr/src/light/mod.rs
@@ -628,7 +628,7 @@ pub fn update_point_light_frusta(
 
         for (view_rotation, frustum) in view_rotations.iter().zip(cubemap_frusta.iter_mut()) {
             let world_from_view = view_translation * *view_rotation;
-            let clip_from_world = clip_from_view * world_from_view.compute_matrix().inverse();
+            let clip_from_world = clip_from_view * world_from_view.to_matrix().inverse();
 
             *frustum = Frustum::from_clip_from_world_custom_far(
                 &clip_from_world,
diff --git a/crates/bevy_pbr/src/light_probe/mod.rs b/crates/bevy_pbr/src/light_probe/mod.rs
index 6f863273ef12e..bfce2f1e26356 100644
--- a/crates/bevy_pbr/src/light_probe/mod.rs
+++ b/crates/bevy_pbr/src/light_probe/mod.rs
@@ -378,7 +378,7 @@ fn gather_environment_map_uniform(
         let environment_map_uniform = if let Some(environment_map_light) = environment_map_light {
             EnvironmentMapUniform {
                 transform: Transform::from_rotation(environment_map_light.rotation)
-                    .compute_matrix()
+                    .to_matrix()
                     .inverse(),
             }
         } else {
diff --git a/crates/bevy_transform/src/components/transform.rs b/crates/bevy_transform/src/components/transform.rs
index 7873ae743c827..bc161e9e8c738 100644
--- a/crates/bevy_transform/src/components/transform.rs
+++ b/crates/bevy_transform/src/components/transform.rs
@@ -256,10 +256,10 @@ impl Transform {
         self
     }
 
-    /// Returns the 3d affine transformation matrix from this transforms translation,
+    /// Computes the 3d affine transformation matrix from this transform's translation,
     /// rotation, and scale.
     #[inline]
-    pub fn compute_matrix(&self) -> Mat4 {
+    pub fn to_matrix(&self) -> Mat4 {
         Mat4::from_scale_rotation_translation(self.scale, self.rotation, self.translation)
     }
 
diff --git a/release-content/migration-guides/rename_global_transform_compute_matrix.md b/release-content/migration-guides/rename_global_transform_compute_matrix.md
deleted file mode 100644
index d4676ecc5e6b2..0000000000000
--- a/release-content/migration-guides/rename_global_transform_compute_matrix.md
+++ /dev/null
@@ -1,6 +0,0 @@
----
-title: GlobalTransform::compute_matrix rename
-pull_requests: [19643]
----
-
-`GlobalTransform::compute_matrix` has been renamed to `GlobalTransform::to_matrix` because it does not compute anything, it simply moves data into a different type.
diff --git a/release-content/migration-guides/rename_transform_compute_matrix.md b/release-content/migration-guides/rename_transform_compute_matrix.md
new file mode 100644
index 0000000000000..eb188256cffe1
--- /dev/null
+++ b/release-content/migration-guides/rename_transform_compute_matrix.md
@@ -0,0 +1,7 @@
+---
+title: Transform and GlobalTransform::compute_matrix rename
+pull_requests: [19643, 19646]
+---
+
+`GlobalTransform::compute_matrix` has been renamed to `GlobalTransform::to_matrix` because it does not compute anything, it simply moves data into a different type.
+`Transform::compute_matrix` has been renamed to `Transform::to_matrix` for consistency with `GlobalTransform`.
